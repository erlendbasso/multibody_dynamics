var searchIndex = JSON.parse('{\
"approx":{"doc":"A crate that provides facilities for testing the …","t":[3,8,16,3,8,3,8,10,14,11,11,14,14,14,14,14,14,14,11,11,11,11,11,11,11,11,11,10,10,10,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,10,14,11,11,14,11,11,11,11,11,11,11,11,11,10,14,11,11,14],"n":["AbsDiff","AbsDiffEq","Epsilon","Relative","RelativeEq","Ulps","UlpsEq","abs_diff_eq","abs_diff_eq","abs_diff_ne","abs_diff_ne","abs_diff_ne","assert_abs_diff_eq","assert_abs_diff_ne","assert_relative_eq","assert_relative_ne","assert_ulps_eq","assert_ulps_ne","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","default_epsilon","default_max_relative","default_max_ulps","epsilon","epsilon","epsilon","epsilon","epsilon","epsilon","eq","eq","eq","from","from","from","into","into","into","max_relative","max_relative","max_ulps","max_ulps","ne","ne","ne","relative_eq","relative_eq","relative_ne","relative_ne","relative_ne","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_ne","ulps_ne","ulps_ne"],"q":["approx","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The requisite parameters for testing for approximate …","Equality that is defined using the absolute difference of …","Used for specifying relative comparisons.","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","The requisite parameters for testing for approximate …","Equality comparisons between two numbers using both the …","A test for equality that uses the absolute difference to …","Approximate equality of using the absolute difference.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","The inverse of <code>AbsDiffEq::abs_diff_eq</code>.","Approximate inequality of using the absolute difference.","An assertion that delegates to <code>abs_diff_eq!</code>, and panics …","An assertion that delegates to <code>abs_diff_ne!</code>, and panics …","An assertion that delegates to <code>relative_eq!</code>, and panics …","An assertion that delegates to <code>relative_ne!</code>, and panics …","An assertion that delegates to <code>ulps_eq!</code>, and panics with a …","An assertion that delegates to <code>ulps_ne!</code>, and panics with a …","","","","","","","","","","The default tolerance to use when testing values that are …","The default relative tolerance for testing values that are …","The default ULPs to tolerate when testing values that are …","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","Replace the epsilon value with the one specified.","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","The tolerance to use when testing values that are close …","Peform the equality comparison","Peform the equality comparison","Peform the equality comparison","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Replace the maximum relative value with the one specified.","The relative tolerance for testing values that are …","Replace the max ulps value with the one specified.","The ULPs to tolerate when testing values that are …","Peform the inequality comparison","Peform the inequality comparison","Peform the inequality comparison","A test for equality that uses a relative comparison if the …","Approximate equality using both the absolute difference …","The inverse of <code>RelativeEq::relative_eq</code>.","The inverse of <code>RelativeEq::relative_eq</code>.","Approximate inequality using both the absolute difference …","","","","","","","","","","A test for equality that uses units in the last place …","Approximate equality using both the absolute difference …","The inverse of <code>UlpsEq::ulps_eq</code>.","The inverse of <code>UlpsEq::ulps_eq</code>.","Approximate inequality using both the absolute difference …"],"i":[0,0,8,0,0,0,0,8,0,8,8,0,0,0,0,0,0,0,2,3,4,2,3,4,2,3,4,8,9,10,2,3,4,2,3,4,2,3,4,2,3,4,2,3,4,3,3,4,4,2,3,4,9,0,9,9,0,2,3,4,2,3,4,2,3,4,10,0,10,10,0],"f":[0,0,0,0,0,0,0,[[],1],0,[[],1],[[],1],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],3],[[],4],[[]],[[]],[[],5],[2,2],[3,3],[4,4],0,0,0,[2,1],[3,1],[4,1],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],0,[[4,5],4],0,[2,1],[3,1],[4,1],[[],1],0,[[],1],[[],1],0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],7],[[],7],[[],7],[5,1],0,[5,1],[5,1],0],"p":[[15,"bool"],[3,"AbsDiff"],[3,"Relative"],[3,"Ulps"],[15,"u32"],[4,"Result"],[3,"TypeId"],[8,"AbsDiffEq"],[8,"RelativeEq"],[8,"UlpsEq"]]},\
"libm":{"doc":"libm in pure Rust","t":[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"n":["acos","acosf","acosh","acoshf","asin","asinf","asinh","asinhf","atan","atan2","atan2f","atanf","atanh","atanhf","cbrt","cbrtf","ceil","ceilf","copysign","copysignf","cos","cosf","cosh","coshf","erf","erfc","erfcf","erff","exp","exp10","exp10f","exp2","exp2f","expf","expm1","expm1f","fabs","fabsf","fdim","fdimf","floor","floorf","fma","fmaf","fmax","fmaxf","fmin","fminf","fmod","fmodf","frexp","frexpf","hypot","hypotf","ilogb","ilogbf","j0","j0f","j1","j1f","jn","jnf","ldexp","ldexpf","lgamma","lgamma_r","lgammaf","lgammaf_r","log","log10","log10f","log1p","log1pf","log2","log2f","logf","modf","modff","nextafter","nextafterf","pow","powf","remainder","remainderf","remquo","remquof","rint","rintf","round","roundf","scalbn","scalbnf","sin","sincos","sincosf","sinf","sinh","sinhf","sqrt","sqrtf","tan","tanf","tanh","tanhf","tgamma","tgammaf","trunc","truncf","y0","y0f","y1","y1f","yn","ynf"],"q":["libm","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Arccosine (f64)","Arccosine (f32)","Inverse hyperbolic cosine (f64)","Inverse hyperbolic cosine (f32)","Arcsine (f64)","Arcsine (f32)","Inverse hyperbolic sine (f64)","Inverse hyperbolic sine (f32)","Arctangent (f64)","Arctangent of y/x (f64)","Arctangent of y/x (f32)","Arctangent (f32)","Inverse hyperbolic tangent (f64)","Inverse hyperbolic tangent (f32)","Computes the cube root of the argument.","Cube root (f32)","Ceil (f64)","Ceil (f32)","Sign of Y, magnitude of X (f64)","Sign of Y, magnitude of X (f32)","","","Hyperbolic cosine (f64)","Hyperbolic cosine (f64)","Error function (f64)","Error function (f64)","Error function (f32)","Error function (f32)","Exponential, base <em>e</em> (f64)","","","Exponential, base 2 (f64)","Exponential, base 2 (f32)","Exponential, base <em>e</em> (f32)","Exponential, base <em>e</em>, of x-1 (f64)","Exponential, base <em>e</em>, of x-1 (f32)","Absolute value (magnitude) (f64) Calculates the absolute …","Absolute value (magnitude) (f32) Calculates the absolute …","Positive difference (f64)","Positive difference (f32)","Floor (f64)","Floor (f32)","Floating multiply add (f64)","Floating multiply add (f32)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[[1,1],1],[[2,2],2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[[1,1],1],[[2,2],2],[1,1],[2,2],[1,1],[2,2],[1,1],[1,1],[2,2],[2,2],[1,1],[1,1],[2,2],[1,1],[2,2],[2,2],[1,1],[2,2],[1,1],[2,2],[[1,1],1],[[2,2],2],[1,1],[2,2],[[1,1,1],1],[[2,2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[1],[2],[[1,1],1],[[2,2],2],[1,3],[2,3],[1,1],[2,2],[1,1],[2,2],[[3,1],1],[[3,2],2],[[1,3],1],[[2,3],2],[1,1],[1],[2,2],[2],[1,1],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[2,2],[1],[2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1],1],[[2,2],2],[[1,1]],[[2,2]],[1,1],[2,2],[1,1],[2,2],[[1,3],1],[[2,3],2],[1,1],[1],[2],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[1,1],[2,2],[[3,1],1],[[3,2],2]],"p":[[15,"f64"],[15,"f32"],[15,"i32"]]},\
"multibody_dynamics":{"doc":"multibody_dynamics","t":[0,8,4,3,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["multibody","IntoHomogenousConfigurationVec","JointType","MultiBody","Prismatic","Revolute","SixDOF","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compute_jacobian","compute_jacobian_derivative","compute_jacobian_derivatives","compute_jacobians","compute_mass_matrix","fmt","forward_dynamics_ab","from","from","from_subset","from_subset","generalized_newton_euler","into","into","into","is_in_subset","is_in_subset","minimal_to_homogenous_configuration","new","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["multibody_dynamics","multibody_dynamics::multibody","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Allows overloading of functions for both a single 6DOF …","","","","","","","","","","","","","","","","Computes the mass matrix of the multibody system using the …","","Computes the forward dynamics using the articulated body …","Returns the argument unchanged.","Returns the argument unchanged.","","","$$E=mc^2$$","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Converts a set of minimal coordinates to a set of …","","","","","","","","","","","",""],"i":[0,0,0,0,1,1,1,2,1,2,1,1,1,2,2,2,2,2,1,2,2,1,2,1,2,20,2,1,2,1,2,2,1,2,1,2,1,2,1,2,1,2,1],"f":[0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[[2,3,4],[[6,[5]]]],[[2,3,7,4],[[6,[5]]]],[[2,7],[[3,[[6,[5]]]]]],[[2,3],[[3,[[6,[5]]]]]],[2,[[6,[5]]]],[[1,8],9],[[2,3,7,3,3,7,10,10],[[7,[5]]]],[[]],[[]],[[]],[[]],[[2,3,7,7,7,3,7],[[7,[5]]]],[[],[[3,[[11,[5]]]]]],[[]],[[]],[[],12],[[],12],[[2,7],[[3,[[11,[5]]]]]],[[[3,[[11,[5]]]],[14,[[3,[[13,[5]]]]]],[14,[[3,[[15,[5]]]]]],[3,[1]],[3,[16]],[10,[5]],[14,[[3,[[10,[5]]]]]],[14,[[3,[[10,[5]]]]]],[14,[[3,[5]]]],[14,[[3,[5]]]],[14,[5]]],[[18,[2,17]]]],[[]],[[],14],[[],14],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],19],[[],19]],"p":[[4,"JointType"],[3,"MultiBody"],[3,"Vec"],[15,"usize"],[15,"f64"],[6,"SMatrix"],[6,"SVector"],[3,"Formatter"],[6,"Result"],[6,"Vector3"],[6,"Isometry3"],[15,"bool"],[6,"Matrix6"],[4,"Option"],[6,"Matrix3"],[15,"u16"],[15,"str"],[4,"Result"],[3,"TypeId"],[8,"IntoHomogenousConfigurationVec"]]},\
"nalgebra":{"doc":"nalgebra","tn":["ClosedAdd","ClosedDiv","ClosedMul","ClosedSub","Complex","ComplexField","Element","Field","RealField","RealField","SimdBool","SimdBool","SimdComplexField","SimdPartialOrd","SimdRealField","SimdRealField","SimdValue","abs","abs","abs","acos","acos","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","all","and","any","argument","argument","as_","asin","asin","asinh","asinh","atan","atan","atan2","atanh","atanh","base","bitmask","borrow","borrow_mut","cbrt","cbrt","ceil","ceil","center","clamp","clamp","clone","clone_into","conj","conjugate","conjugate","convert","convert_ref","convert_ref_unchecked","convert_unchecked","copysign","cos","cos","cosc","cosh","cosh","coshc","default","distance","distance_squared","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","e","eq","exp","exp","exp2","exp2","exp_m1","exp_m1","extract","extract","extract_unchecked","extract_unchecked","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","fract","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_real","from_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str","from_str_radix","from_subset","from_superset_unchecked","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","geometry","hash","hypot","hypot","i","if_else","if_else2","if_else3","im","imaginary","imaginary","inf","inf_sup","into","inv","inv","inv","is_convertible","is_finite","is_finite","is_finite","is_in_subset","is_in_subset","is_infinite","is_nan","is_normal","is_one","is_sign_negative","is_sign_positive","is_zero","l1_norm","lanes","lanes","linalg","ln","ln","ln_10","ln_1p","ln_1p","ln_2","log","log","log10","log10","log10_e","log2","log2","log2_e","map_lanes","max","max","max_value","min","min","min_value","modulus","modulus","modulus_squared","modulus_squared","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","none","norm","norm1","norm1","norm_sqr","norm_squared","one","one","or","partial_clamp","partial_cmp","partial_ge","partial_gt","partial_le","partial_lt","partial_max","partial_min","partial_sort2","pi","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powf","powf","powi","powi","powi","powu","product","product","re","real","real","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace_unchecked","replace_unchecked","round","round","scale","scale","scale","scale_mut","select","select","set_one","set_zero","signum","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_e","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_lt","simd_max","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","sin","sin","sin_cos","sin_cos","sinc","sinh","sinh","sinh_cosh","sinh_cosh","sinhc","splat","splat","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sup","tan","tan","tanh","tanh","to_exp","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_subset","to_subset_unchecked","to_superset","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trunc","trunc","try_convert","try_convert_ref","try_from","try_into","try_sqrt","try_sqrt","two_pi","type_id","unscale","unscale","unscale","unscale_mut","wrap","xor","zero","zero","zip_map_lanes","ArrayStorage","DMatrix","DMatrixSlice","DMatrixSliceMut","DMatrixView","DMatrixViewMut","DVector","DVectorSlice","DVectorSliceMut","DVectorView","DVectorViewMut","DimRange","EuclideanNorm","LpNorm","Matrix","Matrix1","Matrix1x2","Matrix1x3","Matrix1x4","Matrix1x5","Matrix1x6","Matrix1xX","Matrix2","Matrix2x1","Matrix2x3","Matrix2x4","Matrix2x5","Matrix2x6","Matrix2xX","Matrix3","Matrix3x1","Matrix3x2","Matrix3x4","Matrix3x5","Matrix3x6","Matrix3xX","Matrix4","Matrix4x1","Matrix4x2","Matrix4x3","Matrix4x5","Matrix4x6","Matrix4xX","Matrix5","Matrix5x1","Matrix5x2","Matrix5x3","Matrix5x4","Matrix5x6","Matrix5xX","Matrix6","Matrix6x1","Matrix6x2","Matrix6x3","Matrix6x4","Matrix6x5","Matrix6xX","MatrixCross","MatrixMN","MatrixN","MatrixSlice","MatrixSlice1","MatrixSlice1x2","MatrixSlice1x3","MatrixSlice1x4","MatrixSlice1x5","MatrixSlice1x6","MatrixSlice1xX","MatrixSlice2","MatrixSlice2x1","MatrixSlice2x3","MatrixSlice2x4","MatrixSlice2x5","MatrixSlice2x6","MatrixSlice2xX","MatrixSlice3","MatrixSlice3x1","MatrixSlice3x2","MatrixSlice3x4","MatrixSlice3x5","MatrixSlice3x6","MatrixSlice3xX","MatrixSlice4","MatrixSlice4x1","MatrixSlice4x2","MatrixSlice4x3","MatrixSlice4x5","MatrixSlice4x6","MatrixSlice4xX","MatrixSlice5","MatrixSlice5x1","MatrixSlice5x2","MatrixSlice5x3","MatrixSlice5x4","MatrixSlice5x6","MatrixSlice5xX","MatrixSlice6","MatrixSlice6x1","MatrixSlice6x2","MatrixSlice6x3","MatrixSlice6x4","MatrixSlice6x5","MatrixSlice6xX","MatrixSliceMut","MatrixSliceMut1","MatrixSliceMut1x2","MatrixSliceMut1x3","MatrixSliceMut1x4","MatrixSliceMut1x5","MatrixSliceMut1x6","MatrixSliceMut1xX","MatrixSliceMut2","MatrixSliceMut2x1","MatrixSliceMut2x3","MatrixSliceMut2x4","MatrixSliceMut2x5","MatrixSliceMut2x6","MatrixSliceMut2xX","MatrixSliceMut3","MatrixSliceMut3x1","MatrixSliceMut3x2","MatrixSliceMut3x4","MatrixSliceMut3x5","MatrixSliceMut3x6","MatrixSliceMut3xX","MatrixSliceMut4","MatrixSliceMut4x1","MatrixSliceMut4x2","MatrixSliceMut4x3","MatrixSliceMut4x5","MatrixSliceMut4x6","MatrixSliceMut4xX","MatrixSliceMut5","MatrixSliceMut5x1","MatrixSliceMut5x2","MatrixSliceMut5x3","MatrixSliceMut5x4","MatrixSliceMut5x6","MatrixSliceMut5xX","MatrixSliceMut6","MatrixSliceMut6x1","MatrixSliceMut6x2","MatrixSliceMut6x3","MatrixSliceMut6x4","MatrixSliceMut6x5","MatrixSliceMut6xX","MatrixSliceMutMN","MatrixSliceMutN","MatrixSliceMutXx1","MatrixSliceMutXx2","MatrixSliceMutXx3","MatrixSliceMutXx4","MatrixSliceMutXx5","MatrixSliceMutXx6","MatrixSliceXx1","MatrixSliceXx2","MatrixSliceXx3","MatrixSliceXx4","MatrixSliceXx5","MatrixSliceXx6","MatrixSum","MatrixVec","MatrixView","MatrixView1","MatrixView1x2","MatrixView1x3","MatrixView1x4","MatrixView1x5","MatrixView1x6","MatrixView1xX","MatrixView2","MatrixView2x1","MatrixView2x3","MatrixView2x4","MatrixView2x5","MatrixView2x6","MatrixView2xX","MatrixView3","MatrixView3x1","MatrixView3x2","MatrixView3x4","MatrixView3x5","MatrixView3x6","MatrixView3xX","MatrixView4","MatrixView4x1","MatrixView4x2","MatrixView4x3","MatrixView4x5","MatrixView4x6","MatrixView4xX","MatrixView5","MatrixView5x1","MatrixView5x2","MatrixView5x3","MatrixView5x4","MatrixView5x6","MatrixView5xX","MatrixView6","MatrixView6x1","MatrixView6x2","MatrixView6x3","MatrixView6x4","MatrixView6x5","MatrixView6xX","MatrixViewMut","MatrixViewMut1","MatrixViewMut1x2","MatrixViewMut1x3","MatrixViewMut1x4","MatrixViewMut1x5","MatrixViewMut1x6","MatrixViewMut1xX","MatrixViewMut2","MatrixViewMut2x1","MatrixViewMut2x3","MatrixViewMut2x4","MatrixViewMut2x5","MatrixViewMut2x6","MatrixViewMut2xX","MatrixViewMut3","MatrixViewMut3x1","MatrixViewMut3x2","MatrixViewMut3x4","MatrixViewMut3x5","MatrixViewMut3x6","MatrixViewMut3xX","MatrixViewMut4","MatrixViewMut4x1","MatrixViewMut4x2","MatrixViewMut4x3","MatrixViewMut4x5","MatrixViewMut4x6","MatrixViewMut4xX","MatrixViewMut5","MatrixViewMut5x1","MatrixViewMut5x2","MatrixViewMut5x3","MatrixViewMut5x4","MatrixViewMut5x6","MatrixViewMut5xX","MatrixViewMut6","MatrixViewMut6x1","MatrixViewMut6x2","MatrixViewMut6x3","MatrixViewMut6x4","MatrixViewMut6x5","MatrixViewMut6xX","MatrixViewMutXx1","MatrixViewMutXx2","MatrixViewMutXx3","MatrixViewMutXx4","MatrixViewMutXx5","MatrixViewMutXx6","MatrixViewXx1","MatrixViewXx2","MatrixViewXx3","MatrixViewXx4","MatrixViewXx5","MatrixViewXx6","MatrixXx1","MatrixXx2","MatrixXx3","MatrixXx4","MatrixXx5","MatrixXx6","Norm","Norm","Normed","OMatrix","OVector","RowDVector","RowOVector","RowSVector","RowVector","RowVector1","RowVector2","RowVector3","RowVector4","RowVector5","RowVector6","SMatrix","SMatrixSlice","SMatrixSliceMut","SMatrixView","SMatrixViewMut","SVector","SVectorSlice","SVectorSliceMut","SVectorView","SVectorViewMut","Scalar","Size","SliceRange","SliceStorage","SliceStorageMut","SquareMatrix","UniformNorm","UninitMatrix","UninitVector","Unit","UnitVector1","UnitVector2","UnitVector3","UnitVector4","UnitVector5","UnitVector6","VecStorage","Vector","Vector1","Vector2","Vector3","Vector4","Vector5","Vector6","VectorN","VectorSlice","VectorSlice1","VectorSlice2","VectorSlice3","VectorSlice4","VectorSlice5","VectorSlice6","VectorSliceMut","VectorSliceMut1","VectorSliceMut2","VectorSliceMut3","VectorSliceMut4","VectorSliceMut5","VectorSliceMut6","VectorSum","VectorView","VectorView1","VectorView2","VectorView3","VectorView4","VectorView5","VectorView6","VectorViewMut","VectorViewMut1","VectorViewMut2","VectorViewMut3","VectorViewMut4","VectorViewMut5","VectorViewMut6","ViewStorage","ViewStorageMut","a","a","a_axis","a_axis","abs","abs_diff_eq","abs_diff_eq","ad_mul","ad_mul_to","ad_solve_lower_triangular","ad_solve_lower_triangular","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_mut","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked","ad_solve_lower_triangular_unchecked_mut","ad_solve_lower_triangular_unchecked_mut","ad_solve_upper_triangular","ad_solve_upper_triangular","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_mut","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked","ad_solve_upper_triangular_unchecked_mut","ad_solve_upper_triangular_unchecked_mut","add","add","add","add","add_assign","add_assign","add_scalar","add_scalar_mut","add_to","adjoint","adjoint_mut","adjoint_to","allocator","amax","amin","angle","angle","angle","angle_to","angle_to","append_axisangle_linearized","append_nonuniform_scaling","append_nonuniform_scaling","append_nonuniform_scaling_mut","append_nonuniform_scaling_mut","append_scaling","append_scaling","append_scaling_mut","append_scaling_mut","append_translation","append_translation","append_translation_mut","append_translation_mut","apply","apply_into","apply_metric_distance","apply_norm","argmax","argmax","argmin","argmin","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_slice_unchecked","as_mut_unchecked","as_ptr","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_slice_unchecked","as_vec","as_vec_mut","as_view","as_view_mut","assume_init","assume_init","axcpy","axcpy","axis","axis_angle","axis_angle","axpy","axpy","b","b","b_axis","b_axis","begin","bidiagonalize","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","camax","camin","cap_magnitude","cast","cast","cast","cast","cast","cdpy","cholesky","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned","clone_owned_sum","cmpy","col_piv_qr","column","column_iter","column_iter_mut","column_mean","column_mut","column_part","column_part_mut","column_product","column_sum","column_variance","columns","columns_generic","columns_generic_mut","columns_generic_with_step","columns_generic_with_step_mut","columns_mut","columns_range","columns_range_mut","columns_range_pair","columns_range_pair_mut","columns_with_step","columns_with_step_mut","complex","complex_eigenvalues","complex_eigenvalues","component_div","component_div_assign","component_div_mut","component_mul","component_mul_assign","component_mul_mut","compress_columns","compress_rows","compress_rows_tr","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_transform_mut","conjugate_transpose","conjugate_transpose_to","constraint","convolve_full","convolve_full","convolve_same","convolve_same","convolve_valid","convolve_valid","coordinates","copy_from","copy_from_slice","cos_angle","cross","cross_matrix","cross_matrix","data","default","default","default_allocator","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","determinant","determinant","diagonal","diagonal","dimension","div","div","div","div","div","div","div_assign","div_assign","div_assign","dot","dotc","dual_quaternion","eigenvalues","eigenvalues","end","eq","eq","eq","eq","eq","euler_angles","exp","extend","extend","extend","extend","extend","extend","extend","extract","extract_unchecked","face_towards","face_towards","face_towards","fill","fill_column","fill_diagonal","fill_lower_triangle","fill_lower_triangle_with_upper_triangle","fill_row","fill_upper_triangle","fill_upper_triangle_with_lower_triangle","fill_with","fill_with_identity","fixed_columns","fixed_columns_mut","fixed_columns_with_step","fixed_columns_with_step_mut","fixed_resize","fixed_rows","fixed_rows_mut","fixed_rows_with_step","fixed_rows_with_step_mut","fixed_slice","fixed_slice_mut","fixed_slice_with_steps","fixed_slice_with_steps_mut","fixed_view","fixed_view_mut","fixed_view_with_steps","fixed_view_with_steps_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold_with","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_array_storage","from_array_storage","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice","from_column_slice_generic","from_column_slice_generic","from_columns","from_columns","from_complex","from_complex_and_get","from_cos_sin_unchecked","from_data","from_data_statically_unchecked","from_diagonal","from_diagonal","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element","from_diagonal_element_generic","from_diagonal_element_generic","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element","from_element_generic","from_element_generic","from_euler_angles","from_euler_angles","from_euler_angles","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn","from_fn_generic","from_fn_generic","from_homogeneous","from_homogeneous","from_isometry","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator","from_iterator_generic","from_iterator_generic","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal","from_partial_diagonal_generic","from_partial_diagonal_generic","from_parts","from_quaternion","from_raw_parts","from_raw_parts","from_ref_unchecked","from_rotation","from_rotation_matrix","from_rotation_matrix","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator","from_row_iterator_generic","from_row_iterator_generic","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice","from_row_slice_generic","from_row_slice_generic","from_rows","from_rows","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_generic_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_unchecked","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_generic_unchecked","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_mut","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_slice_with_strides_unchecked","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec","from_vec_generic","from_vec_generic","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","from_vec_storage","full_piv_lu","ge","gemm","gemm_ad","gemm_tr","gemv","gemv","gemv_ad","gemv_ad","gemv_tr","gemv_tr","generic_slice","generic_slice_mut","generic_slice_with_steps","generic_slice_with_steps_mut","generic_view","generic_view_mut","generic_view_with_steps","generic_view_with_steps_mut","ger","ger_symm","gerc","get","get_mut","get_unchecked","get_unchecked_mut","gt","hash","hash","hash","hegemv","hegemv","hegerc","hermitian_part","hermitian_part","hessenberg","iamax","iamax","iamax_full","iamin","iamin","icamax","icamax","icamax_full","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity_generic","identity_generic","imax","imax","imin","imin","index","index","index","index_mut","index_mut","index_mut","indexing","inf","inf_sup","insert_column","insert_columns","insert_columns_generic_uninitialized","insert_fixed_columns","insert_fixed_rows","insert_row","insert_rows","insert_rows_generic_uninitialized","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned","into_owned_sum","into_slice","into_slice","into_slice_mut","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_contiguous","is_empty","is_empty","is_identity","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_orthogonal","is_special_orthogonal","is_special_orthogonal","is_square","is_zero","isometry_to","iter","iter","iter_mut","ith","ith","ith_axis","ith_axis","kronecker","lanes","le","len","len","lerp","lerp","lerp","lerp","ln","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","lower_triangle","lp_norm","lt","lu","magnitude","magnitude_squared","map","map_diagonal","map_diagonal","map_with_location","max","max_value","max_value","mean","mean_of","metric_distance","metric_distance","metric_distance","metric_distance","metric_distance","min","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_to","ncols","neg","neg","neg","neg_mut","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_and_get","new_eps","new_nonuniform_scaling","new_nonuniform_scaling","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_nonuniform_scaling_wrt_point","new_normalize","new_observer_frame","new_observer_frame","new_observer_frames","new_orthographic","new_orthographic","new_perspective","new_perspective","new_rotation","new_rotation","new_rotation","new_rotation","new_rotation_wrt_point","new_rotation_wrt_point","new_scaling","new_scaling","new_translation","new_translation","new_unchecked","new_unchecked","new_unchecked","new_with_strides_unchecked","new_with_strides_unchecked","nlerp","nlerp","norm","norm","norm","norm","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize_mut","nrows","one","orthonormal_subspace_basis","orthonormal_subspace_basis","orthonormalize","orthonormalize","partial_cmp","perp","polar","pow","pow_mut","powf","powf","prepend_nonuniform_scaling","prepend_nonuniform_scaling","prepend_nonuniform_scaling_mut","prepend_nonuniform_scaling_mut","prepend_scaling","prepend_scaling","prepend_scaling_mut","prepend_scaling_mut","prepend_translation","prepend_translation","prepend_translation_mut","prepend_translation_mut","product","product","product","pseudo_inverse","ptr","ptr","ptr","ptr","ptr","ptr_mut","ptr_mut","ptr_mut","ptr_mut","push","push","qr","quadform","quadform","quadform_tr","quadform_tr","quadform_tr_with_workspace","quadform_tr_with_workspace","quadform_with_workspace","quadform_with_workspace","quaternion","rank","relative_eq","relative_eq","relative_eq","remove_column","remove_columns","remove_columns_at","remove_columns_generic","remove_fixed_columns","remove_fixed_rows","remove_row","remove_rows","remove_rows_at","remove_rows_generic","renormalize","renormalize_fast","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat","repeat_generic","repeat_generic","replace","replace_unchecked","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","reshape_generic","resize","resize","resize_generic","resize_horizontally","resize_horizontally_mut","resize_horizontally_mut","resize_mut","resize_mut","resize_vertically","resize_vertically_mut","resize_vertically_mut","rotation","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","row","row_iter","row_iter_mut","row_mean","row_mean_tr","row_mut","row_part","row_part_mut","row_product","row_product_tr","row_sum","row_sum_tr","row_variance","row_variance_tr","rows","rows_generic","rows_generic_mut","rows_generic_with_step","rows_generic_with_step_mut","rows_mut","rows_range","rows_range_mut","rows_range_pair","rows_range_pair_mut","rows_with_step","rows_with_step_mut","scale","scale_mut","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","schur","sclerp","select","select_columns","select_rows","set_column","set_diagonal","set_magnitude","set_partial_diagonal","set_row","shape","shape","shape","shape","shape","shape","shape_generic","simd_cap_magnitude","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_normalize","simd_try_normalize_mut","sin_angle","singular_values","singular_values_unordered","size","slerp","slerp","slerp","slerp","slerp","slice","slice_mut","slice_range","slice_range_mut","slice_with_steps","slice_with_steps_mut","solve_lower_triangular","solve_lower_triangular","solve_lower_triangular_mut","solve_lower_triangular_mut","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked","solve_lower_triangular_unchecked_mut","solve_lower_triangular_unchecked_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_lower_triangular_with_diag_unchecked_mut","solve_upper_triangular","solve_upper_triangular","solve_upper_triangular_mut","solve_upper_triangular_mut","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked","solve_upper_triangular_unchecked_mut","solve_upper_triangular_unchecked_mut","splat","storage","strides","strides","strides","strides","strides","strides","sub","sub","sub","sub","sub_assign","sub_assign","sub_to","sum","sum","sum","sum","sum","sup","svd","svd_unordered","swap","swap_columns","swap_rows","swap_unchecked","sygemv","sygemv","syger","symmetric_eigen","symmetric_eigenvalues","symmetric_eigenvalues","symmetric_part","symmetric_part","symmetric_tridiagonalize","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","tr_copy_from","tr_dot","tr_mul","tr_mul_to","tr_solve_lower_triangular","tr_solve_lower_triangular","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_mut","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked","tr_solve_lower_triangular_unchecked_mut","tr_solve_lower_triangular_unchecked_mut","tr_solve_upper_triangular","tr_solve_upper_triangular","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_mut","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked","tr_solve_upper_triangular_unchecked_mut","tr_solve_upper_triangular_unchecked_mut","trace","trace","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","transpose","transpose_mut","transpose_to","try_cast","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_new","try_new_and_get","try_normalize","try_normalize_mut","try_polar","try_schur","try_sclerp","try_set_magnitude","try_slerp","try_slerp","try_svd","try_svd_unordered","try_symmetric_eigen","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","udu","ulps_eq","ulps_eq","uninit","uninit","uninit","unscale","unscale_mut","unscale_mut","unscale_mut","unwrap","upper_triangle","variance","vector_to_matrix_index","vget_unchecked","vget_unchecked","vget_unchecked_mut","vget_unchecked_mut","view","view_mut","view_range","view_range_mut","view_with_steps","view_with_steps_mut","w","w","w_axis","w_axis","x","x","x_axis","x_axis","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","y","y","y_axis","y_axis","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","z","z","z_axis","z_axis","zero","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros","zeros_generic","zeros_generic","zip_apply","zip_fold","zip_map","zip_zip_apply","zip_zip_map","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Allocator","Buffer","BufferUninit","Reallocator","SameShapeAllocator","SameShapeC","SameShapeR","SameShapeVectorAllocator","allocate_from_iterator","allocate_from_row_iterator","allocate_uninit","assume_init","reallocate_copy","AreMultipliable","DimEq","Representative","Representative","Representative","Representative","SameDimension","SameNumberOfColumns","SameNumberOfRows","ShapeConstraint","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","into","is_in_subset","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","IJKW","M2x2","M2x3","M2x4","M2x5","M2x6","M3x2","M3x3","M3x4","M3x5","M3x6","M4x2","M4x3","M4x4","M4x5","M4x6","M5x2","M5x3","M5x4","M5x5","M5x6","M6x2","M6x3","M6x4","M6x5","M6x6","X","XY","XYZ","XYZW","XYZWA","XYZWAB","a","a","b","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","i","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","j","k","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m11","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m12","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m13","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m14","m15","m15","m15","m15","m15","m15","m15","m15","m15","m15","m16","m16","m16","m16","m16","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m21","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m22","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m23","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m24","m25","m25","m25","m25","m25","m25","m25","m25","m25","m25","m26","m26","m26","m26","m26","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m31","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m32","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m33","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m34","m35","m35","m35","m35","m35","m35","m35","m35","m36","m36","m36","m36","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m41","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m42","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m43","m44","m44","m44","m44","m44","m44","m44","m44","m44","m45","m45","m45","m45","m45","m45","m46","m46","m46","m51","m51","m51","m51","m51","m51","m51","m51","m51","m51","m52","m52","m52","m52","m52","m52","m52","m52","m52","m52","m53","m53","m53","m53","m53","m53","m53","m53","m54","m54","m54","m54","m54","m54","m55","m55","m55","m55","m56","m56","m61","m61","m61","m61","m61","m62","m62","m62","m62","m62","m63","m63","m63","m63","m64","m64","m64","m65","m65","m66","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","w","w","w","w","x","x","x","x","x","x","y","y","y","y","y","z","z","z","z","DefaultAllocator","allocate_from_iterator","allocate_from_iterator","allocate_from_iterator","allocate_uninit","allocate_uninit","allocate_uninit","assume_init","assume_init","assume_init","borrow","borrow_mut","clone","clone_into","fmt","from","from_subset","into","is_in_subset","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","reallocate_copy","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","Const","Const","Dim","DimAdd","DimDiff","DimDiv","DimMax","DimMaximum","DimMin","DimMinimum","DimMul","DimName","DimNameAdd","DimNameDiff","DimNameDiv","DimNameMax","DimNameMaximum","DimNameMin","DimNameMinimum","DimNameMul","DimNameProd","DimNameQuot","DimNameSub","DimNameSum","DimProd","DimQuot","DimSub","DimSum","Dyn","Dynamic","IsDynamic","IsNotStaticOne","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","ToConst","ToTypenum","Typenum","U0","U0","U1","U1","U10","U10","U100","U100","U101","U101","U102","U102","U103","U103","U104","U104","U105","U105","U106","U106","U107","U107","U108","U108","U109","U109","U11","U11","U110","U110","U111","U111","U112","U112","U113","U113","U114","U114","U115","U115","U116","U116","U117","U117","U118","U118","U119","U119","U12","U12","U120","U120","U121","U121","U122","U122","U123","U123","U124","U124","U125","U125","U126","U126","U127","U127","U13","U13","U14","U14","U15","U15","U16","U16","U17","U17","U18","U18","U19","U19","U2","U2","U20","U20","U21","U21","U22","U22","U23","U23","U24","U24","U25","U25","U26","U26","U27","U27","U28","U28","U29","U29","U3","U3","U30","U30","U31","U31","U32","U32","U33","U33","U34","U34","U35","U35","U36","U36","U37","U37","U38","U38","U39","U39","U4","U4","U40","U40","U41","U41","U42","U42","U43","U43","U44","U44","U45","U45","U46","U46","U47","U47","U48","U48","U49","U49","U5","U5","U50","U50","U51","U51","U52","U52","U53","U53","U54","U54","U55","U55","U56","U56","U57","U57","U58","U58","U59","U59","U6","U6","U60","U60","U61","U61","U62","U62","U63","U63","U64","U64","U65","U65","U66","U66","U67","U67","U68","U68","U69","U69","U7","U7","U70","U70","U71","U71","U72","U72","U73","U73","U74","U74","U75","U75","U76","U76","U77","U77","U78","U78","U79","U79","U8","U8","U80","U80","U81","U81","U82","U82","U83","U83","U84","U84","U85","U85","U86","U86","U87","U87","U88","U88","U89","U89","U9","U9","U90","U90","U91","U91","U92","U92","U93","U93","U94","U94","U95","U95","U96","U96","U97","U97","U98","U98","U99","U99","USIZE","add","add","add","add","add","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dim","dim","div","div","div","div","div","div","eq","eq","fmt","fmt","from","from","from_subset","from_subset","from_usize","from_usize","from_usize","hash","into","into","is","is_in_subset","is_in_subset","max","max","max","max","max","max","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","name","name","new","sub","sub","sub","sub","sub","sub","sub","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","try_to_usize","try_to_usize","try_to_usize","type_id","type_id","value","value","value","MatrixIndex","MatrixIndexMut","Output","OutputMut","ColumnIter","ColumnIterMut","MatrixIter","MatrixIterMut","RowIter","RowIterMut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","count","count","count","count","count","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","len","len","len","len","len","len","new","new","next","next","next","next","next","next","next_back","next_back","next_back","next_back","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","CStride","CStride","IsContiguous","Output","Owned","OwnedUninit","RStride","RStride","RawStorage","RawStorageMut","ReshapableStorage","SameShapeStorage","Storage","StorageMut","as_mut_slice_unchecked","as_slice_unchecked","clone_owned","get_address_unchecked","get_address_unchecked_linear","get_address_unchecked_linear_mut","get_address_unchecked_mut","get_unchecked","get_unchecked_linear","get_unchecked_linear_mut","get_unchecked_mut","into_owned","is_contiguous","linear_index","ptr","ptr_mut","reshape_generic","shape","strides","swap_unchecked","swap_unchecked_linear","Init","InitStatus","Uninit","Value","assume_init_mut","assume_init_mut","assume_init_mut","assume_init_ref","assume_init_ref","assume_init_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","from","from","from_subset","from_subset","init","init","init","into","into","is_in_subset","is_in_subset","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","AbstractRotation","Affine2","Affine3","DualQuaternion","Isometry","Isometry2","Isometry3","IsometryMatrix2","IsometryMatrix3","OPoint","Orthographic3","Perspective3","Point","Point1","Point2","Point3","Point4","Point5","Point6","Projective2","Projective3","Quaternion","Reflection","Reflection1","Reflection2","Reflection3","Reflection4","Reflection5","Reflection6","Representative","Rotation","Rotation2","Rotation3","Scale","Scale1","Scale2","Scale3","Scale4","Scale5","Scale6","Similarity","Similarity2","Similarity3","SimilarityMatrix2","SimilarityMatrix3","SubTCategoryOf","SuperTCategoryOf","TAffine","TCategory","TCategoryMul","TGeneral","TProjective","Transform","Transform2","Transform3","Translation","Translation1","Translation2","Translation3","Translation4","Translation5","Translation6","UnitComplex","UnitDualQuaternion","UnitQuaternion","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","abs_diff_eq","acos","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","angle","angle","angle","angle","angle","angle","angle_to","angle_to","angle_to","angle_to","angle_to","angle_to","append_axisangle_linearized","append_rotation_mut","append_rotation_mut","append_rotation_wrt_center_mut","append_rotation_wrt_center_mut","append_rotation_wrt_point_mut","append_rotation_wrt_point_mut","append_scaling","append_scaling_mut","append_translation_mut","append_translation_mut","apply","as_matrix","as_matrix","as_mut","as_projective","as_projective","as_ref","as_vector","as_vector_mut","asin","asinh","aspect","atan","atanh","axis","axis","axis","axis","axis_angle","axis_angle","axis_angle","axis_angle","bias","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bottom","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","check_homogeneous_invariants","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_owned","clone_owned","complex","conjugate","conjugate","conjugate","conjugate","conjugate","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","conjugate_mut","coords","coords","cos","cos_angle","cosh","default","default","default","default","default","default","default","default","default","default","default","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_epsilon","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_relative","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","default_max_ulps","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","dual","dual_quaternion","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","euler_angles","euler_angles","euler_angles","exp","exp","exp_eps","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","face_towards","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fovy","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_angle","from_axis_angle","from_axis_angle","from_axis_angle","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_basis_unchecked","from_complex","from_complex_and_get","from_coordinates","from_cos_sin_unchecked","from_euler_angles","from_euler_angles","from_euler_angles","from_fov","from_homogeneous","from_imag","from_isometry","from_isometry","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_eps","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_matrix_unchecked","from_parts","from_parts","from_parts","from_parts","from_polar_decomposition","from_quaternion","from_real","from_real","from_real_and_dual","from_rotation","from_rotation_matrix","from_rotation_matrix","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis","from_scaled_axis_eps","from_scaling","from_slice","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_vector","from_vector","ge","get_unchecked","get_unchecked_mut","gt","half","has_normalizer","has_normalizer","has_normalizer","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","identity","imag","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","inf","inf_sup","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_inner","into_inner","into_inner","into_owned","inv_mul","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_mut","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_point","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_unit_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_transform_vector","inverse_unchecked","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_pure","is_zero","is_zero","isometry","isometry_to","iter","iter_mut","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","le","left","left_div","len","lerp","lerp","lerp","lerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","lerp_slerp","ln","ln","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_lh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","look_at_rh","lt","magnitude","magnitude_squared","map","matrix","matrix","matrix_mut","matrix_mut","matrix_mut_unchecked","matrix_mut_unchecked","max_value","max_value","mean_of","min_value","min_value","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_containing_point","new_eps","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frame","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","new_observer_frames","nlerp","nlerp","norm","norm","norm","norm_squared","norm_squared","norm_squared","normalize","normalize","normalize_mut","normalize_mut","one","one","one","one","one","one","one","one","one","one","one","origin","outer","partial_cmp","polar_decomposition","powf","powf","powf","powf","powf","powf","powf","prepend_scaling","prepend_scaling_mut","project","project_point","project_point","project_vector","project_vector","pseudo_inverse","pure","quaternion","real","reflect","reflect_rows","reflect_rows_with_sign","reflect_with_sign","reject","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","relative_eq","renormalize","renormalize","renormalize","renormalize","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","right","right_div","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between","rotation_between_axis","rotation_between_axis","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_to","rotation_wrt_point","rotation_wrt_point","scalar","scale_mut","scale_mut","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_axis","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between","scaled_rotation_between_axis","scaled_rotation_between_axis","scaling","sclerp","select","select","select","select","select","select","select","select","select","select","set_aspect","set_bottom","set_bottom_and_top","set_category","set_fovy","set_left","set_left_and_right","set_right","set_scaling","set_top","set_zfar","set_zfar","set_znear","set_znear","set_znear_and_zfar","set_znear_and_zfar","simd_clamp","simd_eq","simd_ge","simd_gt","simd_horizontal_max","simd_horizontal_min","simd_le","simd_lt","simd_max","simd_min","simd_ne","simd_try_inverse","sin","sin_angle","sinh","slerp","slerp","slerp","slerp","slerp","slerp","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sqrt","squared","stride","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sup","swap_unchecked","tan","tanh","to_euler_angles","to_euler_angles","to_euler_angles","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_homogeneous","to_isometry","to_matrix","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_projective","to_projective","to_rotation_matrix","to_rotation_matrix","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","top","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_point","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","transform_vector","translation","translation","translation","translation","translation","translation","translation","translation","translation","translation","transpose","transpose_mut","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_inverse_mut","try_inverse_transform_point","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_lerp_slerp","try_sclerp","try_slerp","try_slerp","try_slerp","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","ulps_eq","unproject_point","unproject_point","unscale_mut","unscale_mut","unwrap","unwrap","unwrap","unwrap","vector","vector","vector","vector_mut","xx","xx","xxx","xxx","xxy","xxy","xxz","xxz","xy","xy","xyx","xyx","xyy","xyy","xyz","xyz","xz","xz","xzx","xzx","xzy","xzy","xzz","xzz","yx","yx","yxx","yxx","yxy","yxy","yxz","yxz","yy","yy","yyx","yyx","yyy","yyy","yyz","yyz","yz","yz","yzx","yzx","yzy","yzy","yzz","yzz","zero","zero","zfar","zfar","znear","znear","zx","zx","zxx","zxx","zxy","zxy","zxz","zxz","zy","zy","zyx","zyx","zyy","zyy","zyz","zyz","zz","zz","zzx","zzx","zzy","zzy","zzz","zzz","Bidiagonal","Cholesky","ColPivQR","FullPivLU","Hessenberg","LU","PermutationSequence","QR","SVD","Schur","SymmetricEigen","SymmetricTridiagonal","UDU","append_permutation","balancing","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","complex_eigenvalues","d","d","d_matrix","determinant","determinant","determinant","determinant","determinant","diagonal","diagonal","eigenvalues","eigenvalues","eigenvectors","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","givens","h","householder","identity","identity","identity_generic","insert_column","into","into","into","into","into","into","into","into","into","into","into","into","into","inv_permute_columns","inv_permute_rows","inverse","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_invertible","is_invertible","is_invertible","is_invertible","is_upper_diagonal","l","l","l","l_dirty","l_unpack","len","ln_determinant","new","new","new","new","new","new","new","new","new","new","new","new","new_unchecked","new_unordered","new_with_substitute","new_with_workspace","off_diagonal","off_diagonal","p","p","p","pack_dirty","permute_columns","permute_rows","pseudo_inverse","q","q","q","q","q","q_tr_mul","q_tr_mul","r","r","rank","rank_one_update","recompose","recompose","recompose","remove_column","singular_values","solve","solve","solve","solve","solve","solve","solve_mut","solve_mut","solve_mut","solve_mut","solve_mut","sort_by_singular_values","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_polar","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_inverse","try_inverse","try_inverse","try_inverse","try_inverse_to","try_invert_to","try_new","try_new","try_new","try_new_unordered","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u","u","u","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack","unpack_dirty","unpack_h","unpack_r","unpack_r","unpack_tridiagonal","v_t","v_t","wilkinson_shift","balance_parlett_reinsch","unbalance","GivensRotation","borrow","borrow_mut","c","cancel_x","cancel_y","clone","clone_into","fmt","from","from_subset","identity","into","inverse","is_in_subset","new","new_unchecked","rotate","rotate_rows","s","to_owned","to_subset","to_subset_unchecked","try_from","try_into","try_new","type_id"],"q":["nalgebranalgebra::basenalgebra::base::allocator","","","","","","","","","","","","","nalgebra::base::constraint","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::coordinates","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::default_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::dimensionnalgebra::base::indexing","","","","nalgebra::base::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::storage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::base::uninit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nalgebra::geometrynalgebra::linalgnalgebra::linalg::balancing","","nalgebra::linalg::givens","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>.","A complex number in Cartesian form.","Trait shared by all complex fields and its subfields (like …","The type of the elements of each lane of this SIMD value.","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD complex …","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","Base trait for every SIMD types.","The absolute value of <code>a</code>.","The absolute value of this complex number: …","","","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","Are all vector lanes true?","Lane-wise bitwise and of the vector elements.","Is any vector lane true?","The argument of this complex number.","","","","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of the inverse tangent of <code>self</code>…","","","Computes the principal value of inverse hyperbolic tangent …","[Reexported at the root of this crate.] Data structures …","A bit mask representing the boolean state of each lanes of …","","","","","","","The center of two points.","Returns a reference to the input value clamped to the …","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","Converts an object from one type to an equivalent or more …","Converts an object from one type to an equivalent or more …","Use with care! Same as <code>try_convert</code> but without any …","Use with care! Same as <code>try_convert</code> but without any …","Copies the sign of <code>sign</code> to <code>self</code>.","","Computes the cosine of <code>self</code>.","Cardinal cos","","Computes the hyperbolic cosine of <code>self</code>.","","","The distance between two points.","The squared distance between two points.","","","","","","","","","","","","","","","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","Extracts the i-th lane of <code>self</code>.","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Builds a pure-real complex number from the given value.","","Builds a pure-real complex number from the given value.","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","","[Reexported at the root of this crate.] Data structures …","","Computes (self.conjugate() * self + other.conjugate() * …","","Returns imaginary unit","Merges the value of <code>if_value()</code> and <code>else_value()</code> depending …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","Imaginary portion of the complex number","The imaginary part of this complex number.","","Returns the infimum of <code>a</code> and <code>b</code>.","Returns simultaneously the infimum and supremum of <code>a</code> and <code>b</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Indicates if <code>try_convert</code> will succeed without actually …","","","Checks if the given complex number is finite","","","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","Is the sign of this real number negative?","Is the sign of this real number positive?","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","The number of lanes of this SIMD value.","","[Reexported at the root of this crate.] Factorization of …","","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","Applies a function to each lane of <code>self</code>.","Same as <code>cmp::max</code>.","","The largest finite positive value representable using this …","Same as <code>cmp::min</code>.","","The smallest finite positive value representable using …","The modulus of this complex number.","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","","","","","Create a new Complex","Are all vector lanes false?","","The sum of the absolute value of this complex number’s …","","Returns the square of the norm (since <code>T</code> doesn’t …","","Gets the multiplicative identity element.","","Lane-wise bitwise or of the vector elements.","Clamp <code>value</code> between <code>min</code> and <code>max</code>. Returns <code>None</code> if <code>value</code> is …","Compare <code>a</code> and <code>b</code> using a partial ordering relation.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt;= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &gt; b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt;= b</code>.","Returns <code>true</code> iff <code>a</code> and <code>b</code> are comparable and <code>a &lt; b</code>.","Return the maximum of <code>a</code> and <code>b</code> if they are comparable.","Return the minimum of <code>a</code> and <code>b</code> if they are comparable.","Sorts two values in increasing order using a partial …","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","The real part of this complex number.","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","Multiplies this complex number by <code>factor</code>.","","Multiplies <code>self</code> by the scalar <code>t</code>.","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","The exponential part of this complex number: …","The absolute value of this complex number: …","","","","","","","","","","","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","Computes the principal value of the inverse cosine of <code>self</code>.","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","Computes the principal value of inverse hyperbolic cosine …","The argument of this complex number.","","","","","","","","","","","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","Computes the principal value of the inverse sine of <code>self</code>.","","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of inverse hyperbolic sine of …","","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","Computes the principal value of the inverse tangent of <code>self</code>…","","Computes the principal value of the inverse tangent of <code>self</code>…","","","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","Computes the principal value of inverse hyperbolic tangent …","","Computes the principal value of inverse hyperbolic tangent …","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane of …","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Computes the cosine of <code>self</code>.","Cardinal cos","","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","Computes the hyperbolic cosine of <code>self</code>.","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>&gt;=</code> comparison.","Lanewise <em>greater than</em> <code>&gt;</code> comparison.","The max value among all lanes of <code>self</code>.","The min value among all lanes of <code>self</code>.","Computes the product of all the lanes of <code>self</code>.","","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","","The imaginary part of this complex number.","","","","","","","","","Lanewise <em>less or equal</em> <code>&lt;=</code> comparison.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","Computes the principal value of natural logarithm of <code>self</code>.","","","","","","","","","","","","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code>&lt;</code> comparison.","Lanewise max value.","Lanewise min value.","The modulus of this complex number.","","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","The sum of the absolute value of this complex number’s …","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a floating point power.","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","","The exponential part of this complex number: …","","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","Computes the sine of <code>self</code>.","Computes the sine of <code>self</code>.","","","","","","","","","","Cardinal sine","","","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","Computes the hyperbolic sine of <code>self</code>.","","","","","","","","","","","","","","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","Computes the principal value of the square root of <code>self</code>.","","Computes the principal value of the square root of <code>self</code>.","","Computes the tangent of <code>self</code>.","","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","","","Computes the sine of <code>self</code>.","","","Cardinal sine","","Computes the hyperbolic sine of <code>self</code>.","","","","Initializes an SIMD value with each lanes set to <code>val</code>.","","","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","Returns the supremum of <code>a</code> and <code>b</code>.","","Computes the tangent of <code>self</code>.","","Computes the hyperbolic tangent of <code>self</code>.","The exponential form of this complex number: (modulus, …","","","","","","","","","","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","Attempts to convert an object to a more specific one.","Attempts to convert an object to a more specific one.","","","","","","","Divides this complex number by <code>factor</code>.","","Divides <code>self</code> by the scalar <code>t</code>.","","Wraps <code>val</code> into the range <code>[min, max]</code> using modular …","Lane-wise bitwise xor of the vector elements.","Gets the additive identity element.","","Applies a function to each lane of <code>self</code> paired with the …","A array-based statically sized matrix data storage.","A dynamically sized column-major matrix.","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix slice dynamic numbers of rows and …","A column-major matrix view dynamic numbers of rows and …","A column-major matrix view dynamic numbers of rows and …","A dynamically sized column vector.","A column vector slice dynamic numbers of rows and columns.","A column vector slice dynamic numbers of rows and columns.","A column vector view dynamic numbers of rows and columns.","A column vector view dynamic numbers of rows and columns.","A range with a size that may be known at compile-time.","Euclidean norm.","Lp norm.","The most generic column-major matrix (and vector) type.","A stack-allocated, column-major, 1x1 square matrix.","A stack-allocated, column-major, 1x2 matrix.","A stack-allocated, column-major, 1x3 matrix.","A stack-allocated, column-major, 1x4 matrix.","A stack-allocated, column-major, 1x5 matrix.","A stack-allocated, column-major, 1x6 matrix.","A heap-allocated, row-major, matrix with 1 rows and a …","A stack-allocated, column-major, 2x2 square matrix.","A stack-allocated, column-major, 2x1 matrix.","A stack-allocated, column-major, 2x3 matrix.","A stack-allocated, column-major, 2x4 matrix.","A stack-allocated, column-major, 2x5 matrix.","A stack-allocated, column-major, 2x6 matrix.","A heap-allocated, row-major, matrix with 2 rows and a …","A stack-allocated, column-major, 3x3 square matrix.","A stack-allocated, column-major, 3x1 matrix.","A stack-allocated, column-major, 3x2 matrix.","A stack-allocated, column-major, 3x4 matrix.","A stack-allocated, column-major, 3x5 matrix.","A stack-allocated, column-major, 3x6 matrix.","A heap-allocated, row-major, matrix with 3 rows and a …","A stack-allocated, column-major, 4x4 square matrix.","A stack-allocated, column-major, 4x1 matrix.","A stack-allocated, column-major, 4x2 matrix.","A stack-allocated, column-major, 4x3 matrix.","A stack-allocated, column-major, 4x5 matrix.","A stack-allocated, column-major, 4x6 matrix.","A heap-allocated, row-major, matrix with 4 rows and a …","A stack-allocated, column-major, 5x5 square matrix.","A stack-allocated, column-major, 5x1 matrix.","A stack-allocated, column-major, 5x2 matrix.","A stack-allocated, column-major, 5x3 matrix.","A stack-allocated, column-major, 5x4 matrix.","A stack-allocated, column-major, 5x6 matrix.","A heap-allocated, row-major, matrix with 5 rows and a …","A stack-allocated, column-major, 6x6 square matrix.","A stack-allocated, column-major, 6x1 matrix.","A stack-allocated, column-major, 6x2 matrix.","A stack-allocated, column-major, 6x3 matrix.","A stack-allocated, column-major, 6x4 matrix.","A stack-allocated, column-major, 6x5 matrix.","A heap-allocated, row-major, matrix with 6 rows and a …","The type of the result of a matrix cross product.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned matrix column-major matrix with <code>D</code> columns.","A matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A mutable matrix slice.","A column-major 1x1 matrix slice.","A column-major 1x2 matrix slice.","A column-major 1x3 matrix slice.","A column-major 1x4 matrix slice.","A column-major 1x5 matrix slice.","A column-major 1x6 matrix slice.","A column-major matrix slice with 1 row and a number of …","A column-major 2x2 matrix slice.","A column-major 2x1 matrix slice.","A column-major 2x3 matrix slice.","A column-major 2x4 matrix slice.","A column-major 2x5 matrix slice.","A column-major 2x6 matrix slice.","A column-major matrix slice with 2 rows and a number of …","A column-major 3x3 matrix slice.","A column-major 3x1 matrix slice.","A column-major 3x2 matrix slice.","A column-major 3x4 matrix slice.","A column-major 3x5 matrix slice.","A column-major 3x6 matrix slice.","A column-major matrix slice with 3 rows and a number of …","A column-major 4x4 matrix slice.","A column-major 4x1 matrix slice.","A column-major 4x2 matrix slice.","A column-major 4x3 matrix slice.","A column-major 4x5 matrix slice.","A column-major 4x6 matrix slice.","A column-major matrix slice with 4 rows and a number of …","A column-major 5x5 matrix slice.","A column-major 5x1 matrix slice.","A column-major 5x2 matrix slice.","A column-major 5x3 matrix slice.","A column-major 5x4 matrix slice.","A column-major 5x6 matrix slice.","A column-major matrix slice with 5 rows and a number of …","A column-major 6x6 matrix slice.","A column-major 6x1 matrix slice.","A column-major 6x2 matrix slice.","A column-major 6x3 matrix slice.","A column-major 6x4 matrix slice.","A column-major 6x5 matrix slice.","A column-major matrix slice with 6 rows and a number of …","A column-major matrix slice with <code>R</code> rows and <code>C</code> columns.","A column-major matrix slice with <code>D</code> rows and columns.","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","A column-major matrix slice with a number of rows chosen …","The type of the result of a matrix sum.","Renamed to <code>VecStorage</code>.","A matrix view.","A column-major 1x1 matrix view.","A column-major 1x2 matrix view.","A column-major 1x3 matrix view.","A column-major 1x4 matrix view.","A column-major 1x5 matrix view.","A column-major 1x6 matrix view.","A column-major matrix view with 1 row and a number of …","A column-major 2x2 matrix view.","A column-major 2x1 matrix view.","A column-major 2x3 matrix view.","A column-major 2x4 matrix view.","A column-major 2x5 matrix view.","A column-major 2x6 matrix view.","A column-major matrix view with 2 rows and a number of …","A column-major 3x3 matrix view.","A column-major 3x1 matrix view.","A column-major 3x2 matrix view.","A column-major 3x4 matrix view.","A column-major 3x5 matrix view.","A column-major 3x6 matrix view.","A column-major matrix view with 3 rows and a number of …","A column-major 4x4 matrix view.","A column-major 4x1 matrix view.","A column-major 4x2 matrix view.","A column-major 4x3 matrix view.","A column-major 4x5 matrix view.","A column-major 4x6 matrix view.","A column-major matrix view with 4 rows and a number of …","A column-major 5x5 matrix view.","A column-major 5x1 matrix view.","A column-major 5x2 matrix view.","A column-major 5x3 matrix view.","A column-major 5x4 matrix view.","A column-major 5x6 matrix view.","A column-major matrix view with 5 rows and a number of …","A column-major 6x6 matrix view.","A column-major 6x1 matrix view.","A column-major 6x2 matrix view.","A column-major 6x3 matrix view.","A column-major 6x4 matrix view.","A column-major 6x5 matrix view.","A column-major matrix view with 6 rows and a number of …","A mutable matrix view.","A column-major 1x1 matrix view.","A column-major 1x2 matrix view.","A column-major 1x3 matrix view.","A column-major 1x4 matrix view.","A column-major 1x5 matrix view.","A column-major 1x6 matrix view.","A column-major matrix view with 1 row and a number of …","A column-major 2x2 matrix view.","A column-major 2x1 matrix view.","A column-major 2x3 matrix view.","A column-major 2x4 matrix view.","A column-major 2x5 matrix view.","A column-major 2x6 matrix view.","A column-major matrix view with 2 rows and a number of …","A column-major 3x3 matrix view.","A column-major 3x1 matrix view.","A column-major 3x2 matrix view.","A column-major 3x4 matrix view.","A column-major 3x5 matrix view.","A column-major 3x6 matrix view.","A column-major matrix view with 3 rows and a number of …","A column-major 4x4 matrix view.","A column-major 4x1 matrix view.","A column-major 4x2 matrix view.","A column-major 4x3 matrix view.","A column-major 4x5 matrix view.","A column-major 4x6 matrix view.","A column-major matrix view with 4 rows and a number of …","A column-major 5x5 matrix view.","A column-major 5x1 matrix view.","A column-major 5x2 matrix view.","A column-major 5x3 matrix view.","A column-major 5x4 matrix view.","A column-major 5x6 matrix view.","A column-major matrix view with 5 rows and a number of …","A column-major 6x6 matrix view.","A column-major 6x1 matrix view.","A column-major 6x2 matrix view.","A column-major 6x3 matrix view.","A column-major 6x4 matrix view.","A column-major 6x5 matrix view.","A column-major matrix view with 6 rows and a number of …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A column-major matrix view with a number of rows chosen at …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A heap-allocated, column-major, matrix with a dynamic …","A trait for abstract matrix norms.","The type of the norm.","Trait implemented by entities scan be be normalized and …","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","An owned D-dimensional column vector.","A dynamically sized row vector.","An owned D-dimensional row vector.","A statically sized D-dimensional row vector.","A matrix with one row and <code>D</code> columns .","A stack-allocated, 1-dimensional row vector.","A stack-allocated, 2-dimensional row vector.","A stack-allocated, 3-dimensional row vector.","A stack-allocated, 4-dimensional row vector.","A stack-allocated, 5-dimensional row vector.","A stack-allocated, 6-dimensional row vector.","A statically sized column-major matrix with <code>R</code> rows and <code>C</code> …","A column-major matrix slice with dimensions known at …","A column-major matrix slice with dimensions known at …","A column-major matrix view with dimensions known at …","A column-major matrix view with dimensions known at …","A statically sized D-dimensional column vector.","A column vector slice with dimensions known at …","A column vector slice with dimensions known at …","A column vector view with dimensions known at compile-time.","A column vector view with dimensions known at compile-time.","The basic scalar type for all structures of <code>nalgebra</code>.","Type of the range size. May be a type-level integer.","A range with a size that may be known at compile-time.","A matrix data storage for a matrix view. Only contains an …","A mutable matrix data storage for mutable matrix view. …","A square matrix.","L-infinite norm aka. Chebytchev norm aka. uniform norm …","An owned matrix with uninitialized data.","An owned matrix with uninitialized data.","A wrapper that ensures the underlying algebraic entity has …","A stack-allocated, 1-dimensional unit vector.","A stack-allocated, 2-dimensional unit vector.","A stack-allocated, 3-dimensional unit vector.","A stack-allocated, 4-dimensional unit vector.","A stack-allocated, 5-dimensional unit vector.","A stack-allocated, 6-dimensional unit vector.","A Vec-based matrix data storage. It may be …","A matrix with one column and <code>D</code> rows.","A stack-allocated, 1-dimensional column vector.","A stack-allocated, 2-dimensional column vector.","A stack-allocated, 3-dimensional column vector.","A stack-allocated, 4-dimensional column vector.","A stack-allocated, 5-dimensional column vector.","A stack-allocated, 6-dimensional column vector.","An owned matrix column-major matrix with <code>R</code> rows and <code>C</code> …","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","A column vector slice with dimensions known at …","A 1D column vector slice.","A 2D column vector slice.","A 3D column vector slice.","A 4D column vector slice.","A 5D column vector slice.","A 6D column vector slice.","The type of the result of a matrix sum.","A column vector view with dimensions known at compile-time.","A 1D column vector view.","A 2D column vector view.","A 3D column vector view.","A 4D column vector view.","A 5D column vector view.","A 6D column vector view.","A column vector view with dimensions known at compile-time.","A 1D column vector view.","A 2D column vector view.","A 3D column vector view.","A 4D column vector view.","A 5D column vector view.","A 6D column vector view.","A matrix data storage for a matrix view. Only contains an …","A mutable matrix data storage for mutable matrix view. …","The column vector with a 1 as its fifth component, and …","The column vector with a 1 as its fifth component, and …","The unit column vector with a 1 as its fifth component, …","The unit column vector with a 1 as its fifth component, …","Computes the component-wise absolute value.","","","Equivalent to <code>self.adjoint() * rhs</code>.","Equivalent to <code>self.adjoint() * rhs</code> but stores the result …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","Solves the linear system <code>self.adjoint() . x = b</code> where <code>x</code> is …","","","","","","","Adds a scalar to <code>self</code>.","Adds a scalar to <code>self</code> in-place.","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …","The adjoint (aka. conjugate-transpose) of <code>self</code>.","Sets <code>self</code> to its adjoint (aka. conjugate-transpose).","Takes the adjoint (aka. conjugate-transpose) of <code>self</code> and …","Abstract definition of a matrix data storage allocator.","Returns the absolute value of the component with the …","Returns the absolute value of the component with the …","The smallest angle between two vectors.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by an …","Computes the transformation equal to <code>self</code> followed by an …","Computes in-place the transformation equal to <code>self</code> …","Computes in-place the transformation equal to <code>self</code> …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Computes the transformation equal to <code>self</code> followed by a …","Applies a closure <code>f</code> to modify each component of <code>self</code>.","Returns <code>self</code> with each of its components replaced by the …","Uses the metric induced by the given <code>norm</code> to compute the …","Uses the given <code>norm</code> to compute the norm of <code>self</code>.","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","Computes the index and value of the vector component with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a mutable pointer to the start of the matrix.","Converts this array storage to a mutable slice.","Extracts a mutable slice containing the entire matrix …","A mutable slice containing all the components stored in …","","","","","Returns a mutable reference to the underlying value. This …","Returns a pointer to the start of the matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this array storage to a slice.","Extracts a slice containing the entire matrix entries …","A slice containing all the components stored in this …","","","","","","The underlying data storage.","The underlying mutable data storage.","Returns this matrix as a view.","Returns this matrix as a mutable view.","Assumes a matrix’s entries to be initialized. This …","Assumes a matrix’s entries to be initialized. This …","Computes <code>self = a * x * c + b * self</code>.","Computes <code>self = a * x * c + b * self</code>.","The rotation axis of this unit quaternion or <code>None</code> if the …","The rotation axis and angle in (0, pi] of this unit …","The rotation axis and angle in (0, pi] of this complex …","Computes <code>self = a * x + b * self</code>.","Computes <code>self = a * x + b * self</code>.","The column vector with a 1 as its sixth component, and …","The column vector with a 1 as its sixth component, and …","The unit column vector with a 1 as its sixth component, …","The unit column vector with a 1 as its sixth component, …","The start index of the range.","Computes the bidiagonalization using householder …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the the 1-norm of the complex component with the …","Returns the the 1-norm of the complex component with the …","Returns a new vector with the same magnitude as <code>self</code> …","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Computes componentwise …","Attempts to compute the Cholesky decomposition of this …","","","","","","","","","","","","","","","","","","Clones this matrix to one that owns its data.","","","","","Clones this matrix into one that owns its data. The actual …","Computes componentwise …","Computes the QR decomposition (with column pivoting) of …","Returns a view containing the i-th column of this matrix.","Iterate through the columns of this matrix.","Mutably iterates through this matrix columns.","The mean of all the columns of this matrix.","Returns a view containing the i-th column of this matrix.","Returns a view containing the <code>n</code> first elements of the i-th …","Returns a view containing the <code>n</code> first elements of the i-th …","The product of all the columns of this matrix.","The sum of all the columns of this matrix.","The variance of all the columns of this matrix.","Extracts from this matrix a set of consecutive columns.","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns. The number of …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix <code>ncols</code> columns skipping <code>step</code> …","Extracts from this matrix a set of consecutive columns.","View containing all the columns indexed by the range <code>rows</code>.","Mutable view containing all the columns indexed by the …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive columns …","Extracts from this matrix a set of consecutive columns …","The underlying complex number.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","Componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Inplace componentwise matrix or vector division.","Componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Inplace componentwise matrix or vector multiplication.","Returns a column vector resulting from the folding of <code>f</code> on …","Returns a row vector where each element is the result of …","Returns a column vector where each element is the result …","The conjugate of <code>self</code>.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","Compute the conjugate of this unit quaternion.","The conjugate of the complex matrix <code>self</code> computed in-place.","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex number.","Sets <code>self</code> to its adjoint.","The conjugate transposition of <code>self</code>.","Takes the conjugate and transposes <code>self</code> and store the …","Compatibility constraints between matrix shapes, e.g., for …","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Returns the convolution of the target vector and a kernel.","Structures to which matrices and vector can be …","Fills this matrix with the content of another one. Both …","Fills this matrix with the content of a slice. Both must …","The cosine of the rotation angle.","The 3D cross product between two vectors.","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","Computes the matrix <code>M</code> such that for all vector <code>v</code> we have …","The data storage that contains all the matrix components. …","","","The default matrix data storage allocator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the matrix determinant.","Computes the matrix determinant.","The diagonal of this matrix.","The diagonal of this matrix.","Traits and tags for identifying the dimension of all …","","","","","","","","","","The dot product between two vectors or matrices (seen as …","The conjugate-linear dot product between two vectors or …","The underlying dual quaternion.","Computes the eigenvalues of this matrix.","Computes the eigenvalues of this matrix.","The index immediately after the last index inside of the …","","Tests whether <code>self</code> and <code>rhs</code> are exactly equal.","","","","Retrieves the euler angles corresponding to this unit …","Compute the exponential of a quaternion.","Extends the number of columns of a <code>Matrix</code> with <code>Vector</code>s …","Extend the number of columns of the <code>Matrix</code> with elements …","Extend the number of rows of a <code>Vector</code> with elements from …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of columns of the <code>VecStorage</code> with …","Extends the number of rows of the <code>VecStorage</code> with elements …","","","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Sets all the elements of this matrix to <code>val</code>.","Sets all the elements of the selected column to <code>val</code>.","Sets all the diagonal elements of this matrix to <code>val</code>.","Sets all the elements of the lower-triangular part of this …","Copies the upper-triangle of this matrix to its …","Sets all the elements of the selected row to <code>val</code>.","Sets all the elements of the lower-triangular part of this …","Copies the upper-triangle of this matrix to its …","Sets all the elements of this matrix to the value returned …","Fills <code>self</code> with the identity matrix.","Extracts a compile-time number of consecutive columns from …","Extracts a compile-time number of consecutive columns from …","Extracts from this matrix a compile-time number of columns …","Extracts from this matrix a compile-time number of columns …","Resizes this matrix so that it contains <code>R2::value()</code> rows …","Extracts a compile-time number of consecutive rows from …","Extracts a compile-time number of consecutive rows from …","Extracts from this matrix a compile-time number of rows …","Extracts from this matrix a compile-time number of rows …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","Returns a view of this matrix starting at its component …","Returns a view of this matrix starting at its component …","","","","","","","","","","","","","","","","","","Folds a function <code>f</code> on each entry of <code>self</code>.","Similar to <code>self.iter().fold(init, f)</code> except that <code>init</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Builds the unit complex number corresponding to the …","Creates a new statically-allocated matrix from the given …","Creates a new statically-allocated matrix from the given …","Builds a 3D homogeneous rotation matrix from an axis and a …","Builds a 3D homogeneous rotation matrix from an axis and a …","Creates a new quaternion from a unit vector (the rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its columns.","Builds a new matrix from its columns.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Builds the unit complex number from the sinus and cosinus …","Creates a new matrix with the given data.","Creates a new matrix with the given data without …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a square matrix with its diagonal set to <code>diag</code> and …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a matrix filled with its diagonal filled with <code>elt</code> …","Creates a new matrix with its diagonal filled with copies …","Creates a new matrix with its diagonal filled with copies …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","Creates a new rotation from Euler angles.","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix or vector filled with the results of a …","Creates a matrix filled with the results of a function …","Creates a matrix filled with the results of a function …","Constructs a vector from coordinates in projective space, …","Constructs a vector from coordinates in projective space, …","Return a unit dual quaternion representing the translation …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Builds an unit complex by extracting the rotation part of …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds an unit quaternion by extracting the rotation part …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Creates a new matrix that may be rectangular. The first …","Return a dual quaternion representing the translation and …","Creates a new unit quaternion from a quaternion.","Create a new matrix view without bounds checking and from …","Create a new matrix view without bounds checking and from …","Wraps the given reference, assuming it is already …","Creates a dual quaternion from a unit quaternion rotation.","Builds the unit complex number from the corresponding 2D …","Builds an unit quaternion from a rotation matrix.","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix or vector with all its elements filled by …","Creates a matrix with all its elements filled by an …","Creates a matrix with all its elements filled by an …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Creates a matrix with its elements filled with the …","Builds a new matrix from its rows.","Builds a new matrix from its rows.","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Creates a new unit quaternion rotation from a rotation …","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new mutable matrix view from the given data …","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new matrix view from the given data array.","Creates a new mutable matrix view from the given data …","Creates a new matrix view from the given data array.","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates, without bound-checking, a matrix view from an …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound-checking, a matrix view from an …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new matrix view from …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a new matrix view with the specified strides from …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates a matrix view from an array and with dimensions …","Creates a mutable matrix view from an array and with …","Creates, without bounds checking, a matrix view from an …","Creates, without bound-checking, a mutable matrix view …","Creates, without bound-checking, a mutable matrix view …","Creates, without bounds checking, a matrix view from an …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates a new mutable matrix view with the specified …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new mutable matrix view …","Creates, without bound checking, a new matrix view with …","Creates, without bound checking, a new matrix view with …","","","","","","","","","","","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a matrix backed by a given <code>Vec</code>.","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Creates a new heap-allocated matrix from the given …","Computes the LU decomposition with full pivoting of <code>matrix</code>.","","Computes <code>self = alpha * a * b + beta * self</code>, where …","Computes <code>self = alpha * a.adjoint() * b + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * b + beta * self</code>, …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.adjoint() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Computes <code>self = alpha * a.transpose() * x + beta * self</code>, …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a slice that may or may not have a fixed size and …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Creates a matrix view that may or may not have a fixed …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>.","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>.","Produces a view of the data at the given index, or <code>None</code> if …","Produces a mutable view of the data at the given index, or …","Produces a view of the data at the given index, without …","Returns a mutable view of the data at the given index, …","","","","","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is an …","Computes <code>self = alpha * x * y.adjoint() + beta * self</code>, …","The hermitian part of <code>self</code>, i.e., …","The hermitian part of <code>self</code>, i.e., …","Computes the Hessenberg decomposition of this matrix using …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the matrix component with the …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","Creates an identity matrix. If the matrix is not square, …","The unit dual quaternion multiplicative identity, which …","The unit complex number multiplicative identity.","The rotation identity.","Creates a new identity matrix.","Creates a new identity matrix.","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","Computes the index of the vector component with the …","","Produces a view of the data at the given index, or panics …","","Produces a mutable view of the data at the given index, or …","","","Indexing","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two matrices/vectors.","Inserts a column filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> columns starting at the <code>i-th</code> place …","Inserts <code>D</code> columns filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>D::dim()</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts a row filled with <code>val</code> at the <code>i-th</code> position.","Inserts <code>n</code> rows filled with <code>val</code> starting at the <code>i-th</code> …","Inserts <code>ninsert.value()</code> rows at the <code>i-th</code> place of this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the underlying value.","","","","Moves this matrix into one that owns its data.","","","","","Moves this matrix into one that owns its data. The actual …","Extracts the original slice from this storage.","Extracts the original slice from this storage.","Extracts the original slice from this storage","Inverts this complex number if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts this quaternion if it is not zero.","Inverts in-place this unit complex number.","Inverts this dual quaternion in place if it is not zero.","Inverts this quaternion if it is not zero.","Rotate and translate a point by the inverse of this unit …","Rotate a point by the inverse of this unit quaternion. …","Rotate the given point by the inverse of this unit complex …","Rotate a unit vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","","","","","","Returns true if the matrix contains no elements.","Returns true if the underlying vector contains no elements.","Indicated if this is the identity matrix within a relative …","","","","","","","","","","","Returns <code>true</code> if this matrix is invertible.","Returns <code>true</code> if this matrix is invertible.","Checks that <code>Mᵀ × M = Id</code>.","Checks that this matrix is orthogonal and has a …","Checks that this matrix is orthogonal and has a …","Indicates if this is a square matrix.","","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Matrix iterators.","Iterates through this matrix coordinates in column-major …","Mutably iterates through this matrix coordinates.","The column vector with <code>val</code> as its i-th component.","The column vector with <code>val</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th component.","The column unit vector with <code>T::one()</code> as its i-th component.","The kronecker product of two matrices (aka. tensor product …","","","The total number of elements of this matrix.","The number of elements on the underlying vector.","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …","Returns <code>self * (1.0 - t) + rhs * t</code>, i.e., the linear blend …","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Extracts the lower triangular part of this matrix …","The Lp norm of this matrix.","","Computes the LU decomposition with partial (row) pivoting …","A synonym for the norm of this matrix.","A synonym for the squared norm of this matrix.","Returns a matrix containing the result of <code>f</code> applied to …","Apply the given function to this matrix’s diagonal and …","Apply the given function to this matrix’s diagonal and …","Returns a matrix containing the result of <code>f</code> applied to …","Returns the component with the largest value.","","","The mean of all the elements of this matrix.","Create the mean unit quaternion from a data structure …","Use the metric induced by this norm to compute the metric …","Compute the distance between <code>self</code> and <code>rhs</code> using the metric …","","","","Returns the component with the smallest value.","","","","","","","","","","","","","","","","","","","","","","Equivalent to <code>self * rhs</code> but stores the result into <code>out</code> to …","The number of columns of this matrix.","","","","Negates <code>self</code> in-place.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Initializes this matrix from its components.","Builds the unit complex number corresponding to the …","Creates a new unit quaternion rotation from a rotation …","Creates a new dynamic matrix data storage from the given …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Creates a new unit quaternion rotation from a rotation …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a distinct …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Creates a new homogeneous matrix that applies a scaling …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Deprecated: Use <code>Matrix4::face_towards</code> instead.","Deprecated: Use <code>Matrix4::face_towards</code> instead.","Deprecated: Use <code>UnitQuaternion::face_towards</code> instead.","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for an orthographic …","Creates a new homogeneous matrix for a perspective …","Creates a new homogeneous matrix for a perspective …","Builds a 2 dimensional homogeneous rotation matrix from an …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 2 dimensional homogeneous rotation matrix from an …","Builds a 3D homogeneous rotation matrix from an axis and …","Builds a 3D homogeneous rotation matrix from an axis and …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies the same …","Creates a new homogeneous matrix that applies a pure …","Creates a new homogeneous matrix that applies a pure …","Create a new matrix view without bounds checking.","Create a new matrix view without bounds checking.","Wraps the given value, assuming it is already normalized.","Create a new matrix view without bounds checking.","Create a new matrix view without bounds checking.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","Apply this norm to the given matrix.","Computes the norm.","","The L2 norm of this matrix.","","","","Computes the squared norm.","","The squared L2 norm of this vector.","Returns a normalized version of this matrix.","Normalizes this matrix in-place and returns its norm.","The number of rows of this matrix.","","Applies the given closure to each element of the …","Applies the given closure to each element of the …","Orthonormalizes the given family of vectors. The largest …","Orthonormalizes the given family of vectors. The largest …","","The perpendicular product between two 2D column vectors, …","Computes the Polar Decomposition of  a <code>matrix</code> (indirectly …","Raise this matrix to an integral power <code>exp</code>.","Raises this matrix to an integral power <code>exp</code> in-place.","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Computes the transformation equal to a non-uniform scaling …","Computes the transformation equal to a non-uniform scaling …","Computes in-place the transformation equal to a …","Computes in-place the transformation equal to a …","Computes the transformation equal to an uniform scaling …","Computes the transformation equal to an uniform scaling …","Computes in-place the transformation equal to an uniform …","Computes in-place the transformation equal to an uniform …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","Computes the transformation equal to a translation …","","","The product of all the elements of this matrix.","Computes the pseudo-inverse of this matrix.","","","","","","","","","","Constructs a new vector of higher dimension by appending …","Constructs a new vector of higher dimension by appending …","Computes the QR decomposition of this matrix.","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","Computes the quadratic form …","The underlying quaternion.","Computes the rank of this matrix.","","Tests whether <code>self</code> and <code>rhs</code> are equal up to a given epsilon.","","Removes the <code>i</code>-th column from this matrix.","Removes <code>n</code> consecutive columns from this matrix, starting …","Removes all columns in <code>indices</code>   ","Removes <code>nremove.value()</code> columns from this matrix, starting …","Removes <code>D::dim()</code> consecutive columns from this matrix, …","Removes <code>D::dim()</code> consecutive rows from this matrix, …","Removes the <code>i</code>-th row from this matrix.","Removes <code>n</code> consecutive rows from this matrix, starting with …","Removes all rows in <code>indices</code>   ","Removes <code>nremove.value()</code> rows from this matrix, starting …","Normalizes this vector again. This is useful when repeated …","Normalizes this vector again using a first-order Taylor …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix or vector with all its elements set to …","Creates a matrix with all its elements set to <code>elem</code>.","Creates a matrix with all its elements set to <code>elem</code>.","","","","Reshapes <code>self</code> such that it has dimensions …","","","","","","","Resizes this matrix so that it contains <code>new_nrows</code> rows and …","Resizes the underlying mutable data storage and unwraps it.","Resizes <code>self</code> such that it has dimensions …","Resizes this matrix horizontally, i.e., so that it …","Changes the number of column of this matrix in-place.","Changes the number of column of this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix in-place.","Resizes this matrix vertically, i.e., so that it contains …","Changes the number of rows of this matrix in-place.","Changes the number of rows of this matrix in-place.","Return the rotation part of this unit dual quaternion.","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex number needed to make <code>self</code> and <code>other</code> …","The unit quaternion needed to make <code>self</code> and <code>other</code> coincide.","Returns a view containing the i-th row of this matrix.","Iterate through the rows of this matrix.","Mutably iterates through this matrix rows.","The mean of all the rows of this matrix.","The mean of all the rows of this matrix. The result is …","Returns a view containing the i-th row of this matrix.","Returns a view containing the <code>n</code> first elements of the i-th …","Returns a view containing the <code>n</code> first elements of the i-th …","The product of all the rows of this matrix.","The product of all the rows of this matrix. The result is …","The sum of all the rows of this matrix.","The sum of all the rows of this matrix. The result is …","The variance of all the rows of this matrix.","The variance of all the rows of this matrix. The result is …","Extracts from this matrix a set of consecutive rows.","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix <code>nrows</code> rows regularly skipping …","Extracts from this matrix a set of consecutive rows.","View containing all the rows indexed by the range <code>rows</code>.","Mutable view containing all the rows indexed by the range …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Splits this <code>NxM</code> matrix into two parts delimited by two …","Extracts from this matrix a set of consecutive rows …","Extracts from this matrix a set of consecutive rows …","Multiplies each component of the complex matrix <code>self</code> by …","Multiply <code>self</code> by n.","","Multiplies each component of the complex matrix <code>self</code> by …","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","Computes the Schur decomposition of a square matrix.","Screw linear interpolation between two unit quaternions. …","","Creates a new matrix by extracting the given set of …","Creates a new matrix by extracting the given set of rows …","Fills the selected column of this matrix with the content …","Fills the diagonal of this matrix with the content of the …","Sets the magnitude of this vector.","Fills the diagonal of this matrix with the content of the …","Fills the selected row of this matrix with the content of …","","The shape of this matrix returned as the tuple (number of …","","","","","The shape of this matrix wrapped into their representative …","Returns a new vector with the same magnitude as <code>self</code> …","","","","","","","","","","","","Attempts to normalize <code>self</code>.","Normalizes this matrix in-place and return its norm.","The sine of the rotation angle.","Computes the singular values of this matrix. The singular …","Computes the singular values of this matrix. The singular …","The number of elements of the range, i.e., …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two rotations …","Computes the spherical linear interpolation between two …","Spherical linear interpolation between two unit …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices this matrix starting at its component <code>(irow, icol)</code> …","Slices a sub-matrix containing the rows indexed by the …","Slices a mutable sub-matrix containing the rows indexed by …","Slices this matrix starting at its component …","Slices this matrix starting at its component …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Computes the solution of the linear system <code>self . x = b</code> …","Computes the solution of the linear system <code>self . x = b</code> …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","Solves the linear system <code>self . x = b</code> where <code>x</code> is the …","","Abstract definition of a matrix data storage.","","The strides (row stride, column stride) of this matrix.","","","","","","","","","","","Equivalent to <code>self + rhs</code> but stores the result into <code>out</code> to …","","Example","","Example","The sum of all the elements of this matrix.","Computes the supremum (aka. componentwise max) of two …","Computes the Singular Value Decomposition using implicit …","Computes the Singular Value Decomposition using implicit …","Swaps two entries.","Swaps two columns in-place.","Swaps two rows in-place.","Swaps two entries without bound-checking.","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * a * x + beta * self</code>, where <code>a</code> is a …","Computes <code>self = alpha * x * y.transpose() + beta * self</code>, …","Computes the eigendecomposition of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","Computes the eigenvalues of this symmetric matrix.","The symmetric part of <code>self</code>, i.e., …","The symmetric part of <code>self</code>, i.e., …","Computes the tridiagonalization of this symmetric matrix.","Converts this unit quaternion into its equivalent Euler …","Computes the coordinates in projective space of this …","Yields the homogeneous matrix for this matrix, i.e., …","Computes the coordinates in projective space of this …","Converts this unit dual quaternion interpreted as an …","Converts this unit quaternion into its equivalent …","Converts this unit complex number into its equivalent …","Builds an isometry from this unit dual quaternion.","","","","","","","","","Builds the rotation matrix corresponding to this unit …","Builds a rotation matrix from this unit quaternion.","","","","","","","","","","","","","","","","","","","","","","Fills this matrix with the content of the transpose …","The dot product between the transpose of <code>self</code> and <code>rhs</code>.","Equivalent to <code>self.transpose() * rhs</code>.","Equivalent to <code>self.transpose() * rhs</code> but stores the result …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes the solution of the linear system …","Computes the solution of the linear system …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Solves the linear system <code>self.transpose() . x = b</code> where <code>x</code> …","Computes a trace of a square matrix, i.e., the sum of its …","Computes a trace of a square matrix, i.e., the sum of its …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Transforms the given point, assuming the matrix <code>self</code> uses …","Rotate and translate a point by this unit dual quaternion …","Rotate a point by this unit quaternion.","Rotate the given point by this unit complex number.","Transforms the given vector, assuming the matrix <code>self</code> uses …","Transforms the given vector, assuming the matrix <code>self</code> uses …","Rotate a vector by this unit dual quaternion, ignoring the …","Rotate the given vector by this unit complex number.","Rotate a vector by this unit quaternion.","Return the translation part of this unit dual quaternion.","Transposes <code>self</code>.","Transposes the square matrix <code>self</code> in-place.","Transposes <code>self</code> and store the result into <code>out</code>.","Attempts to cast the components of <code>self</code> to another type.","","","","","","","","","","","","","","","","","","","Attempts to invert this square matrix.","Attempts to invert this square matrix.","Attempts to invert this square matrix in-place. Returns …","Attempts to invert this square matrix in-place. Returns …","Attempts to normalize the given vector and return it …","Normalize the given vector and return it wrapped on a <code>Unit</code> …","Returns a normalized version of this matrix unless its …","Normalizes this matrix in-place or does nothing if its …","Attempts to compute the Polar Decomposition of  a <code>matrix</code> …","Attempts to compute the Schur decomposition of a square …","Computes the screw-linear interpolation between two unit …","Sets the magnitude of this vector unless it is smaller …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Attempts to compute the Singular Value Decomposition of …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","","","","","","","","","","Attempts to compute the UDU decomposition of this matrix.","","","Mechanisms for working with values that may not be …","Builds a matrix with uninitialized elements of type …","Builds a matrix with uninitialized elements of type …","Divides each component of the complex matrix <code>self</code> by the …","Divides <code>self</code> by n.","","Divides each component of the complex matrix <code>self</code> by the …","Retrieves the underlying value. Deprecated: use …","Extracts the upper triangular part of this matrix …","The variance of all the elements of this matrix.","Computes the row and column coordinates of the i-th …","Gets a reference to the i-th element of this column vector …","Gets a reference to the i-th element of this column vector …","Gets a mutable reference to the i-th element of this …","Gets a mutable reference to the i-th element of this …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","Returns a view containing the rows indexed by the range …","Return a mutable view containing the rows indexed by the …","Return a view of this matrix starting at its component …","Return a view of this matrix starting at its component …","The column vector with a 1 as its fourth component, and …","The column vector with a 1 as its fourth component, and …","The unit column vector with a 1 as its fourth component, …","The unit column vector with a 1 as its fourth component, …","The column vector with a 1 as its first component, and …","The column vector with a 1 as its first component, and …","The unit column vector with a 1 as its first component, …","The unit column vector with a 1 as its first component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its second component, and …","The column vector with a 1 as its second component, and …","The unit column vector with a 1 as its second component, …","The unit column vector with a 1 as its second component, …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","The column vector with a 1 as its third component, and …","The column vector with a 1 as its third component, and …","The unit column vector with a 1 as its third component, …","The unit column vector with a 1 as its third component, …","","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix or vector with all its elements set to <code>0</code>.","Creates a matrix with all its elements set to 0.","Creates a matrix with all its elements set to 0.","Replaces each component of <code>self</code> by the result of a closure …","Folds a function <code>f</code> on each pairs of entries from <code>self</code> and …","Returns a matrix containing the result of <code>f</code> applied to …","Replaces each component of <code>self</code> by the result of a closure …","Returns a matrix containing the result of <code>f</code> applied to …","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","Builds a new vector from components of <code>self</code>.","A matrix allocator of a memory buffer that may contain …","The type of buffer this allocator can instanciate.","The type of buffer with uninitialized components this …","A matrix reallocator. Changes the size of the memory …","Restricts the given number of rows and columns to be …","The number of columns of the result of a componentwise …","The number of rows of the result of a componentwise …","Restricts the given number of rows to be equal.","Allocates a buffer initialized with the content of the …","Allocates a buffer initialized with the content of the …","Allocates a buffer with the given number of rows and …","Assumes a data buffer to be initialized.","Reallocates a buffer of shape <code>(RTo, CTo)</code>, possibly reusing …","Constraints <code>C1</code> and <code>R2</code> to be equivalent.","Constraints <code>D1</code> and <code>D2</code> to be equivalent.","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","This is either equal to <code>D1</code> or <code>D2</code>, always choosing the one …","Constraints D1 and D2 to be equivalent, where they both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","Constraints <code>D1</code> and <code>D2</code> to be equivalent. They are both …","A type used in <code>where</code> clauses for enforcing constraints.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …","Data structure used to provide access to matrix and vector …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</coden allocator based on <code>ArrayStorage</code> and <code>VecStorage</code> for …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Trait implemented by any type that can be used as a …","","","","","","","","","Trait implemented exclusively by type-level integers.","","","","","","","","","","","","","","","","","Dim of dynamically-sized algebraic entities.","","Trait implemented by <code>Dyn</code>.","Trait implemented by <code>Dyn</code> and type-level integers different …","","","","","","","","","","","","","","","","","The constant dimension 0 .","","The constant dimension 1.","","The constant dimension 10 .","","The constant dimension 100 .","","The constant dimension 101 .","","The constant dimension 102 .","","The constant dimension 103 .","","The constant dimension 104 .","","The constant dimension 105 .","","The constant dimension 106 .","","The constant dimension 107 .","","The constant dimension 108 .","","The constant dimension 109 .","","The constant dimension 11 .","","The constant dimension 110 .","","The constant dimension 111 .","","The constant dimension 112 .","","The constant dimension 113 .","","The constant dimension 114 .","","The constant dimension 115 .","","The constant dimension 116 .","","The constant dimension 117 .","","The constant dimension 118 .","","The constant dimension 119 .","","The constant dimension 12 .","","The constant dimension 120 .","","The constant dimension 121 .","","The constant dimension 122 .","","The constant dimension 123 .","","The constant dimension 124 .","","The constant dimension 125 .","","The constant dimension 126 .","","The constant dimension 127 .","","The constant dimension 13 .","","The constant dimension 14 .","","The constant dimension 15 .","","The constant dimension 16 .","","The constant dimension 17 .","","The constant dimension 18 .","","The constant dimension 19 .","","The constant dimension 2 .","","The constant dimension 20 .","","The constant dimension 21 .","","The constant dimension 22 .","","The constant dimension 23 .","","The constant dimension 24 .","","The constant dimension 25 .","","The constant dimension 26 .","","The constant dimension 27 .","","The constant dimension 28 .","","The constant dimension 29 .","","The constant dimension 3 .","","The constant dimension 30 .","","The constant dimension 31 .","","The constant dimension 32 .","","The constant dimension 33 .","","The constant dimension 34 .","","The constant dimension 35 .","","The constant dimension 36 .","","The constant dimension 37 .","","The constant dimension 38 .","","The constant dimension 39 .","","The constant dimension 4 .","","The constant dimension 40 .","","The constant dimension 41 .","","The constant dimension 42 .","","The constant dimension 43 .","","The constant dimension 44 .","","The constant dimension 45 .","","The constant dimension 46 .","","The constant dimension 47 .","","The constant dimension 48 .","","The constant dimension 49 .","","The constant dimension 5 .","","The constant dimension 50 .","","The constant dimension 51 .","","The constant dimension 52 .","","The constant dimension 53 .","","The constant dimension 54 .","","The constant dimension 55 .","","The constant dimension 56 .","","The constant dimension 57 .","","The constant dimension 58 .","","The constant dimension 59 .","","The constant dimension 6 .","","The constant dimension 60 .","","The constant dimension 61 .","","The constant dimension 62 .","","The constant dimension 63 .","","The constant dimension 64 .","","The constant dimension 65 .","","The constant dimension 66 .","","The constant dimension 67 .","","The constant dimension 68 .","","The constant dimension 69 .","","The constant dimension 7 .","","The constant dimension 70 .","","The constant dimension 71 .","","The constant dimension 72 .","","The constant dimension 73 .","","The constant dimension 74 .","","The constant dimension 75 .","","The constant dimension 76 .","","The constant dimension 77 .","","The constant dimension 78 .","","The constant dimension 79 .","","The constant dimension 8 .","","The constant dimension 80 .","","The constant dimension 81 .","","The constant dimension 82 .","","The constant dimension 83 .","","The constant dimension 84 .","","The constant dimension 85 .","","The constant dimension 86 .","","The constant dimension 87 .","","The constant dimension 88 .","","The constant dimension 89 .","","The constant dimension 9 .","","The constant dimension 90 .","","The constant dimension 91 .","","The constant dimension 92 .","","The constant dimension 93 .","","The constant dimension 94 .","","The constant dimension 95 .","","The constant dimension 96 .","","The constant dimension 97 .","","The constant dimension 98 .","","The constant dimension 99 .","","","","","","","","","","","","","","","","","The value of this dimension.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Builds an instance of <code>Self</code> from a run-time value. Panics …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The name of this dimension, i.e., the singleton <code>Self</code>.","","A dynamic size equal to <code>value</code>.","","","","","","","","","","","","","","","","","","Gets the compile-time value of <code>Self</code>. Returns <code>None</code> if it is …","","","","","Gets the run-time value of <code>self</code>. For type-level integers, …","","","A helper trait used for indexing operations.","A helper trait used for indexing operations.","The output type returned by methods.","The output type returned by methods.","An iterator through the columns of a matrix.","An iterator through the mutable columns of a matrix.","An iterator through a dense matrix with arbitrary strides …","An iterator through a dense matrix with arbitrary strides …","An iterator through the rows of a matrix.","An iterator through the mutable rows of a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Creates a new iterator for the given matrix storage.","Creates a new iterator for the given matrix storage.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The column-stride of the owned data storage for a buffer …","The static stride of this storage’s columns.","Marker trait indicating that a storage is stored …","The reshaped storage type.","The owned data storage that can be allocated from <code>S</code>.","The owned data storage that can be allocated from <code>S</code>.","The row-stride of the owned data storage for a buffer of …","The static stride of this storage’s rows.","The trait shared by all matrix data storage.","Trait implemented by matrix data storage that can provide …","A matrix storage that can be reshaped in-place.","The data storage for the sum of two matrices with …","Trait shared by all matrix data storage that don’t …","Trait shared by all mutable matrix data storage that …","Retrieves the mutable data buffer as a contiguous slice.","Retrieves the data buffer as a contiguous slice.","Clones this data storage to one that does not contain any …","Gets the address of the i-th matrix component without …","Gets the address of the i-th matrix component without …","Gets the mutable address of the i-th matrix component …","Gets the mutable address of the i-th matrix component …","Retrieves a reference to the i-th element without …","Retrieves a reference to the i-th element without …","Retrieves a mutable reference to the i-th element without …","Retrieves a mutable reference to the element at …","Builds a matrix data storage that does not contain any …","Indicates whether this data buffer stores its elements …","Compute the index corresponding to the irow-th row and …","The matrix data pointer.","The matrix mutable data pointer.","Reshapes the storage into the output storage type.","The dimension of the matrix at run-time. Arr length of …","The spacing between consecutive row elements and …","Swaps two elements without bound-checking.","Swaps two elements using their linear index without …","A type implementing <code>InitStatus</code> indicating that the value …","This trait is used to write code that may work on matrices …","A type implementing <code>InitStatus</code> indicating that the value …","The type of the values with the initialization status …","Retrieve a mutable reference to the element, assuming that …","","","Retrieve a reference to the element, assuming that it is …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Initialize the given element.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Trait implemented by rotations that can be used inside of …","A 2D affine transformation. Stored as a homogeneous 3x3 …","A 3D affine transformation. Stored as a homogeneous 4x4 …","A dual quaternion.","A direct isometry, i.e., a rotation followed by a …","A 2-dimensional direct isometry using a unit complex …","A 3-dimensional direct isometry using a unit quaternion …","A 2-dimensional direct isometry using a rotation matrix …","A 3-dimensional direct isometry using a rotation matrix …","A point in an euclidean space.","A 3D orthographic projection stored as a homogeneous 4x4 …","A 3D perspective projection stored as a homogeneous 4x4 …","A point with <code>D</code> elements.","A statically sized 1-dimensional column point.","A statically sized 2-dimensional column point.","A statically sized 3-dimensional column point.","A statically sized 4-dimensional column point.","A statically sized 5-dimensional column point.","A statically sized 6-dimensional column point.","An invertible 2D general transformation. Stored as a …","An invertible 3D general transformation. Stored as a …","A quaternion. See the type alias …","A reflection wrt. a plane.","A 1-dimensional reflection.","A 2-dimensional reflection.","A 3-dimensional reflection.","A 4-dimensional reflection.","A 5-dimensional reflection.","A 6-dimensional reflection.","The transform category that results from the …","A rotation matrix.","A 2-dimensional rotation matrix.","A 3-dimensional rotation matrix.","A scale which supports non-uniform scaling.","A 1-dimensional scale.","A 2-dimensional scale.","A 3-dimensional scale.","A 4-dimensional scale.","A 5-dimensional scale.","A 6-dimensional scale.","A similarity, i.e., an uniform scaling, followed by a …","A 2-dimensional similarity.","A 3-dimensional similarity.","A 2-dimensional similarity using a rotation matrix for its …","A 3-dimensional similarity using a rotation matrix for its …","Indicates that <code>Self</code> is a more specific <code>Transform</code> category …","Indicates that <code>Self</code> is a more general <code>Transform</code> category …","Tag representing an affine <code>Transform</code>. Its bottom-row is …","Trait implemented by phantom types identifying the …","Traits that gives the <code>Transform</code> category that is …","Tag representing the most general (not necessarily …","Tag representing the most general inversible <code>Transform</code> …","A transformation matrix in homogeneous coordinates.","A 2D general transformation that may not be invertible. …","A 3D general transformation that may not be inversible. …","A translation.","A 1-dimensional translation.","A 2-dimensional translation.","A 3-dimensional translation.","A 4-dimensional translation.","A 5-dimensional translation.","A 6-dimensional translation.","A 2D rotation represented as a complex number with …","A unit dual quaternion. May be used to represent a …","A unit quaternions. May be used to represent a rotation.","","","","","","","","","","","","","Calculates the quaternionic arccosinus.","Calculates the hyperbolic quaternionic arccosinus.","","","","","","","","","","","","","","","","","","","The rotation angle.","The rotation angle in [0; pi].","The rotation angle in [0; pi] of this unit quaternion.","The rotation angle in <code>]-pi; pi]</code> of this unit complex …","The rotation angle in [0; pi].","The rotation angle.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","The rotation angle needed to make <code>self</code> and <code>other</code> coincide.","Appends to <code>self</code> a rotation given in the axis-angle form, …","Appends to <code>self</code> the given rotation in-place.","Appends to <code>self</code> the given rotation in-place.","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point …","Appends in-place to <code>self</code> a rotation centered at the point <code>p</code>…","Appends in-place to <code>self</code> a rotation centered at the point <code>p</code>…","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Appends to <code>self</code> the given translation in-place.","Appends to <code>self</code> the given translation in-place.","Replaces each component of <code>self</code> by the result of a closure …","A reference to the underlying homogeneous transformation …","A reference to the underlying homogeneous transformation …","","A reference to this transformation seen as a <code>Projective3</code>.","A reference to this transformation seen as a <code>Projective3</code>.","","Reinterprets this quaternion as a 4D vector.","Transforms this quaternion into its 4D vector form (Vector …","Calculates the quaternionic arcsinus.","Calculates the hyperbolic quaternionic arcsinus.","Gets the <code>width / height</code> aspect ratio of the view frustum.","Calculates the quaternionic arctangent.","Calculates the hyperbolic quaternionic arctangent.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis of this unit quaternion or <code>None</code> if the …","The reflection axis.","The rotation axis. Returns <code>None</code> if the rotation angle is …","The rotation axis and angle in (0, pi] of this rotation …","The rotation axis and angle in (0, pi] of this unit …","The rotation axis and angle in (0, pi] of this complex …","The rotation axis and angle in (0, pi] of this rotation …","The reflection bias.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The bottom offset of the view cuboid.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Cast the components of <code>self</code> to another type.","Checks that the given matrix is a valid homogeneous …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clones this transform into one that owns its data.","Clones this unit quaternion into one that owns its data.","The underlying complex number.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit quaternion.","Compute the conjugate of this unit complex number.","The conjugate of this quaternion.","The conjugate of this dual quaternion, containing the …","Compute the conjugate of this unit quaternion in-place.","Compute the conjugate of this unit quaternion in-place.","Compute in-place the conjugate of this unit complex number.","Replaces this quaternion by its conjugate.","Replaces this quaternion by its conjugate.","The coordinates of this point, i.e., the shift from the …","This quaternion as a 4D vector of coordinates in the …","Calculates the quaternionic cosinus.","The cosine of the rotation angle.","Calculates the hyperbolic quaternionic cosinushe dot product of two quaternions.","The dual component of the quaternion","The underlying dual quaternion.","","","","","","","","","","","","","","","","","","Euler angles corresponding to this rotation from a …","Retrieves the euler angles corresponding to this unit …","Euler angles corresponding to this rotation from a …","Compute the exponential of a quaternion.","Compute the exponential of a quaternion.","Compute the exponential of a quaternion. Returns the …","","","","","","","","","","","","","","","","","","","","","Creates a rotation that corresponds to the local frame of …","Creates an unit quaternion that corresponds to the local …","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates a rotation that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an isometry that corresponds to the local frame of …","Creates an similarity that corresponds to a scaling factor …","Creates an similarity that corresponds to a scaling factor …","","","","","","","","","","","","","","","","","","","","","","","","","Gets the y field of view of the view frustum.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Builds the unit complex number corresponding to the …","Builds a 3D rotation matrix from an axis and a rotation …","Creates a new quaternion from a unit vector (the rotation …","Builds a 3D rotation matrix from an axis and a rotation …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds an unit quaternion from a basis assumed to be …","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Builds a rotation from a basis assumed to be orthonormal.","Creates a new unit complex number from a complex number.","Creates a new unit complex number from a complex number.","Creates a new point with the given coordinates.","Builds the unit complex number from the sinus and cosinus …","Creates a new rotation from Euler angles.","Creates a new unit quaternion from Euler angles.","Creates a new rotation from Euler angles.","Creates a new orthographic projection matrix from an …","Creates a new point from its homogeneous vector …","Constructs a pure quaternion.","Return a unit dual quaternion representing the translation …","Creates a new similarity from its rotational and …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Builds an unit quaternion by extracting the rotation part …","Builds an unit complex by extracting the rotation part of …","Builds a rotation matrix by extracting the rotation part …","Builds a rotation matrix by extracting the rotation part …","Creates a new transformation from the given homogeneous …","Creates a new rotation from the given square matrix.","Wraps the given matrix to interpret it as a 3D …","Wraps the given matrix to interpret it as a 3D perspective …","Return a dual quaternion representing the translation and …","Creates a new quaternion from its scalar and vector parts. …","Creates a new isometry from its rotational and …","Creates a new similarity from its rotational and …","Creates a new quaternion from its polar decomposition.","Creates a new unit quaternion from a quaternion.","Constructs a real quaternion.","Creates a dual quaternion from only its real part, with no …","Creates a dual quaternion from its rotation and …","Creates a dual quaternion from a unit quaternion rotation.","Builds an unit quaternion from a rotation matrix.","Builds the unit complex number from the corresponding 2D …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Builds a unit complex rotation from an angle in radian …","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3D rotation matrix from an axis scaled by the …","Creates a new unit quaternion rotation from a rotation …","Creates a new similarity that applies only a scaling …","Creates a new point from a slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a quaternion from a 4D vector. The quaternion …","Creates a new translation from the given vector.","","Gets a reference to i-th element of this point without …","Gets a mutable reference to i-th element of this point …","","Divides quaternion into two.","Indicates whether a <code>Transform</code> with the category <code>Self</code> has a …","Indicates whether a <code>Transform</code> with the category <code>Self</code> has a …","","","","","","","","","","","","","The rotation identity.","","The rotation identity.","The unit dual quaternion multiplicative identity, which …","","The unit complex number multiplicative identity.","Creates a new identity transform.","Creates a new square identity rotation of the given …","","The quaternion multiplicative identity.","The dual quaternion multiplicative identity.","Creates a new identity translation.","Creates a new identity scale.","Creates a new identity isometry.","Creates a new identity similarity.","The imaginary part of this quaternion.","","","","","","","","","","Computes the infimum (aka. componentwise min) of two …","Computes the (infimum, supremum) of two points.","Calculates the inner product (also known as the dot …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Retrieves the underlying matrix.","Unwraps the underlying matrix.","Retrieves the underlying homogeneous matrix.","Retrieves the underlying homogeneous matrix.","Moves this unit quaternion into one that owns its data.","Computes <code>self.inverse() * rhs</code> in a more efficient way.","The rotation inverse.","","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","","Inverts this complex number if it is not zero.","Inverts this transformation. Use <code>.try_inverse</code> if this …","","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts <code>self</code>.","Inverts <code>self</code>.","Retrieves the inverse of the underlying homogeneous matrix.","Retrieves the inverse of the underlying homogeneous matrix.","Change <code>self</code> to its inverse.","Inverts this quaternion if it is not zero.","","Inverts this dual quaternion in place if it is not zero.","","Inverts in-place this unit complex number.","Inverts this transformation in-place. Use <code>.try_inverse_mut</code> …","Inverts <code>self</code> in-place.","","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Inverts <code>self</code> in-place.","Apply the inverse rotation to the given point.","","Rotate a point by the inverse of this unit quaternion. …","Rotate and translate a point by the inverse of this unit …","","Rotate the given point by the inverse of this unit complex …","Transform the given point by the inverse of this …","Rotate the given point by the inverse of this rotation. …","","Translate the given point by the inverse of this …","Transform the given point by the inverse of this isometry. …","Transform the given point by the inverse of this …","Apply the inverse rotation to the given unit vector.","Apply the inverse rotation to the given unit vector.","Rotate a vector by the inverse of this unit quaternion. …","Rotate a unit vector by the inverse of this unit …","Rotate the given vector by the inverse of this unit …","Rotate the given vector by the inverse of this rotation. …","","Transform the given unit vector by the inverse of this …","Apply the inverse rotation to the given vector.","","Rotate a vector by the inverse of this unit quaternion. …","Rotate a vector by the inverse of this unit quaternion, …","Rotate the given vector by the inverse of this unit …","","Transform the given vector by the inverse of this …","Rotate the given vector by the inverse of this rotation. …","","Transform the given vector by the inverse of this …","Transform the given vector by the inverse of this …","Inverts <code>self</code>.","Returns true if the point contains no elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check if the quaternion is pure.","","","The part of this similarity that does not include the …","The unit dual quaternion needed to make <code>self</code> and <code>other</code> …","Iterates through this point coordinates.","Mutably iterates through this point coordinates.","","","","","","","","","","","","The left offset of the view cuboid.","Left quaternionic division.","The dimension of this point.","Linear interpolation between two unit quaternions.","Linear interpolation between two unit dual quaternions.","Linear interpolation between two quaternion.","Linear interpolation between two dual quaternions.","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Interpolates between two isometries using a linear …","Compute the natural logarithm of a quaternion.","Compute the natural logarithm of a quaternion.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix without …","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix.","Builds a left-handed look-at view matrix including a …","Builds a left-handed look-at view matrix including a …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix without …","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix.","Builds a right-handed look-at view matrix including …","Builds a right-handed look-at view matrix including …","","A synonym for the norm of this quaternion.","A synonym for the squared norm of this quaternion.","Returns a point containing the result of <code>f</code> applied to each …","A reference to the underlying matrix.","A reference to the underlying matrix representation of …","A mutable reference to underlying matrix. Use …","A mutable reference to the underlying matrix …","A mutable reference to the underlying matrix.","A mutable reference to the underlying matrix …","","","Create the mean unit quaternion from a data structure …nitializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 2 dimensional rotation matrix from an angle in …","Builds a 3 dimensional rotation matrix from an axis and an …","Creates a new unit quaternion rotation from a rotation …","Builds the unit complex number corresponding to the …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new isometry from a translation and a rotation …","Creates a new reflection wrt. the plane orthogonal to the …","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Initializes this point from its components.","Builds a 3 dimensional rotation matrix from an axis and an …","Builds a 2 dimensional rotation matrix from an angle in …","Creates a new quaternion from its individual components. …","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this translation from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Initializes this Scale from its components.","Creates a new isometry from a translation and a rotation …","Creates a new isometry from a translation and a rotation …","Creates a new 2D isometry from a translation and a …","Creates a new 2D isometry from a translation and a …","Creates a new similarity from a translation and a rotation …","Creates a new similarity from a translation, a rotation, …","Creates a new similarity from a translation, rotation …","Creates a new similarity from a translation, rotation …","Creates a new orthographic projection matrix.","Creates a new perspective matrix from the aspect ratio, y …","Creates a new reflection wrt. the plane orthogonal to the …","Creates a new unit quaternion rotation from a rotation …","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Isometry::face_towards</code> instead.","Deprecated: Use <code>Rotation3::face_towards</code> instead.","Deprecated: Use <code>UnitQuaternion::face_towards</code> instead.","Deprecated: Use <code>Rotation3::face_towards</code> instead.","Deprecated: Use <code>SimilarityMatrix3::face_towards</code> instead.","Deprecated: Use <code>SimilarityMatrix3::face_towards</code> instead.","Normalized linear interpolation between two unit …","Normalized linear interpolation between two unit …","","The norm of this quaternion.","","The squared norm of this quaternion.","","","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","Normalizes this quaternion.","","","","Creates a new identity transform.","","","","","","Creates a new identity isometry.","Creates a new identity similarity.","Creates a new point with all coordinates equal to zero.","Calculates the outer product (also known as the wedge …","","The polar decomposition of this quaternion.","Raise the rotation to a given floating power, i.e., …","Raise the rotation to a given floating power, i.e., …","Raise the quaternion to a given floating power.","Raise this unit complex number to a given floating power.","Raise the rotation to a given floating power, i.e., …","Raise the rotation to a given floating power, i.e., …","Raise the quaternion to a given floating power.","The similarity transformation that applies a scaling …","Sets <code>self</code> to the similarity transformation that applies a …","Calculates the projection of <code>self</code> onto <code>other</code> (also known …","Projects a point. Faster than matrix multiplication.","Projects a point. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Projects a vector. Faster than matrix multiplication.","Inverts <code>self</code>.","Convert quaternion to pure quaternion.","The underlying quaternion.","The real component of the quaternion","Applies the reflection to the columns of <code>rhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the rows of <code>lhs</code>.","Applies the reflection to the columns of <code>rhs</code>.","Calculates the rejection of <code>self</code> from <code>other</code> (also known as …","","","","","","","","","","","","","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","Ensure this rotation is an orthonormal rotation matrix. …","","","","","","","","","","","","","","","","","","","","","The right offset of the view cuboid.","Right quaternionic division.","Return the rotation part of this unit dual quaternion.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","Creates a new isometry from the given rotation angle.","The pure rotational part of this isometry.","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The rotation matrix required to align <code>a</code> and <code>b</code> but with its …","The unit quaternion needed to make <code>a</code> and <code>b</code> be collinear …","The unit complex needed to make <code>a</code> and <code>b</code> be collinear and …","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The unit quaternion needed to make <code>self</code> and <code>other</code> coincide.","The unit complex number needed to make <code>self</code> and <code>other</code> …","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The rotation matrix needed to make <code>self</code> and <code>other</code> coincide.","The isometry that applies the rotation <code>r</code> with its axis …","The similarity that applies the scaling factor <code>scaling</code>, …","The scalar part <code>w</code> of this quaternion.","","","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The rotation axis of this unit quaternion multiplied by …","The rotation angle returned as a 1-dimensional vector.","The rotation angle returned as a 1-dimensional vector.","The rotation axis multiplied by the rotation angle.","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The smallest rotation needed to make <code>a</code> and <code>b</code> collinear and …","The scaling factor of this similarity transformation.","Screw linear interpolation between two unit quaternions. …","","","","","","","","","","","Updates this perspective matrix with a new <code>width / height</code> …","Sets the bottom offset of the view cuboid.","Sets the view cuboid offsets along the <code>y</code> axis.","Sets the category of this transform.","Updates this perspective with a new y field of view of the …","Sets the left offset of the view cuboid.","Sets the view cuboid offsets along the <code>x</code> axis.","Sets the right offset of the view cuboid.","The scaling factor of this similarity transformation.","Sets the top offset of the view cuboid.","Sets the far plane offset of the view cuboid.","Updates this perspective matrix with a new far plane …","Sets the near plane offset of the view cuboid.","Updates this perspective matrix with a new near plane …","Sets the near and far plane offsets of the view cuboid.","Updates this perspective matrix with new near and far …","","","","","","","","","","","","Attempt to inverse this quaternion.","Calculates the quaternionic sinus.","The sine of the rotation angle.","Calculates the hyperbolic quaternionic sinus.","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two unit …","Spherical linear interpolation between two rotations …","Spherical linear interpolation between two rotation …","Spherical linear interpolation between two rotation …","","","","","","","","","","","Calculates square root.","Calculates square of a quaternion.","The stride of this point. This is the number of buffer …","","","","","","","","","","","","","","","","","","","","","","","Computes the supremum (aka. componentwise max) of two …","Swaps two entries without bound-checking.","Calculates the quaternionic tangent.","Calculates the hyperbolic quaternionic tangent.","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent Euler …","Creates Euler angles from a rotation.","Converts this unit quaternion into its equivalent …","Converts this unit dual quaternion interpreted as an …","Converts this unit complex number into its equivalent …","Converts this transform into its equivalent homogeneous …","Converts this point into a vector in homogeneous …","Converts this rotation into its equivalent homogeneous …","Converts this translation into its equivalent homogeneous …","Converts this Scale into its equivalent homogeneous …","Converts this isometry into its equivalent homogeneous …","Converts this similarity into its equivalent homogeneous …","Computes the corresponding homogeneous matrix.","Computes the corresponding homogeneous matrix.","Builds an isometry from this unit dual quaternion.","Converts this isometry into its equivalent homogeneous …","","","","","","","","","","","","","","","This transformation seen as a <code>Projective3</code>.","This transformation seen as a <code>Projective3</code>.","Builds a rotation matrix from this unit quaternion.","Builds the rotation matrix corresponding to this unit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The top offset of the view cuboid.","Apply the rotation to the given point.","","Rotate a point by this unit quaternion.","Rotate and translate a point by this unit dual quaternion …","Rotate the given point by this unit complex number.","","Transform the given point by this transformation.","","Rotate the given point.","Translate the given point.","Translate the given point.","Transform the given point by this isometry.","Transform the given point by this similarity.","Apply the rotation to the given vector.","","Rotate a vector by this unit quaternion.","Rotate a vector by this unit dual quaternion, ignoring the …","Rotate the given vector by this unit complex number.","","Transform the given vector by this transformation, …","Rotate the given vector.","","Transform the given vector by this isometry, ignoring the …","Transform the given vector by this similarity, ignoring …","Return the translation part of this unit dual quaternion.","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","Creates a new isometry from the given translation …","The pure translational part of this isometry.","Transposes <code>self</code>.","Transposes <code>self</code> in-place.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to invert this transformation. You may use …","Inverts this quaternion if it is not zero.","Inverts this dual quaternion if it is not zero.","Inverts <code>self</code>.","Attempts to invert this transformation in-place. You may …","Inverts this quaternion in-place if it is not zero.","Inverts this dual quaternion in-place if it is not zero.","Inverts <code>self</code> in-place.","Translate the given point by the inverse of this Scale.","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Attempts to interpolate between two isometries using a …","Computes the screw-linear interpolation between two unit …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","Computes the spherical linear interpolation between two …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Un-projects a point. Faster than multiplication by the …","Un-projects a point. Faster than multiplication by the …","","","Retrieves the underlying matrix. Deprecated: Use …","Unwraps the underlying matrix. Deprecated: Use …","Retrieves the underlying homogeneous matrix. Deprecated: …","Retrieves the underlying homogeneous matrix. Deprecated: …","The vector part <code>(i, j, k)</code> of this quaternion.","The translation coordinates, i.e., how much is added to a …","The scale coordinates, i.e., how much is multiplied to a …","The mutable vector part <code>(i, j, k)</code> of this quaternion.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","","","The far plane offset of the view cuboid.","Gets the far plane offset of the view frustum.","The near plane offset of the view cuboid.","Gets the near plane offset of the view frustum.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","Builds a new point from components of <code>self</code>.","The bidiagonalization of a general matrix.","The Cholesky decomposition of a …","The QR decomposition (with column pivoting) of a general …","LU decomposition with full row and column pivoting.","Hessenberg decomposition of a general matrix.","LU decomposition with partial (row) pivoting.","A sequence of row or column permutations.","The QR decomposition of a general matrix.","Singular Value Decomposition of a general matrix.","Schur decomposition of a square matrix.","Eigendecomposition of a symmetric matrix.","Tridiagonalization of a symmetric matrix.","UDU factorization.","Adds the interchange of the row (or column) <code>i</code> with the row …","Functions for balancing a matrix.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the complex eigenvalues of the decomposed matrix.","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","The diagonal matrix resulting from the factorization","Returns the diagonal elements as a matrix","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","Computes the determinant of the decomposed matrix.","The determinant of the matrix corresponding to this …","The diagonal part of this decomposed matrix.","The diagonal components of this decomposition.","Computes the real eigenvalues of the decomposed matrix.","The unsorted eigenvalues of the decomposed matrix.","The eigenvectors of the decomposed matrix.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Construction of givens rotations.","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Construction of householder elementary reflections.","Creates a new dynamically-allocated sequence of <code>n</code> identity …","Creates a new statically-allocated sequence of <code>D</code> identity …","Creates a new sequence of D identity permutations.","Updates the decomposition such that we get the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Applies this sequence of permutations in reverse to the …","Applies this sequence of permutations in reverse to the …","Computes the inverse of the decomposed matrix.","Returns true if the permutation sequence contains no …","","","","","","","","","","","","","","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates if the decomposed matrix is invertible.","Indicates whether this decomposition contains an …","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The lower triangular matrix of this decomposition.","Retrieves the lower-triangular factor of the Cholesky …","The lower triangular matrix of this decomposition.","The number of non-identity permutations applied by this …","Computes the natural logarithm of determinant of the …","Computes the Bidiagonal decomposition using householder …","Attempts to compute the Cholesky decomposition of <code>matrix</code>.","Computes the <code>ColPivQR</code> decomposition using householder …","Computes the LU decomposition with full pivoting of <code>matrix</code>.","Computes the Hessenberg decomposition using householder …","Computes the LU decomposition with partial (row) pivoting …","Computes the QR decomposition using householder …","Computes the Schur decomposition of a square matrix.","Computes the Singular Value Decomposition of <code>matrix</code> using …","Computes the eigendecomposition of the given symmetric …","Computes the tridiagonalization of the symmetric matrix <code>m</code>.","Computes the UDU^T factorization.","Computes the Cholesky decomposition of <code>matrix</code> without …","Computes the Singular Value Decomposition of <code>matrix</code> using …","Attempts to approximate the Cholesky decomposition of …","Computes the Hessenberg decomposition using householder …","The off-diagonal part of this decomposed matrix.","The off-diagonal components of this decomposition.","Retrieves the column permutation of this decomposition.","The row permutations of this decomposition.","The row permutations of this decomposition.","Uses the given matrix as-is without any checks or …","Applies this sequence of permutations to the columns of <code>rhs</code>…","Applies this sequence of permutations to the rows of <code>rhs</code>.","Computes the pseudo-inverse of the decomposed matrix.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","The column permutations of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Computes the orthogonal matrix <code>Q</code> of this decomposition.","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Multiplies the provided matrix by the transpose of the <code>Q</code> …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Computes the rank of the decomposed matrix, i.e., the …","Given the Cholesky decomposition of a matrix <code>M</code>, a scalar …","Rebuild the original matrix.","Rebuild the original matrix.","Recomputes the original symmetric matrix.","Updates the decomposition such that we get the …","The singular values of this SVD.","Returns the solution of the system <code>self * x = b</code> where <code>self</code> …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the system <code>self * x = b</code> where <code>self</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Solves the linear system <code>self * x = b</code>, where <code>x</code> is the …","Sort the estimated components of the SVD by its singular …","","","","","","","","","","","","","","converts SVD results to Polar decomposition form of the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix.","Computes the inverse of the decomposed matrix and outputs …","Performs a LU decomposition to overwrite <code>out</code> with the …","Attempts to compute the Schur decomposition of a square …","Attempts to compute the Singular Value Decomposition of …","Computes the eigendecomposition of the given symmetric …","Attempts to compute the Singular Value Decomposition of …","","","","","","","","","","","","","","Computes the orthogonal matrix <code>U</code> of this <code>U * D * V</code> …","The upper triangular matrix of this decomposition.","The upper triangular matrix of this decomposition.","The left-singular vectors <code>U</code> of this SVD.","The upper triangular matrix resulting from the …","Unpacks this decomposition into its three matrix factors …","Retrieves the lower-triangular factor of the Cholesky …","Unpacks this decomposition into its two matrix factors.","The two matrices of this decomposition and the row and …","Retrieves <code>(q, h)</code> with <code>q</code> the orthogonal matrix of this …","The row permutations and two triangular matrices of this …","Unpacks this decomposition into its two matrix factors.","Retrieves the unitary matrix <code>Q</code> and the …","Retrieve the orthogonal transformation, diagonal, and off …","Retrieves the lower-triangular factor of the Cholesky …","Retrieves the upper trapezoidal submatrix <code>H</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieves the upper trapezoidal submatrix <code>R</code> of this …","Retrieve the diagonal, and off diagonal elements of this …","Computes the orthogonal matrix <code>V_t</code> of this <code>U * D * V_t</code> …","The right-singular vectors <code>V^t</code> of this SVD.","Computes the wilkinson shift, i.e., the 2x2 symmetric …","Applies in-place a modified Parlett and Reinsch matrix …","Computes in-place <code>D * m * D.inverse()</code>, where <code>D</code> is the …","A Givens rotation.","","","The cos part of this roration.","Computes the rotation <code>R</code> required such that the <code>x</code> component …","Computes the rotation <code>R</code> required such that the <code>y</code> component …","","","","Returns the argument unchanged.","","The Givents rotation that does nothing.","Calls <code>U::from(self)</code>.","The inverse of this givens rotation.","","Initializes a Givens rotation from its non-normalized …","Initializes a Givens rotation from its components.","Performs the multiplication <code>rhs = self * rhs</code> in-place.","Performs the multiplication <code>lhs = lhs * self</code> in-place.","The sin part of this roration.","","","","","","Initializes a Givens rotation form its non-normalized …",""],"i":[0,0,0,0,0,0,217,0,0,45,0,217,0,0,0,6,0,0,45,2,45,2,45,2,2,2,2,2,2,2,2,2,2,2,2,2,234,234,234,45,2,2,45,2,45,2,45,2,100,45,2,0,234,2,2,45,2,45,2,0,0,100,2,2,2,45,2,0,0,0,0,100,45,2,45,45,2,45,2,0,0,2,2,2,2,2,2,2,2,2,2,2,2,100,2,45,2,45,2,45,2,217,2,217,2,45,2,2,2,2,2,2,2,2,2,100,100,100,100,100,100,100,100,45,2,2,2,2,2,2,2,2,2,2,2,2,2,45,2,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,45,2,2,234,234,234,2,45,2,0,0,2,2,2,2,0,45,2,2,2,2,2,2,2,2,100,100,2,2,217,2,0,45,2,100,45,2,100,45,2,45,2,100,45,2,100,217,0,100,100,0,100,100,45,2,45,2,2,2,2,2,2,2,2,2,45,2,2,2,2,2,2,2,2,2,2,2,2,234,2,45,2,2,2,0,2,234,0,0,0,0,0,0,0,0,0,100,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,45,2,45,2,45,2,2,2,2,2,2,45,2,45,2,2,2,2,2,2,2,2,2,2,2,2,2,217,2,217,2,45,2,45,2,2,2,217,2,2,2,45,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,221,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,6,2,33,33,221,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,33,33,33,33,33,33,33,33,6,2,2,2,2,2,2,2,2,221,221,221,221,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,221,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,33,221,221,221,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,221,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,2,2,2,2,2,2,2,6,2,6,2,6,2,2,2,2,2,2,2,2,33,6,2,2,2,2,2,2,2,2,45,2,45,2,45,45,2,45,2,45,217,2,45,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,45,2,45,2,45,2,2,2,2,2,2,2,2,2,45,2,2,2,2,2,2,2,2,2,2,45,2,0,0,2,2,45,2,100,2,45,2,2,2,0,234,0,2,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,41,39,41,41,41,42,41,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,41,41,41,41,41,41,41,41,41,41,41,41,0,41,41,41,42,42,42,42,42,46,41,46,41,46,41,46,41,46,41,46,41,41,41,41,41,54,41,54,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,72,41,74,72,75,74,74,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,72,41,74,72,77,75,74,74,74,74,41,41,81,41,54,41,42,42,42,54,41,39,41,39,41,98,41,72,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,77,75,90,91,92,42,74,72,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,77,75,90,91,92,42,74,41,41,41,41,42,42,42,42,41,41,72,41,77,90,91,92,42,74,72,41,77,90,91,92,42,74,72,41,77,75,74,74,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,46,41,41,41,41,41,41,41,41,41,41,41,42,42,42,41,42,42,42,41,41,41,0,54,41,54,41,54,41,0,41,41,42,41,54,41,41,72,41,0,41,42,41,42,41,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,46,41,46,41,0,41,41,41,41,41,41,109,109,41,41,41,42,46,41,98,72,41,41,42,74,42,42,41,41,41,74,74,74,74,29,29,114,41,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,72,41,41,41,41,41,41,41,41,41,77,75,90,91,92,42,74,41,41,29,29,29,29,29,29,29,29,29,109,123,123,126,126,126,126,114,114,114,114,114,129,39,131,132,133,134,135,79,79,79,80,72,41,41,41,41,41,41,41,77,75,90,91,92,42,42,42,42,42,74,42,109,41,114,41,42,42,42,29,29,29,29,41,41,41,41,29,41,29,41,42,42,42,41,41,29,41,29,29,29,29,41,41,41,41,29,41,29,29,29,29,41,41,41,41,29,41,114,41,42,29,29,29,29,41,41,41,41,29,41,54,41,42,29,29,29,29,41,41,41,41,29,41,42,42,42,42,29,29,29,29,41,41,41,41,29,41,42,42,77,75,42,42,42,42,29,29,29,29,41,41,41,41,29,41,29,29,29,29,41,41,41,41,29,41,29,41,114,41,42,42,42,79,79,79,79,80,80,80,80,41,41,41,41,41,41,41,41,79,80,41,41,79,80,41,41,79,79,79,79,80,80,80,80,41,41,41,41,41,41,41,41,79,79,79,79,41,41,41,41,79,80,41,41,79,80,41,41,80,80,80,80,41,41,41,41,79,79,79,79,80,80,80,80,41,41,41,41,41,41,41,41,72,41,77,75,90,91,92,42,74,29,29,29,29,29,41,41,41,41,29,41,139,129,132,41,41,41,41,41,41,41,41,54,41,54,41,54,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,72,41,42,54,41,41,46,41,41,54,41,41,54,41,54,41,41,29,29,29,29,41,41,41,41,42,42,42,29,41,54,41,54,41,41,41,41,41,41,41,0,41,41,41,41,41,41,41,41,41,41,72,41,77,75,90,91,92,42,74,42,41,41,72,41,77,75,74,74,41,77,75,75,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,72,77,75,74,74,41,74,41,29,72,41,77,75,90,91,92,42,74,46,41,41,46,41,41,29,42,0,41,41,39,41,39,41,41,29,41,41,74,54,41,42,42,42,114,41,42,114,41,42,41,41,41,41,41,41,41,46,41,41,41,29,41,41,42,235,41,90,91,92,41,29,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,109,109,41,41,41,41,41,41,41,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,74,42,42,29,41,126,114,41,41,42,114,41,42,114,41,114,41,126,114,41,41,114,41,29,41,29,41,77,75,42,77,75,42,42,235,151,29,41,90,91,92,151,29,41,41,41,41,29,39,41,39,41,41,41,41,41,41,42,42,46,41,46,41,46,41,46,41,46,41,46,41,29,29,41,41,72,77,75,74,74,72,75,74,74,54,41,41,46,41,46,41,46,41,46,41,42,41,41,41,42,41,41,41,41,41,41,41,41,41,41,42,42,29,29,29,29,41,41,41,41,29,41,29,29,72,41,77,75,74,74,74,74,41,74,41,41,29,41,29,41,41,29,41,42,42,42,42,42,42,42,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,151,29,41,42,42,42,42,42,42,41,42,29,41,41,41,41,41,41,41,72,41,77,75,74,74,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,41,41,98,54,41,42,42,42,41,41,41,41,41,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,29,0,72,41,77,75,74,74,41,41,41,41,41,41,41,29,29,29,29,41,41,41,41,41,41,41,41,54,41,41,41,46,41,46,41,41,42,54,41,41,42,42,42,42,72,41,77,90,91,92,42,74,42,42,41,42,72,41,77,75,90,91,92,42,74,72,41,77,75,90,91,92,42,74,29,41,41,41,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,41,46,46,41,41,42,42,42,46,41,42,42,42,42,41,41,41,41,72,41,77,75,90,91,92,42,74,72,41,77,75,90,91,92,42,74,46,41,46,41,42,42,41,41,41,41,42,41,42,42,41,41,41,72,41,77,75,90,91,92,42,74,41,41,42,0,81,41,41,151,29,41,42,41,41,41,54,41,54,41,41,41,41,41,41,41,39,41,39,41,39,41,39,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,39,41,39,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,39,41,39,41,29,29,29,29,29,41,41,41,41,29,41,41,41,41,41,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,54,41,0,236,236,0,0,0,0,0,236,236,236,236,237,0,0,238,239,240,241,0,0,0,0,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,174,175,175,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,176,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,176,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,178,179,180,181,183,184,185,186,188,189,190,191,193,194,195,196,198,199,200,201,179,180,181,184,185,186,189,190,191,194,195,196,199,200,201,180,181,185,186,190,191,195,196,200,201,181,186,191,196,201,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,178,179,180,181,183,184,185,186,188,189,190,191,193,194,195,196,198,199,200,201,179,180,181,184,185,186,189,190,191,194,195,196,199,200,201,180,181,185,186,190,191,195,196,200,201,181,186,191,196,201,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,183,184,185,186,188,189,190,191,193,194,195,196,198,199,200,201,184,185,186,189,190,191,194,195,196,199,200,201,185,186,190,191,195,196,200,201,186,191,196,201,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,188,189,190,191,193,194,195,196,198,199,200,201,189,190,191,194,195,196,199,200,201,190,191,195,196,200,201,191,196,201,192,193,194,195,196,197,198,199,200,201,192,193,194,195,196,197,198,199,200,201,193,194,195,196,198,199,200,201,194,195,196,199,200,201,195,196,200,201,196,201,197,198,199,200,201,197,198,199,200,201,198,199,200,201,199,200,201,200,201,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,173,174,175,176,170,171,172,173,174,175,171,172,173,174,175,172,173,174,175,0,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,0,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,243,244,245,163,166,246,247,107,248,249,250,0,0,251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,136,243,76,76,40,40,40,76,40,76,40,76,40,76,40,53,40,246,247,76,40,40,40,76,40,76,40,76,40,76,40,30,76,40,40,76,40,30,76,40,249,250,76,40,40,40,107,248,76,40,40,40,244,245,76,40,40,40,53,40,76,163,166,76,76,40,40,40,76,40,76,40,76,40,76,40,76,40,30,76,40,76,40,30,76,40,0,0,252,253,0,0,0,0,0,0,146,147,154,155,96,97,146,147,154,155,96,97,154,96,154,96,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,146,147,154,155,96,97,146,147,96,97,146,147,154,155,96,97,154,96,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,146,147,154,155,96,97,0,47,0,254,0,0,0,47,0,0,0,0,0,0,48,47,44,47,47,48,48,47,47,48,48,44,47,47,47,48,254,47,47,48,48,0,0,0,255,255,203,204,255,203,204,203,204,203,204,203,204,203,204,203,204,203,204,203,204,203,204,255,203,204,203,204,203,204,203,204,203,204,203,204,203,204,203,204,203,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,87,85,119,130,108,49,86,120,122,117,121,49,49,130,130,130,130,49,49,49,49,86,86,86,86,130,130,49,49,86,86,124,125,84,85,108,108,124,125,84,85,108,108,84,117,121,117,121,117,121,121,121,117,121,130,128,127,86,128,127,86,49,49,49,49,127,49,49,125,84,210,108,125,84,85,108,210,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,128,84,87,85,211,137,212,213,130,108,49,86,120,122,117,117,117,117,121,121,121,121,206,214,215,216,119,130,108,49,86,120,122,117,121,214,215,216,128,127,119,130,108,49,86,120,122,117,121,214,215,216,128,127,119,49,85,84,87,85,49,86,84,87,85,49,86,130,49,49,85,49,84,87,85,119,130,108,49,86,120,117,121,84,87,85,119,130,108,49,86,120,122,117,121,84,87,85,119,130,108,49,86,120,122,117,121,84,87,85,119,130,108,49,86,120,122,117,121,130,130,130,130,130,130,49,120,120,120,120,120,120,122,122,122,122,122,122,130,130,130,130,130,130,49,120,120,120,120,120,120,122,122,122,122,122,122,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,85,85,85,85,85,85,85,85,138,138,138,138,137,137,137,137,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,130,130,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,49,49,86,86,86,86,86,86,120,120,120,120,120,120,120,120,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,84,84,84,84,87,87,87,87,87,87,87,87,85,85,85,85,119,119,119,119,119,119,119,119,119,119,130,108,108,108,108,49,86,86,86,120,120,117,117,117,117,117,117,117,117,121,121,121,121,121,121,121,121,121,121,49,86,87,84,87,85,119,130,108,49,86,120,122,117,121,214,215,216,128,127,125,84,108,84,49,49,5,84,85,119,108,49,120,122,117,121,5,84,85,119,108,49,120,122,117,121,125,84,137,213,108,117,117,121,121,84,87,85,119,130,130,108,108,49,49,86,120,120,122,122,117,117,121,121,214,215,216,128,127,127,5,5,5,5,5,124,125,84,84,84,84,84,87,85,85,85,85,85,137,119,210,130,130,108,108,108,108,108,49,49,49,49,49,49,49,86,120,120,120,120,120,120,120,120,122,122,122,122,122,122,122,122,117,117,117,117,117,117,117,117,117,121,121,121,121,121,214,215,216,128,127,85,125,84,108,124,125,84,85,108,108,85,85,130,85,125,84,108,128,130,49,87,121,124,125,84,85,108,108,124,125,84,85,108,108,119,108,128,127,87,49,117,121,49,84,49,86,86,87,84,85,124,125,84,85,108,108,84,121,130,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,124,125,125,84,84,84,84,84,84,84,87,87,87,87,87,85,85,85,85,85,85,138,137,119,119,130,130,108,108,108,108,108,49,86,120,120,120,120,120,122,122,122,117,117,117,117,121,121,121,49,120,130,130,130,130,49,206,206,216,119,130,108,49,120,122,117,121,214,215,216,207,84,84,87,85,85,119,108,108,49,86,120,122,117,121,49,119,130,108,49,86,119,130,49,86,130,130,49,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,119,108,128,127,49,117,207,84,84,87,85,85,119,108,108,120,117,121,128,127,207,84,84,87,85,85,119,108,108,120,117,121,207,84,84,87,85,85,119,108,108,120,117,121,207,207,84,87,85,108,108,117,207,84,84,87,85,85,119,108,108,117,121,122,130,124,125,125,84,84,84,84,84,84,84,87,87,87,87,87,85,85,85,85,85,85,138,137,119,119,119,210,130,130,130,108,108,108,108,108,108,49,49,86,86,120,120,120,120,120,120,122,122,122,122,117,117,117,117,117,121,121,121,121,214,215,216,128,127,49,49,86,121,87,130,130,5,84,85,119,108,49,120,122,117,121,130,128,49,130,84,87,49,86,211,137,212,213,117,117,117,117,84,49,125,84,137,213,108,117,117,121,121,125,84,137,213,108,117,117,121,121,130,49,49,130,119,108,119,108,119,108,130,130,84,130,130,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,138,138,138,138,137,137,137,137,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,130,130,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,49,49,49,49,49,49,86,86,86,86,86,86,86,86,86,86,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,122,122,122,122,122,122,122,122,122,122,122,122,122,122,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,84,84,84,84,87,87,87,87,87,87,87,87,85,85,85,85,119,119,119,119,119,119,119,119,119,119,119,119,119,119,130,108,108,108,108,49,49,49,86,86,86,86,86,120,120,122,122,122,117,117,117,117,117,117,117,117,117,117,121,121,121,121,121,121,121,121,121,121,121,121,87,87,130,130,49,49,86,86,223,144,113,224,225,226,124,125,84,85,211,137,212,213,210,130,130,130,130,130,130,108,108,49,120,120,120,120,120,120,122,122,122,122,122,122,117,117,117,117,121,121,121,121,128,127,210,84,137,213,117,117,125,84,108,121,121,84,87,49,49,86,49,49,86,49,86,49,86,84,87,85,119,108,49,86,120,122,117,121,130,49,130,49,124,125,84,85,108,108,49,121,121,49,128,127,128,127,122,49,84,86,210,210,210,210,49,84,87,85,119,130,108,49,86,120,122,117,121,124,125,108,108,5,84,85,119,108,49,120,122,117,121,5,84,85,119,108,49,120,122,117,121,128,49,87,211,137,212,213,117,117,117,117,117,124,125,84,85,108,108,84,85,124,125,84,85,108,108,117,121,49,49,86,124,125,84,85,108,108,124,125,84,85,108,108,84,85,121,87,5,84,85,119,108,49,120,122,117,121,127,128,128,119,127,128,128,128,121,128,128,127,128,127,128,127,130,130,130,130,130,130,130,130,130,130,130,49,49,85,49,124,125,84,85,108,108,5,84,85,119,108,49,120,122,117,121,49,49,130,130,130,130,130,130,130,130,130,49,49,49,49,86,86,86,86,130,130,49,49,86,86,130,130,49,49,125,84,108,84,87,85,119,130,108,120,122,117,121,128,127,87,117,119,130,108,49,86,120,122,117,121,214,215,216,128,127,128,127,84,85,130,108,49,120,122,117,121,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,124,125,125,84,84,84,84,84,84,84,87,87,87,87,87,85,85,85,85,85,85,138,137,119,119,130,130,108,108,108,108,108,49,86,120,120,120,120,120,122,122,122,117,117,117,117,121,121,121,128,207,84,84,87,85,85,119,108,108,120,122,117,121,207,84,84,87,85,85,119,108,108,117,121,87,211,137,212,213,117,117,117,117,117,108,108,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,119,49,86,122,119,49,86,122,122,137,213,117,117,87,125,84,108,119,210,130,108,49,86,120,122,117,121,214,215,216,128,127,84,87,85,119,130,108,49,86,120,122,117,121,128,127,49,86,119,108,128,127,49,120,122,49,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,49,86,128,127,128,127,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,5,130,0,0,0,0,0,0,0,0,0,0,0,0,0,232,0,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,157,83,168,168,88,95,140,149,232,83,164,157,162,162,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,0,143,0,232,232,232,88,83,88,95,140,143,149,232,153,157,161,162,164,168,232,232,88,232,83,88,95,140,143,149,232,153,157,161,162,164,168,95,140,149,153,83,88,140,149,88,149,232,88,83,88,95,140,143,149,153,157,161,162,164,168,88,161,88,143,83,164,95,140,149,88,232,232,161,95,140,143,153,164,95,153,95,153,161,88,161,162,164,88,161,88,95,140,149,153,161,88,95,140,149,153,161,83,88,95,140,143,149,232,153,157,161,162,164,168,161,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,83,88,95,140,143,149,232,153,157,161,162,164,168,95,140,149,153,149,0,157,161,162,161,83,88,95,140,143,149,232,153,157,161,162,164,168,83,140,149,161,168,83,88,95,140,143,149,153,157,164,88,143,95,153,164,83,161,0,0,0,0,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[[]],[2],[[]],[2,2],[[]],[2,2],[[2,2]],[2],[[2,2]],[2],[2],[[2,2]],[[2,2]],[2],[[2,2]],[2],[[2,2]],[2],[[],3],[[],3],[[],3],[[]],[2],[2],[[]],[2,2],[[]],[2,2],[[]],[2,2],[[]],[[]],[2,2],0,[[],4],[[]],[[]],[[]],[2,2],[[]],[2,2],[[5,5],[[5,[6]]]],[[7,7,7],7],[[]],[2,2],[[]],[2,2],[[]],[2,2],[[],8],[[],8],[[]],[8],[[]],[[]],[2,2],[[]],[[]],[2,2],[[]],[[],2],[[5,5]],[[5,5]],[[2,2]],[2],[[2,2]],[2],[2],[2],[[2,2]],[[2,2]],[2],[2],[[2,2]],[[2,2]],[[]],[[2,2],3],[[]],[2,2],[[]],[2,2],[[]],[2,2],[9],[[2,9]],[9],[[2,9]],[[]],[2,2],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[2,10],[[12,[11]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[[],[[13,[2]]]],[[],2],[[],2],[14,[[13,[2]]]],[15,[[13,[2]]]],[16,[[13,[2]]]],[17,[[13,[2]]]],[18,[[13,[2]]]],[19,[[13,[2]]]],[20,[[13,[2]]]],[21,[[13,[2]]]],[[]],[[],2],[[]],[[],[[2,[22]]]],[[],[[2,[22]]]],[[],[[2,[22]]]],[[]],[[],[[2,[22]]]],[[],[[2,[22]]]],[[],[[2,[22]]]],[[],[[2,[22]]]],[23,[[12,[2]]]],[[23,24],[[12,[2]]]],[[]],[2,2],[25,[[13,[2]]]],[26,[[13,[2]]]],[24,[[13,[2]]]],[4,[[13,[2]]]],[27,[[13,[2]]]],[9,[[13,[2]]]],0,[2],[[]],[[2,2]],[[],2],[[28,28]],[[28,28]],[[28,28]],0,[[]],[2],[[29,29],[[29,[30,30]]]],[[29,29]],[[]],[2],[2],[2,2],[[],3],[[],3],[2,3],[2,3],[[],3],[2,3],[2,3],[2,3],[2,3],[2,3],[[],3],[[],3],[2,3],[2],[[],9],[[],9],0,[[]],[2,2],[[]],[[]],[2,2],[[]],[[]],[2,2],[[]],[2,2],[[]],[[]],[2,2],[[]],[31],[[32,32],32],[[]],[[],13],[[32,32],32],[[]],[[],13],[[]],[2],[[]],[2],[[2,2]],[[2,2]],[2],[2],[2],[[2,2]],[[2,2]],[2],[[]],[[2,2,2],2],[[2,2,2],2],[[2,2,2],2],[[2,2,2]],[[2,2,2]],[2],[[2,2]],[[2,2]],[2],[2],[2],[[],2],[[],3],[[[2,[33]]]],[[]],[2],[2],[[[2,[33]]]],[[],34],[[],2],[[],3],[[],13],[[],[[13,[35]]]],[[],3],[[],3],[[],3],[[],3],[[],13],[[],13],[[],13],[[]],[[2,16]],[[2,21]],[[2,27]],[[2,4]],[[2,19]],[[2,26]],[[2,20]],[[2,24]],[[2,4]],[[2,17]],[[2,20]],[[2,19]],[[2,21]],[[2,24]],[[2,16]],[[2,18]],[[2,25]],[[2,18]],[[2,17]],[[2,9]],[[2,26]],[[2,25]],[[2,9]],[[2,27]],[[]],[[2,2],2],[[]],[2,2],[18],[[2,18],2],[[2,18],2],[[2,24],2],[[],2],[[],2],0,[[]],[2],[[]],[2,2],[2],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[2],[2],[2],[2],[2],[[2,2]],[[2,2]],[9],[[2,9]],[9],[[2,9]],[[]],[2,2],[[]],[2,2],[2,2],[[[2,[33]]]],[[]],[[2,2],2],[2],[2],[[]],[[]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[[2,[22]],[2,[22]]]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]],22],[[2,[22]]]],[[[2,[22]],22],[[2,[22]]]],[[[2,[22]],22],[[2,[22]]]],[[]],[[[2,[22]],22],[[2,[22]]]],[[[2,[22]],22],[[2,[22]]]],[[[2,[22]],22],[[2,[22]]]],[[[2,[22]],22],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]],[2,[22]],[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[[2,[22]],[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[18],[[[2,[22]],18],[[2,[22]]]],[[[2,[22]],18],[[2,[22]]]],[[[2,[22]],18],[[2,[22]]]],[[[2,[22]],18],[[2,[22]]]],[18],[[[2,[22]],18],[[2,[22]]]],[[[2,[22]],18],[[2,[22]]]],[[[2,[22]],18],[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[[2,[22]]]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[[2,[22]]],[[2,[22]]]],[[]],[2,2],[[]],[2],[[]],[[]],[2,2],[[]],[2],[[]],[[]],[[],2],[[]],[2,2],[2],[2],[[2,2]],[2],[2],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[2],[[2,2]],[2],[[],2],[[],2],[[29,29],[[29,[30,30]]]],[[]],[2,2],[[]],[2,2],[[]],[2,[[13,[14]]]],[2,[[13,[15]]]],[2,[[13,[16]]]],[2,[[13,[17]]]],[2,[[13,[18]]]],[2,[[13,[19]]]],[2,[[13,[20]]]],[2,[[13,[21]]]],[[]],[[]],[[],36],[[],13],[[]],[2,2],[2,[[13,[25]]]],[2,[[13,[26]]]],[2,[[13,[24]]]],[2,[[13,[4]]]],[2,[[13,[27]]]],[2,[[13,[9]]]],[[]],[2,2],[8,13],[[],13],[[],12],[[],12],[[],13],[2,[[13,[2]]]],[[]],[[],37],[[]],[2,2],[2,2],[[[2,[33]]]],[[]],[[],3],[[],38],[[],2],[31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[[41,[30,30]],[41,[30,30]]],3],[[[42,[[41,[30,30]]]],[42,[[41,[30,30]]]]],3],[[[41,[30,30]],41],[[29,[30,30]]]],[[[41,[30,30]],41,41]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[[41,[43,30,30,[44,[43,30,30]]]],43],[[29,[43,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],43]],[[[41,[30,30,[44,[30,30]]]],41,41]],[[[41,[6,30,30,[47,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[6,30,30,[48,[6,30,30]]]]]],[[[41,[6,30,30,[47,[6,30,30]]]],41]],0,[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[[42,[[2,[33]]]]],33],[[[42,[[49,[33]]]]],33],[[[42,[[2,[33]]]],[42,[[2,[33]]]]],33],[[[42,[[49,[33]]]],[42,[[49,[33]]]]],33],[[[42,[[49,[33]]]],50],[[42,[[49,[33]]]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[41,[30,30,[47,[30,30]]]],55]],[[[41,[30,30,[48,[30,30]]]],55],[[41,[30,30,[48,[30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[54,[43,30,[47,[43,30]]]]]],[[[41,[43,30,40,[47,[43,30]]]]]],[[[54,[43,30,[47,[43,30]]]]]],[[[41,[43,30,40,[47,[43,30]]]]]],[[[41,[56,57]]]],[[[41,[43,58,59]]]],[[[41,[43,60,59]]]],[[[41,[43,60,61]]]],[[[41,[43,58,60]]]],[[[41,[43,58,58]]]],[[[41,[43,58,62]]]],[[[41,[56,63]]]],[[[41,[43,58,61]]]],[[[41,[43,62,60]]]],[[[41,[43,62,58]]]],[[[41,[43,62,62]]]],[[[41,[60,56]]]],[[[41,[43,61,62]]]],[[[41,[43,62,61]]]],[[[41,[58,56]]]],[[[41,[56,64]]]],[[[41,[56,65]]]],[[[41,[62,56]]]],[[[41,[43,59,60]]]],[[[41,[59,56]]]],[[[41,[43,61,59]]]],[[[41,[43,59,62]]]],[[[41,[43,59,59]]]],[[[41,[56,66]]]],[[[41,[61,56]]]],[[[41,[43,59,61]]]],[[[41,[67,56]]]],[[[41,[43,61,60]]]],[[[41,[56,58]]]],[[[41,[56,56]]]],[[[41,[43,61,58]]]],[[[41,[43,62,59]]]],[[[41,[56,68]]]],[[[41,[43,59,58]]]],[[[41,[56,69]]]],[[[41,[70,56]]]],[[[41,[43,61,61]]]],[[[41,[71,56]]]],[[[41,[68,56]]]],[[[41,[56,71]]]],[[[41,[56,70]]]],[[[41,[57,56]]]],[[[41,[56,67]]]],[[[41,[43,60,62]]]],[[[41,[66,56]]]],[[[41,[65,56]]]],[[[41,[56,60]]]],[[[41,[43,60,58]]]],[[[41,[56,61]]]],[[[41,[64,56]]]],[[[41,[43,60,60]]]],[[[41,[56,59]]]],[[[41,[69,56]]]],[[[41,[63,56]]]],[[[41,[56,62]]]],[[[41,[30,30,[48,[30,30]]]]]],[72],[[[41,[30,30,[0,[[48,[30,30]],73]]]]]],[[[74,[30,30]]]],[72],[[[75,[30,30,30,30]]]],[[[74,[53,76]]]],[[[74,[76,30]]]],[42],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[43,58,61]]]],[[[41,[43,58,59]]]],[[[41,[43,59,62]]]],[[[41,[56,65]]]],[[[41,[56,66]]]],[[[41,[56,68]]]],[[[41,[56,71]]]],[[[41,[56,70]]]],[[[41,[43,59,58]]]],[[[41,[56,67]]]],[[[41,[43,59,61]]]],[[[41,[56,61]]]],[[[41,[56,59]]]],[[[41,[43,61,60]]]],[[[41,[43,59,59]]]],[[[41,[43,59,60]]]],[[[41,[56,62]]]],[[[41,[56,58]]]],[[[41,[43,61,58]]]],[[[41,[43,61,62]]]],[[[41,[56,64]]]],[[[41,[56,57]]]],[[[41,[56,63]]]],[[[41,[56,69]]]],[[[41,[60,56]]]],[[[41,[58,56]]]],[[[41,[62,56]]]],[[[41,[59,56]]]],[[[41,[61,56]]]],[[[41,[67,56]]]],[[[41,[70,56]]]],[[[41,[71,56]]]],[[[41,[68,56]]]],[[[41,[66,56]]]],[[[41,[65,56]]]],[[[41,[64,56]]]],[[[41,[56,60]]]],[[[41,[57,56]]]],[[[41,[56,56]]]],[[[41,[43,62,59]]]],[[[41,[43,62,62]]]],[[[41,[43,61,59]]]],[[[41,[43,62,58]]]],[[[41,[43,62,60]]]],[[[41,[63,56]]]],[[[41,[69,56]]]],[[[41,[43,62,61]]]],[[[41,[43,61,61]]]],[[[41,[43,58,62]]]],[[[41,[43,60,60]]]],[[[41,[43,58,58]]]],[[[41,[43,58,60]]]],[[[41,[43,60,61]]]],[[[41,[43,60,58]]]],[[[41,[43,60,62]]]],[[[41,[43,60,59]]]],[42],[72],[[[41,[30,30,[0,[[47,[30,30]],73]]]]]],[[[74,[30,30]]]],[72],[[[77,[30,30,30,30]]]],[[[75,[30,30,30,30]]]],[[[74,[76,30]]]],[[[74,[53,76]]]],[[[74,[30,30]]],78],[[[74,[30,30]]],78],[41,79],[41,80],[[[81,[30,30]]],[[29,[30,30]]]],[[[41,[82,30,30]]],[[29,[30,30]]]],[[[54,[30]],54]],[[[41,[30,40]],54]],[[[42,[[49,[33]]]]],[[13,[[42,[[50,[33]]]]]]]],[[[42,[[49,[33]]]]],13],[[[42,[[2,[33]]]]],13],[[[54,[30]],54]],[[[41,[30,40]],54]],[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[],9],[[[41,[45,30,30,[44,[45,30,30]]]]],[[83,[45,30,30]]]],[[]],[[[41,[43,62,58]]]],[[[41,[43,61,62]]]],[[[41,[43,60,61]]]],[[[41,[43,61,58]]]],[[[41,[43,58,60]]]],[[[41,[43,61,60]]]],[[[41,[43,61,61]]]],[[[41,[43,59,61]]]],[[[41,[43,58,58]]]],[[[41,[43,59,59]]]],[[[41,[43,60,59]]]],[[[41,[43,60,62]]]],[[]],[[[41,[43,62,59]]]],[[[41,[43,62,61]]]],[[[41,[43,60,58]]]],[[[41,[43,58,62]]]],[[[41,[43,59,62]]]],[[[41,[43,58,59]]]],[[[41,[43,58,61]]]],[[[41,[43,59,58]]]],[[[41,[43,61,59]]]],[[[41,[43,62,60]]]],[[[41,[43,60,60]]]],[[[41,[43,62,62]]]],[[[41,[43,59,60]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[43,61,59]]]],[[[41,[43,59,62]]]],[[[41,[43,62,58]]]],[[[41,[43,60,60]]]],[[[41,[43,61,62]]]],[[[41,[43,62,60]]]],[[[41,[43,58,61]]]],[[[41,[43,62,61]]]],[[[41,[43,58,59]]]],[[[41,[43,61,58]]]],[[[41,[43,62,62]]]],[[[41,[43,58,62]]]],[[[41,[43,59,58]]]],[[[41,[43,59,60]]]],[[[41,[43,60,58]]]],[[[41,[43,60,59]]]],[[[41,[43,60,62]]]],[[]],[[[41,[43,58,58]]]],[[[41,[43,62,59]]]],[[[41,[43,59,59]]]],[[[41,[43,58,60]]]],[[[41,[43,59,61]]]],[[[41,[43,61,61]]]],[[[41,[43,60,61]]]],[[[41,[43,61,60]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[43,30,30,[47,[43,30,30]]]]]],[[[41,[43,30,30,[47,[43,30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[[41,[30,30,[47,[30,30]]]]],[[29,[43,30,30]]]],[[[42,[[49,[33]]]]],84],[[[42,[54]]],[[42,[[39,[43]]]]]],[[[42,[[2,[33]]]]],[[85,[43]]]],[[[42,[[86,[33]]]]],[[87,[43]]]],[[[41,[43,30,30,[44,[43,30,30]]]],43,41,41,43]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[13,[[88,[45,30]]]]]],[[[72,[89]]],[[72,[89]]]],[[[41,[89,89,89,89]]],[[41,[89,89,89,89]]]],[[[77,[43,30,30,30,30]]],[[77,[43,30,30,30,30]]]],[90,90],[91,91],[92,92],[[[42,[89]]],[[42,[89]]]],[[[74,[89,[0,[89,30]],[0,[89,30]]]]],[[74,[89,[0,[89,30]],[0,[89,30]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[72,[43]]],[[93,[43,40,40]]]],[[[41,[30,30,[47,[30,30]]]]],[[29,[30,30]]]],[[[77,[43,30,30,30,30]]],[[93,[43,30,30]]]],[[[75,[43,30,30,30,30]]],[[93,[43,30,30]]]],[[[74,[43,53,76]]],[[93,[43,53,76]]]],[[[74,[43,76,30]]],[[93,[43,76,30]]]],[[[41,[30,30,[47,[30,30]]]]],[[94,[30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],43,41,41,43]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[95,[45,30,30]]]],[[[41,[30,30,[47,[30,30]]]],9],[[79,[30,56]]]],[[[41,[30,30,[47,[30,30]]]]],[[96,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]],[[97,[30,30,[47,[30,30]]]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[30,30,[48,[30,30]]]],9],[[80,[30,56]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[76,56]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[76,56]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[30,76]]]],[[[41,[30,30,[47,[30,30]]]],9,30],[[79,[30,30]]]],[[[41,[30,30,[48,[30,30]]]],9,30],[[80,[30,30]]]],[[[41,[30,30,[47,[30,30]]]],9,30,9],[[79,[30,30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,30,9],[[80,[30,30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[30,76]]]],[[[41,[30,30,[47,[30,30]]]],[98,[30]]],[[79,[30]]]],[[[41,[30,30,[48,[30,30]]]],[98,[30]]],[[80,[30]]]],[[[41,[30,30,[47,[30,30]]]],[98,[30]],[98,[30]]]],[[[41,[30,30,[48,[30,30]]]],[98,[30]],[98,[30]]]],[[[41,[30,30,[47,[30,30]]]],9,9,9],[[79,[30,76,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9,9],[[80,[30,76,76]]]],[[[42,[[2,[33]]]]],2],[[[46,[45,[44,[45]]]]],[[39,[[2,[45]]]]]],[[[41,[45,[44,[45]]]]],[[39,[[2,[45]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],41],[[94,[43,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[[41,[43,30,30,[44,[43,30,30]]]],41],[[94,[43,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[[41,[43,30,30,[47,[43,30,30]]]],[39,[43,30]],31],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]],31],[[99,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]],31],[[39,[43,30]]]],[[[41,[6,30,30,[47,[6,30,30]]]]],[[29,[6,30,30]]]],[[[42,[[49,[33]]]]],[[42,[[49,[33]]]]]],[[[42,[[2,[33]]]]],[[42,[[2,[33]]]]]],[[[42,[[86,[33]]]]],[[42,[[86,[33]]]]]],[[[41,[6,30,30,[48,[6,30,30]]]]]],[[[42,[[86,[33]]]]]],[[[42,[[49,[33]]]]]],[[[42,[[2,[33]]]]]],[[[41,[6,30,30,[48,[6,30,30]]]]]],[[[41,[6,30,30,[47,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[6,30,30,[47,[6,30,30]]]],41]],0,[[[54,[100,30,[44,[100,30]]]],[54,[100]]],[[39,[100,[102,[[101,[30]],56]]]]]],[[[41,[100,40]],[54,[100]]],[[39,[100,[102,[[101,[30]],56]]]]]],[[[54,[100,30,[44,[100,30]]]],[54,[100]]],[[39,[100,30]]]],[[[41,[100,40]],[54,[100]]],[[39,[100,30]]]],[[[54,[100,30,[44,[100,30]]]],[54,[100]]],[[39,[100,[102,[[101,[30,56]]]]]]]],[[[41,[100,40]],[54,[100]]],[[39,[100,[102,[[101,[30,56]]]]]]]],0,[[[41,[30,30,[48,[30,30]]]],41]],[[[41,[30,30,[48,[30,30]]]]]],[[[42,[[2,[33]]]]],33],[[[41,[[0,[43,52,103,51]],30,30,[47,[[0,[43,52,103,51]],30,30]]]],41],[[104,[[0,[43,52,103,51]],30,30]]]],[[[54,[[0,[43,105]],58,[47,[[0,[43,105]],58]]]]],[[29,[[0,[43,105]],58,58]]]],[[[41,[[0,[43,105]],40,[47,[[0,[43,105]],58]]]]],[[29,[[0,[43,105]],58,58]]]],0,[[],[[72,[106]]]],[[],41],0,[[]],[[]],[[]],[[]],[[],24],[[],24],[[[41,[43,60,62]]]],[[[41,[43,58,56]]]],[[[41,[43,56,62]]]],[[[41,[43,61,60]]]],[[[41,[43,56,58]]]],[[[41,[43,59,61]]]],[[[41,[43,56,60]]]],[[[41,[43,61,56]]]],[[[41,[43,59,59]]]],[[[41,[43,61,61]]]],[[[41,[43,59,62]]]],[[[41,[43,56,59]]]],[[[41,[43,59,58]]]],[[[41,[43,56,61]]]],[[[41,[43,59,60]]]],[[[41,[43,59,56]]]],[[[41,[43,62,61]]]],[[[41,[43,62,56]]]],[[[41,[43,62,59]]]],[[[41,[43,58,60]]]],[[[41,[43,62,62]]]],[[[41,[43,60,56]]]],[[[41,[43,62,58]]]],[[[41,[43,56,56]]]],[[[41,[43,60,60]]]],[[[41,[43,62,60]]]],[[[41,[43,60,58]]]],[[[41,[43,58,61]]]],[[[41,[43,61,59]]]],[[[41,[43,61,58]]]],[[[41,[43,58,59]]]],[[[41,[43,60,59]]]],[[[41,[43,58,62]]]],[[[41,[43,60,61]]]],[[[41,[43,61,62]]]],[[[41,[43,58,58]]]],[42],[[[41,[43,62,62]]]],[[[41,[43,62,58]]]],[[[41,[43,60,61]]]],[[[41,[43,61,60]]]],[[[41,[43,60,58]]]],[[[41,[43,60,59]]]],[[[41,[43,58,58]]]],[[[41,[43,61,62]]]],[[[41,[43,59,61]]]],[[[41,[43,60,62]]]],[[[41,[43,58,62]]]],[[[41,[43,61,58]]]],[[[41,[43,61,59]]]],[[[41,[43,58,59]]]],[[[41,[43,60,60]]]],[[[41,[43,58,61]]]],[[[41,[43,56,58]]]],[[[41,[43,56,61]]]],[[[41,[43,56,56]]]],[[[41,[43,62,60]]]],[[[41,[43,60,56]]]],[[[41,[43,58,60]]]],[[[41,[43,58,56]]]],[[[41,[43,56,62]]]],[[[41,[43,62,56]]]],[[[41,[43,62,59]]]],[[[41,[43,59,56]]]],[[[41,[43,61,61]]]],[[[41,[43,62,61]]]],[[[41,[43,59,59]]]],[[[41,[43,56,60]]]],[[[41,[43,56,59]]]],[[[41,[43,59,60]]]],[[[41,[43,59,58]]]],[[[41,[43,59,62]]]],[[[41,[43,61,56]]]],[[[46,[45,[107,[[107,[[107,[107]]]]]],[44,[45,[107,[[107,[107]]]],[107,[[107,[107]]]]]]]]],45],[[[41,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]],[44,[45,[107,[[107,[107]]]],[107,[[107,[107]]]]]]]]],45],[[[46,[43,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],0,[[41,108]],[[[41,[30,30]]]],[[41,108]],[[41,108]],[41],[[41,108]],[[109,108]],[[109,108]],[[[41,[30,30]]]],[[[41,[30,30,[47,[30,30]]]],41]],[[[41,[30,30,[47,[30,30]]]],41]],[[[42,[[86,[33]]]]],86],[[[46,[45,[44,[45]]]]],[[13,[[39,[45]]]]]],[[[41,[45,[44,[45]]]]],[[13,[[39,[45]]]]]],[[],9],[[[72,[110]],72],3],[[[41,[30,30,[47,[30,30]]]],41],3],[[41,41],3],[[[42,[41]],[42,[41]]],3],[[[74,[110,[0,[110,30]],[0,[110,30]]]],74],3],[[[42,[[49,[33]]]]]],[[[42,[[49,[33]]]]],[[49,[33]]]],[[[41,[76]],111]],[[[41,[76]],111]],[[[41,[76,56]],111]],[[[74,[30,76]],111]],[[[74,[112,30,76]],111]],[[[74,[76]],111]],[[[74,[76,56]],111]],[[29,9]],[[29,9]],[[113,113,50],[[114,[100]]]],[[113,113,50],[[41,[100,40,40,[72,[100]]]]]],[[54,54],[[42,[[49,[33]]]]]],[[[41,[30,30,[48,[30,30]]]]]],[[[41,[30,30,[48,[30,30]]]],9]],[[[41,[30,30,[48,[30,30]]]]]],[[[41,[30,30,[48,[30,30]]]],9]],[[[41,[43,30,30,[48,[43,30,30]]]]]],[[[41,[30,30,[48,[30,30]]]],9]],[[[41,[30,30,[48,[30,30]]]],9]],[[[41,[43,30,30,[48,[43,30,30]]]]]],[[[41,[30,30,[48,[30,30]]]],31]],[[[41,[30,30,[48,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]],9],[[79,[30,40]]]],[[[41,[30,30,[48,[30,30]]]],9],[[80,[30,40]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[30,40,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[30,40,76]]]],[[[41,[43,30,30,[44,[43,30,30]]]],43],[[29,[43,40,40]]]],[[[41,[30,30,[47,[30,30]]]],9],[[79,[40,30]]]],[[[41,[30,30,[48,[30,30]]]],9],[[80,[40,30]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[40,30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[40,30,76]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[40,40]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[40,40]]]],[[[41,[30,30,[47,[30,30]]]]],[[79,[40,40,76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[40,40,76,76]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[40,40]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[40,40]]]],[[[41,[30,30,[47,[30,30]]]]],[[79,[40,40,76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[40,40,76,76]]]],[[[72,[115]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30,115]],10],[[12,[11]]]],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[41,[30,30]],10],116],[[[77,[115,[0,[115,30]],[0,[115,30]],[0,[115,30]],[0,[115,30]]]],10],116],[[[75,[115,[0,[115,30]],[0,[115,30]],[0,[115,30]],[0,[115,30]]]],10],116],[[90,10],116],[[91,10],116],[[92,10],116],[[[42,[115]],10],[[12,[11]]]],[[[74,[115,[0,[115,30]],[0,[115,30]]]],10],116],[[[41,[30,30,[47,[30,30]]]],55]],[[[41,[30,30,[47,[30,30]]]],28,55]],[[[117,[33]]],[[29,[33,[118,[40,56]],[118,[40,56]]]]]],[[[119,[100]]],[[29,[100,[118,[40,56]],[118,[40,56]]]]]],[[[120,[[0,[43,38,34]]]]],[[29,[[0,[43,38,34]],[118,[40,56]],[118,[40,56]]]]]],[[],[[29,[30,30]]]],[[],[[29,[30,30]]]],[[[121,[33]]],[[29,[33,[118,[40,56]],[118,[40,56]]]]]],[[],[[29,[30,30]]]],[[],[[29,[30,30]]]],[[[122,[[0,[43,38,34]]]]],[[29,[[0,[43,38,34]],[118,[40,56]],[118,[40,56]]]]]],[[],[[109,[43]]]],[[[85,[33]]],[[123,[33]]]],[[[124,[100]]],[[123,[100]]]],[[[125,[100]]],[[126,[100]]]],[[[85,[33]]],[[126,[33]]]],[[[124,[100]]],[[126,[100]]]],[[[84,[33]]],[[126,[33]]]],[[[125,[100]]],[[114,[100]]]],[[[84,[33]]],[[114,[33]]]],[[[127,[100]]],[[114,[100]]]],[[[87,[[0,[33,100]]]]],[[114,[[0,[33,100]]]]]],[[[128,[100]]],[[114,[100]]]],[[[78,[43]]],[[129,[43]]]],[[[130,[[0,[43,38,34]]]]],[[39,[[0,[43,38,34]],[118,[56]]]]]],[[],[[131,[43]]]],[[[78,[43]]],[[132,[43]]]],[[],[[133,[43]]]],[[],[[134,[[0,[43,112]]]]]],[[],[[135,[[0,[43,112]]]]]],[41,79],[41,79],[80,79],[41,80],[[]],[[[80,[40,40]]],[[41,[40,40,72]]]],[[[79,[40,40]]],[[41,[40,40,72]]]],[[[80,[76]]],[[41,[76,[74,[76]]]]]],[[]],[[[80,[76]]],[[41,[76,[74,[76]]]]]],[[[79,[76]]],[[41,[76,[74,[76]]]]]],[[[79,[76]]],[[41,[76,[74,[76]]]]]],[[]],[[]],[[]],[[]],[[]],[[],[[42,[[29,[30,30]]]]]],[[],[[42,[[29,[30,30]]]]]],[[]],[[],[[42,[[29,[30,30]]]]]],[[],[[42,[[29,[30,30]]]]]],[[]],[33,[[42,[[2,[33]]]]]],[72,109],[72,[[41,[40,40,72]]]],[[42,100],[[114,[100]]]],[[42,100],[[41,[100,40,40,[72,[100]]]]]],[[42,33],[[42,[[49,[33]]]]]],[[],[[42,[[2,[33]]]]]],[[],[[42,[[49,[33]]]]]],[[],[[29,[43,53,53]]]],[[],[[29,[43,76,53]]]],[[],[[29,[43,53,76]]]],[[9,9],[[29,[43,76,76]]]],[[],[[41,[43,53,53]]]],[[],[[41,[43,53]]]],[[9,9],[[41,[43]]]],[[],[[41,[43,53]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[],[[29,[43,30,30]]]],[[],[[41,[43,30,30]]]],[[[2,[33]]],[[42,[[2,[33]]]]]],[[[2,[33]]]],[[33,33],[[42,[[2,[33]]]]]],[[[47,[30,30]]],[[41,[30,30,[47,[30,30]]]]]],[[],41],[54,[[29,[30,30]]]],[54,41],[43,[[29,[43,53,53]]]],[[9,43],[[29,[43,76,53]]]],[[9,9,43],[[29,[43,76,76]]]],[[9,43],[[29,[43,53,76]]]],[[9,43],[[41,[43,53]]]],[43,[[41,[43,53,53]]]],[[9,43],[[41,[43,53]]]],[[9,9,43],[[41,[43]]]],[[30,30,43],[[29,[43,30,30]]]],[[30,30,43],[[41,[43,30,30]]]],[[9,43],[[29,[43,53,76]]]],[[9,43],[[29,[43,76,53]]]],[[9,9,43],[[29,[43,76,76]]]],[43,[[29,[43,53,53]]]],[43,[[41,[43,53,53]]]],[[9,9,43],[[41,[43]]]],[[9,43],[[41,[43,53]]]],[[9,43],[[41,[43,53]]]],[[30,30,43],[[29,[43,30,30]]]],[[30,30,43],[[41,[43,30,30]]]],[[100,100,100],[[114,[100]]]],[[100,100,100],[[41,[100,40,40,[72,[100]]]]]],[[33,33,33],[[42,[[49,[33]]]]]],[[],[[29,[43,53,53]]]],[9,[[29,[43,76,53]]]],[9,[[29,[43,53,76]]]],[[9,9],[[29,[43,76,76]]]],[9,[[41,[43,53]]]],[[],[[41,[43,53,53]]]],[9,[[41,[43,53]]]],[[9,9],[[41,[43]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[[54,[[0,[43,38]],[101,[[136,[56]],56]]]]],[[13,[[39,[[0,[43,38]],[136,[56]]]]]]]],[[[54,[[0,[43,38]],[101,[[136,[56]],56]]]]],[[13,[[39,[[0,[43,38]],[136,[56]]]]]]]],[137,[[42,[[86,[33]]]]]],[[9,9],[[29,[43,76,76]]]],[[],[[29,[43,53,53]]]],[9,[[29,[43,76,53]]]],[9,[[29,[43,53,76]]]],[9,[[41,[43,53]]]],[[],[[41,[43,53,53]]]],[9,[[41,[43,53]]]],[[9,9],[[41,[43]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[123,[[42,[[2,[33]]]]]],[126,[[42,[[49,[33]]]]]],[[123,33,9,[42,[[2,[33]]]]],[[42,[[2,[33]]]]]],[[126,33,9,[42,[[49,[33]]]]],[[42,[[49,[33]]]]]],[[],[[29,[43,53,53]]]],[9,[[29,[43,53,76]]]],[[9,9],[[29,[43,76,76]]]],[9,[[29,[43,76,53]]]],[9,[[41,[43,53]]]],[9,[[41,[43,53]]]],[[9,9],[[41,[43]]]],[[],[[41,[43,53,53]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[[138,[33]],[84,[33]]],[[42,[[86,[33]]]]]],[[[49,[33]]],[[42,[[49,[33]]]]]],[[],[[77,[30,30,30,30]]]],[[],[[75,[30,30,30,30]]]],[[],42],[[[84,[33]]],[[42,[[86,[33]]]]]],[124,[[42,[[2,[33]]]]]],[125,[[42,[[49,[33]]]]]],[[9,9],[[29,[43,76,76]]]],[[],[[29,[43,53,53]]]],[9,[[29,[43,76,53]]]],[9,[[29,[43,53,76]]]],[[],[[41,[43,53,53]]]],[9,[[41,[43,53]]]],[[9,9],[[41,[43]]]],[9,[[41,[43,53]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[],[[29,[43,76,53]]]],[[],[[29,[43,53,76]]]],[[9,9],[[29,[43,76,76]]]],[[],[[29,[43,53,53]]]],[[9,9],[[41,[43]]]],[[],[[41,[43,53,53]]]],[[],[[41,[43,53]]]],[[],[[41,[43,53]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[],[[29,[43,30,30]]]],[[],[[41,[43,30,30]]]],[[[50,[100]]],[[114,[100]]]],[[[50,[100]]],[[41,[100,40,40,[72,[100]]]]]],[[[54,[33,58]]],[[42,[[49,[33]]]]]],[[[54,[33,56,[44,[33,56]]]]],[[42,[[2,[33]]]]]],[[[54,[33,58]],33],[[42,[[49,[33]]]]]],[[],[[79,[43,53,53]]]],[9,[[79,[43,53,76]]]],[9,[[79,[43,76,53]]]],[[9,9],[[79,[43,76,76]]]],[9,[[80,[43,53,76]]]],[[9,9],[[80,[43,76,76]]]],[[],[[80,[43,53,53]]]],[9,[[80,[43,76,53]]]],[9,[[41,[43,53,[75,[43,53]]]]]],[[9,9],[[41,[43,[75,[43]]]]]],[9,[[41,[43,53,[75,[43,53]]]]]],[[],[[41,[43,53,53,[77,[43,53,53]]]]]],[9,[[41,[43,53,[77,[43,53]]]]]],[9,[[41,[43,53,[77,[43,53]]]]]],[[],[[41,[43,53,53,[75,[43,53,53]]]]]],[[9,9],[[41,[43,[77,[43]]]]]],[[30,30],[[79,[43,30,30]]]],[[30,30],[[80,[43,30,30]]]],[[30,30],[[41,[43,30,30,[77,[43,30,30]]]]]],[[30,30],[[41,[43,30,30,[75,[43,30,30]]]]]],[[9,30,30],[[79,[43,30,30]]]],[[9,30,30],[[80,[43,30,30]]]],[[9,30,30],[[41,[43,30,30,[77,[43,30,30]]]]]],[[9,30,30],[[41,[43,30,30,[75,[43,30,30]]]]]],[[9,9],[[79,[43,76,53]]]],[[9,9,9],[[79,[43,76,76]]]],[[9,9],[[79,[43,53,76]]]],[9,[[79,[43,53,53]]]],[9,[[80,[43,53,53]]]],[[9,9,9],[[80,[43,76,76]]]],[[9,9],[[80,[43,53,76]]]],[[9,9],[[80,[43,76,53]]]],[[9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9],[[41,[43,53,[77,[43,53]]]]]],[[9,9,9],[[41,[43,[77,[43]]]]]],[[9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9],[[41,[43,53,[77,[43,53]]]]]],[9,[[41,[43,53,53,[77,[43,53,53]]]]]],[9,[[41,[43,53,53,[75,[43,53,53]]]]]],[[9,9,9],[[41,[43,[75,[43]]]]]],[[9,9,9],[[79,[43,53,76,76,76]]]],[[9,9],[[79,[43,53,53,76,76]]]],[[9,9,9,9],[[79,[43,76,76,76,76]]]],[[9,9,9],[[79,[43,76,53,76,76]]]],[[9,9,9],[[41,[43,53,[77,[43,53]]]]]],[[9,9,9],[[41,[43,53,[77,[43,53]]]]]],[[9,9,9,9],[[41,[43,[77,[43]]]]]],[[9,9],[[41,[43,53,53,[77,[43,53,53]]]]]],[[30,30,30,30],[[79,[43,30,30,30,30]]]],[[30,30,30,30],[[80,[43,30,30,30,30]]]],[[30,30,30,30],[[41,[43,30,30,[77,[43,30,30,30,30]]]]]],[[30,30,30,30],[[41,[43,30,30,[75,[43,30,30,30,30]]]]]],[[9,30,30,30,30],[[79,[43,30,30,30,30]]]],[[9,30,30,30,30],[[80,[43,30,30,30,30]]]],[[9,30,30,30,30],[[41,[43,30,30,[75,[43,30,30,30,30]]]]]],[[9,30,30,30,30],[[41,[43,30,30,[77,[43,30,30,30,30]]]]]],[[9,9,9],[[80,[43,76,53,76,76]]]],[[9,9,9],[[80,[43,53,76,76,76]]]],[[9,9],[[80,[43,53,53,76,76]]]],[[9,9,9,9],[[80,[43,76,76,76,76]]]],[[9,9,9,9],[[41,[43,[75,[43]]]]]],[[9,9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9],[[41,[43,53,53,[75,[43,53,53]]]]]],[[9,9,9,9,9],[[79,[43,76,76,76,76]]]],[[9,9,9],[[79,[43,53,53,76,76]]]],[[9,9,9,9],[[79,[43,76,53,76,76]]]],[[9,9,9,9],[[79,[43,53,76,76,76]]]],[[9,9,9],[[80,[43,53,53,76,76]]]],[[9,9,9,9],[[80,[43,76,53,76,76]]]],[[9,9,9,9],[[80,[43,53,76,76,76]]]],[[9,9,9,9,9],[[80,[43,76,76,76,76]]]],[[9,9,9,9,9],[[41,[43,[77,[43]]]]]],[[9,9,9],[[41,[43,53,53,[75,[43,53,53]]]]]],[[9,9,9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9,9,9],[[41,[43,53,[75,[43,53]]]]]],[[9,9,9,9],[[41,[43,53,[77,[43,53]]]]]],[[9,9,9,9,9],[[41,[43,[75,[43]]]]]],[[9,9,9],[[41,[43,53,53,[77,[43,53,53]]]]]],[[9,9,9,9],[[41,[43,53,[77,[43,53]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[[[78,[43]]],[[29,[43,76,53]]]],[[9,9,[78,[43]]],[[29,[43,76,76]]]],[[[78,[43]]],[[29,[43,53,53]]]],[[[78,[43]]],[[29,[43,53,76]]]],[[9,9,[78,[43]]],[[41,[43]]]],[[[78,[43]]],[[41,[43,53]]]],[[[78,[43]]],[[41,[43,53,53]]]],[[[78,[43]]],[[41,[43,53]]]],[[30,30,[78,[43]]],[[29,[43,30,30]]]],[[30,30,[78,[43]]],[[41,[43,30,30]]]],[[[74,[76,76]]],139],[[[74,[76,56]]],129],[[[74,[56,76]]],132],[[[74,[76,76]]],[[41,[76,76,[74,[76,76]]]]]],[[[74,[56,76]]],[[41,[40,76,[74,[40,76]]]]]],[[[74,[76,56]]],[[41,[76,40,[74,[76,40]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[140,[45,30,30]]]],[[[41,[30,30]],[41,[30,30]]],3],[[[41,[30,30,[141,[30,30]]]],41,41]],[[[41,[30,30,[141,[30,30]]]],41,41]],[[[41,[30,30,[141,[30,30]]]],41,41]],[[[54,[30]],41,54]],[[[41,[30,40]],41,54]],[[[54,[30]],41,54]],[[[41,[30,40]],41,54]],[[[54,[30]],41,54]],[[[41,[30,40]],41,54]],[[[41,[30,30,[47,[30,30]]]]],79],[[[41,[30,30,[48,[30,30]]]]],80],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76]]]],[[[41,[30,30,[47,[30,30]]]]],79],[[[41,[30,30,[48,[30,30]]]]],80],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76]]]],[[[41,[30,30,[141,[30,30]]]],54,54]],[[[41,[30,30,[141,[30,30]]]],54,54]],[[[41,[30,30,[141,[30,30]]]],54,54]],[[[41,[30,30,[47,[30,30]]]]],13],[[[41,[30,30,[47,[30,30]]]]],13],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[30,30]],[41,[30,30]]],3],[[[72,[142]]]],[41],[[[42,[142]]]],[[[54,[30]],46,54]],[[[41,[30,40]],46,54]],[[[41,[30,30,[141,[30,30]]]],54,54]],[[[46,[6,30,[44,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[143,[45,30]]]],[[[54,[43,30,[47,[43,30]]]]],9],[[[41,[43,30,40,[47,[43,30]]]]],9],[[[41,[[0,[43,7,1]],30,30,[47,[[0,[43,7,1]],30,30]]]]]],[[[54,[43,30,[47,[43,30]]]]],9],[[[41,[43,30,40,[47,[43,30]]]]],9],[[[54,[43,30,[47,[43,30]]]]],9],[[[41,[43,30,40,[47,[43,30]]]]],9],[[[41,[43,30,30,[47,[43,30,30]]]]]],[[9,9],[[29,[43,76,76]]]],[9,[[29,[43,53,76]]]],[9,[[29,[43,76,53]]]],[[],[[29,[43,53,53]]]],[[],[[41,[43,53,53]]]],[[9,9],[[41,[43]]]],[9,[[41,[43,53]]]],[9,[[41,[43,53]]]],[[],[[42,[[86,[33]]]]]],[[],[[42,[[2,[33]]]]]],[[],[[42,[[49,[33]]]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[[54,[43,30,[47,[43,30]]]]],9],[[[41,[43,30,40,[47,[43,30]]]]],9],[[[54,[43,30,[47,[43,30]]]]],9],[[[41,[43,30,40,[47,[43,30]]]]],9],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]],9]],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[48,[30,30]]]]]],[[[41,[30,30,[48,[30,30]]]],9]],0,[[[41,[43,30,30,[44,[43,30,30]]]],[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],[41,[43,30,30,[44,[43,30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,30,[101,[30,56]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,9,43],[[29,[43,30,76]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[81,[43,30,[101,[30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,30,[101,[30,40]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,[101,[30,40]],30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,[101,[30,56]],30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,9,43],[[29,[43,76,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[81,[43,[101,[30]],30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42],[41],[41],[[[72,[43]]],[[93,[43,40,40]]]],[[[41,[30,30,[47,[30,30]]]]],[[29,[30,30]]]],[[[77,[43,30,30,30,30]]],[[93,[43,30,30]]]],[[[75,[43,30,30,30,30]]],[[93,[43,30,30]]]],[[[74,[43,76,30]]],[[93,[43,76,30]]]],[[[74,[43,53,76]]],[[93,[43,53,76]]]],[[[41,[30,30,[47,[30,30]]]]],[[94,[30,30]]]],[[[77,[30,30,30,30]]]],[[[75,[30,30,30,30]]]],[[[75,[43,30,30,30,30]]]],[[[42,[[2,[33]]]]],[[42,[[2,[33]]]]]],[[[42,[[86,[33]]]]],[[42,[[86,[33]]]]]],[[[42,[[49,[33]]]]],[[42,[[49,[33]]]]]],[[[42,[[2,[33]]]]]],[[[42,[[86,[33]]]]]],[[[42,[[49,[33]]]]]],[[[42,[[86,[33]]]],113],[[113,[33]]]],[[[42,[[49,[33]]]],113],[[113,[33]]]],[[[42,[[2,[33]]]],144],[[144,[33]]]],[[[42,[[86,[33]]]],42],[[42,[[50,[33]]]]]],[[[42,[[49,[33]]]],42],[[42,[[50,[33]]]]]],[[[42,[[2,[33]]]],42],[[42,[[145,[33]]]]]],[[[42,[[2,[33]]]],145],[[145,[33]]]],[[[42,[[49,[33]]]],50],[[50,[33]]]],[[[42,[[86,[33]]]],50],[[50,[33]]]],[72,3],[[[77,[30,30,30,30]]],3],[[[75,[30,30,30,30]]],3],[[[74,[53,76]]],3],[[[74,[76,30]]],3],[[[41,[30,30,[47,[30,30]]]]],3],[[[74,[30,30]]],3],[[[41,[30,30,[47,[30,30]]]]],3],[29,3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[46,[100,30,[44,[100,30,30]]]]],3],[[[41,[100,30,30,[44,[100,30,30]]]]],3],[[[41,[45,30,30,[44,[45,30,30]]]]],3],[[[46,[100,30,[44,[100,30,30]]]],100],3],[[[41,[100,30,30,[44,[100,30,30]]]],100],3],[[[41,[30,30,[47,[30,30]]]]],3],[[[29,[53,53]]],3],[[[42,[[86,[33]]]],[42,[[86,[33]]]]],[[42,[[86,[33]]]]]],0,[[[41,[30,30,[47,[30,30]]]]],[[146,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]],[[147,[30,30,[47,[30,30]]]]]],[9,39],[9,[[41,[40]]]],[9,[[42,[39]]]],[9,[[42,[[41,[40]]]]]],[[[41,[30,30]],41],[[29,[[148,[30,30]],[148,[30,30]]]]]],[[],9],[[[41,[30,30]],[41,[30,30]]],3],[[[41,[30,30,[47,[30,30]]]]],9],[[[74,[30,30]]],9],[[[54,[[0,[43,38,34,52,103,51]],30,[44,[[0,[43,38,34,52,103,51]],30]]]],54,[0,[43,38,34,52,103,51]]],[[39,[[0,[43,38,34,52,103,51]],30]]]],[[[41,[[0,[43,38,34,52,103,51]],30,40,[44,[[0,[43,38,34,52,103,51]],30]]]],54,[0,[43,38,34,52,103,51]]],[[39,[[0,[43,38,34,52,103,51]],30]]]],[[[42,[[49,[33]]]],[42,[[49,[33]]]],33],[[49,[33]]]],[[[42,[[86,[33]]]],[42,[[86,[33]]]],33],[[86,[33]]]],[[[42,[[49,[33]]]]],[[49,[33]]]],[[113,113,50],[[114,[100]]]],[[113,113,50],[[41,[100,40,40,[72,[100]]]]]],[[54,54],[[42,[[49,[33]]]]]],[[113,113,50],[[114,[100]]]],[[113,113,50],[[41,[100,40,40,[72,[100]]]]]],[[54,54],[[42,[[49,[33]]]]]],[[[41,[[0,[43,38]],30,30,[44,[[0,[43,38]],30,30]]]]],[[29,[[0,[43,38]],30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],18]],[[[41,[30,30]],[41,[30,30]]],3],[[[41,[45,30,30,[44,[45,30,30]]]]],[[149,[45,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[41,[30,30,[47,[30,30]]]],55],[[29,[43,30,30]]]],[[[46,[43,30,[47,[43,30,30]]]],55],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]],55],[[39,[43,30]]]],[[[41,[30,30,[47,[30,30]]]],55],[[29,[43,30,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[],[[29,[53,53]]]],[[]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[111,[[42,[[49,[33]]]]]],[[41,41]],[[[41,[43,30,30,[44,[43,30,30]]]],41]],[[90,41,41]],[[91,41,41]],[[92,41,41]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[],[[29,[53,53]]]],[[]],[[[41,[40,40]],5]],[[41,5]],[41],[[41,108]],[[41,108]],[[41,108]],[[41,108]],[[41,41]],[[41,[41,[30,30]]]],[[[41,[30,30]]]],[[[41,[40,40]],5]],[[[41,[30,30]],41]],[[41,5]],[[[41,[30,30]],[41,[30,30]]]],[[109,108]],[[109,108]],[[41,41]],[[[41,[30,30]]]],[[41,41]],[[[41,[30,30]],41,41]],[[[41,[30,30,[47,[30,30]]]]],9],[[[41,[30,30]]]],[41],[[[42,[[29,[[0,[43,150]],30,30]]]]]],[[[41,[30,30]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[[],[[41,[40,40,72]]]],[33,[[42,[[2,[33]]]]]],[[[54,[33,58]]],[[42,[[49,[33]]]]]],[[30,30,78],[[74,[30,30]]]],[151],[[[54,[33,58]],33],[[42,[[49,[33]]]]]],[54,[[29,[53,53]]]],[54,41],[[145,144],[[126,[100]]]],[[50,113],[[114,[100]]]],[[145,144],[[41,[100,40,40,[72,[100]]]]]],[[50,113],[[41,[100,40,40,[72,[100]]]]]],[151,[[42,[151]]]],[[113,113,50],[[114,[100]]]],[[113,113,50],[[41,[100,40,40,[72,[100]]]]]],[[54,54],[[42,[[49,[33]]]]]],[[100,100,100,100,100,100],[[114,[100]]]],[[100,100,100,100,100,100],[[41,[100,40,40,[72,[100]]]]]],[[100,100,100,100],[[114,[100]]]],[[100,100,100,100],[[41,[100,40,40,[72,[100]]]]]],[100,[[126,[100]]]],[[[50,[100]]],[[114,[100]]]],[[[50,[100]]],[[41,[100,40,40,[72,[100]]]]]],[100,[[41,[100,40,40,[72,[100]]]]]],[[[50,[100]],[113,[100]]],[[114,[100]]]],[[[50,[100]],[113,[100]]],[[41,[100,40,40,[72,[100]]]]]],[[],[[29,[53,53]]]],[[],41],[54,[[29,[53,53]]]],[54,41],[[],[[77,[30,30]]]],[[],[[75,[30,30]]]],[[],42],[[],[[77,[30,30]]]],[[],[[75,[30,30]]]],[[[42,[[49,[33]]]],[42,[[49,[33]]]],33],[[42,[[49,[33]]]]]],[[[42,[[86,[33]]]],[42,[[86,[33]]]],33],[[42,[[86,[33]]]]]],[41],[[]],[[[29,[6,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[90,41]],[[91,41]],[[92,41]],[[]],[[[29,[6,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[[41,[43,30,30,[141,[43,30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]],9],[[],[[29,[53,53]]]],[[]],[[]],[[],9],[[],9],[[[41,[30,30]],[41,[30,30]]],[[13,[35]]]],[[[41,[[0,[43,52,103,51]],30,30,[47,[[0,[43,52,103,51]],30,30]]]],41],[[0,[43,52,103,51]]]],[[[41,[45,30,30,[44,[45,30,30]]]]]],[[41,24],29],[[41,24]],[[[42,[[49,[33]]]],33],[[42,[[49,[33]]]]]],[[[42,[[2,[33]]]],33],[[42,[[2,[33]]]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],[0,[43,38,34,51,52]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54],[[29,[[0,[43,38,34,51,52]],53,53]]]],[[[46,[[0,[43,38,34,51,52]],53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[[[41,[[0,[43,38,34,51,52]],53,53,[44,[[0,[43,38,34,51,52]],53,53]]]],54]],[152,[[29,[53,53]]]],[152,[[29,[53,53]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[41,[45,[107,[30]],30,[44,[45,[107,[30]],30]]]]],[[12,[[29,[45,30,[107,[30]]]],23]]]],[72],[[[77,[30,30,30,30]]]],[[[75,[30,30,30,30]]]],[[[74,[76,30]]]],[[[74,[53,76]]]],[72],[[[75,[30,30,30,30]]]],[[[74,[53,76]]]],[[[74,[76,30]]]],[[[54,[43,[136,[56]],[47,[43,[136,[56]]]]]],43],[[39,[43,[101,[[136,[56]],56]]]]]],[[[41,[43,[136,[56]],40,[47,[43,[136,[56]]]]]],43],[[39,[43,[101,[[136,[56]],56]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[153,[45,30,30]]]],[[[46,[30,[141,[30,30]]]],46,41]],[[[41,[[141,[30,30]]]],46,41]],[[[46,[30,[141,[30,30]]]],41,46]],[[[41,[[141,[30,30]]]],41,46]],[[[46,[30,[141,[30,30]]]],54,41,46]],[[[41,[[141,[30,30]]]],54,41,46]],[[[46,[30,[141,[30,30]]]],54,46,41]],[[[41,[[141,[30,30]]]],54,46,41]],[[[42,[[49,[33]]]]],49],[[[41,[45,[107,[30]],30,[44,[45,[107,[30]],30]]]]],9],[[[41,[30,30]],[41,[30,30]]],3],[[[41,[30,30,[47,[30,30]]]],41],3],[[[42,[[41,[30,30]]]],[42,[[41,[30,30]]]]],3],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,30,[102,[30,56]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,9],[[29,[43,30,76]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,76]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,30,[102,[30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,30,[102,[30,40]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,[102,[30,40]],30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,[102,[30,56]],30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,9],[[29,[43,76,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,76,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9],[[29,[43,[102,[30]],30]]]],[[[42,[151]]]],[[[42,[151]]]],[43,[[29,[43,53,53]]]],[[9,9,43],[[29,[43,76,76]]]],[[9,43],[[29,[43,76,53]]]],[[9,43],[[29,[43,53,76]]]],[43,[[41,[43,53,53]]]],[[9,9,43],[[41,[43]]]],[[9,43],[[41,[43,53]]]],[[9,43],[[41,[43,53]]]],[[30,30,43],[[29,[43,30,30]]]],[[30,30,43],[[41,[43,30,30]]]],[[29,9]],[[29,9]],[[72,40,40]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[41,[43]]]],[[[77,[56]]]],[[[75,[56]]]],[[[74,[76]],76]],[[[74,[76]],76]],[[[74,[76]],76]],[[[74,[76]],76]],[[[41,[43,30,30,[44,[43,30,30]]]],9,9,43],[[29,[43,76,76]]]],[[[74,[30,30]],9],[[78,[82]]]],[[[41,[43,30,30,[44,[43,30,30]]]],30,30,43],[[29,[43,30,30]]]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,30,76]]]],[[[29,[43,30,76]],9,43]],[[[41,[43,30]],9,43]],[[[29,[43,76,76]],9,9,43]],[[[41,[43]],9,9,43]],[[[41,[43,30,30,[44,[43,30,30]]]],9,43],[[29,[43,76,30]]]],[[[29,[43,76,30]],9,43]],[[[41,[43,30]],9,43]],[[[42,[[86,[33]]]]],[[84,[33]]]],[[54,54],[[13,[[42,[[49,[33]]]]]]]],[[54,54],[[42,[[2,[33]]]]]],[[42,42],[[42,[[2,[33]]]]]],[[42,42],[[13,[[42,[[49,[33]]]]]]]],[[[42,[[2,[33]]]],[42,[[2,[33]]]]],[[42,[[2,[33]]]]]],[[[42,[[49,[33]]]],[42,[[49,[33]]]]],[[42,[[49,[33]]]]]],[[[41,[30,30,[47,[30,30]]]],9],[[79,[56,30]]]],[[[41,[30,30,[47,[30,30]]]]],[[154,[30,30,[47,[30,30]]]]]],[[[41,[30,30,[47,[30,30]]]]],[[155,[30,30,[47,[30,30]]]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[99,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[30,30,[48,[30,30]]]],9],[[80,[56,30]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[56,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[56,76]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[99,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[99,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[99,[43,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],[[39,[43,30]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[76,30]]]],[[[41,[30,30,[47,[30,30]]]],9,30],[[79,[30,30]]]],[[[41,[30,30,[48,[30,30]]]],9,30],[[80,[30,30]]]],[[[41,[30,30,[47,[30,30]]]],9,9],[[79,[30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9],[[80,[76,30]]]],[[[41,[30,30,[47,[30,30]]]],[98,[30]]],[[79,[30]]]],[[[41,[30,30,[48,[30,30]]]],[98,[30]]],[[80,[30]]]],[[[41,[30,30,[47,[30,30]]]],[98,[30]],[98,[30]]]],[[[41,[30,30,[48,[30,30]]]],[98,[30]],[98,[30]]]],[[[41,[30,30,[47,[30,30]]]],9,9,9],[[79,[76,30,76]]]],[[[41,[30,30,[48,[30,30]]]],9,9,9],[[80,[76,30,76]]]],[[[41,[6,30,30,[47,[6,30,30]]]]],[[29,[6,30,30]]]],[[]],[[[29,[6,30,30]]]],[[[41,[6,30,30,[48,[6,30,30]]]]]],[[[42,[[49,[33]]]]],[[50,[33]]]],[[[42,[[2,[33]]]]],[[156,[33]]]],[[54,54,33],[[42,[[2,[33]]]]]],[[54,54,33],[[13,[[42,[[49,[33]]]]]]]],[[42,42,33],[[13,[[42,[[49,[33]]]]]]]],[[42,42,33],[[42,[[2,[33]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[157,[45,30]]]],[[[42,[[86,[33]]]],[42,[[86,[33]]]],33],[[42,[[86,[33]]]]]],[[29,29],29],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,76]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,76,30]]]],[[[41,[43,30,30,[48,[43,30,30]]]],9,54]],[[[41,[43,30,30,[48,[43,30,30]]]],54]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[41,[43,30,30,[48,[43,30,30]]]],152]],[[[41,[43,30,30,[48,[43,30,30]]]],9,158]],[72],[[[41,[30,30,[47,[30,30]]]]]],[[[77,[30,30,30,30]]]],[[[75,[30,30,30,30]]]],[[[74,[53,76]]]],[[[74,[76,30]]]],[[[41,[30,30,[47,[30,30]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[41,[43,30,30,[44,[43,30,30]]]]],[[159,[[29,[43,30,30]]]]]],[[[41,[43,30,30,[141,[43,30,30]]]]],159],[[[42,[[2,[33]]]]],33],[[[41,[45,[107,[30]],30,[44,[45,[107,[30]],30]]]]],[[39,[[160,[[107,[30]],30]]]]]],[[[41,[45,[107,[30]],30,[44,[45,[107,[30]],30]]]]],[[39,[[160,[[107,[30]],30]]]]]],[[]],[[[54,[[0,[43,38,34,52,103,51]],30,[44,[[0,[43,38,34,52,103,51]],30]]]],54,[0,[43,38,34,52,103,51]]],[[39,[[0,[43,38,34,52,103,51]],30]]]],[[[41,[[0,[43,38,34,52,103,51]],30,40,[44,[[0,[43,38,34,52,103,51]],30]]]],54,[0,[43,38,34,52,103,51]]],[[39,[[0,[43,38,34,52,103,51]],30]]]],[[[42,[[2,[33]]]],[42,[[2,[33]]]],33],[[42,[[2,[33]]]]]],[[[42,[[54,[100,30,[44,[100,30]]]]]],42,100],[[42,[[39,[100,30]]]]]],[[[42,[[49,[33]]]],[42,[[49,[33]]]],33],[[42,[[49,[33]]]]]],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76]]]],[[[41,[30,30,[47,[30,30]]]]],79],[[[41,[30,30,[48,[30,30]]]]],80],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76,76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76,76,76]]]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[[46,[45,30,[44,[45,30,30]]]],41,45],3],[[[41,[45,30,30,[44,[45,30,30]]]],41,45],3],[[[46,[6,30,[44,[6,30,30]]]],41,6]],[[[41,[6,30,30,[44,[6,30,30]]]],41,6]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[],29],0,[72],[[[41,[30,30,[47,[30,30]]]]]],[[[77,[30,30,30,30]]]],[[[75,[30,30,30,30]]]],[[[74,[53,76]]]],[[[74,[76,30]]]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[41,41]],[[[41,[30,30,[44,[30,30]]]],41,41]],[152,[[29,[53,53]]]],[152,[[29,[76,30]]]],[152,[[29,[53,53]]]],[152,[[29,[76,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[41,[43,30,30,[44,[43,30,30]]]],[41,[43,30,30,[44,[43,30,30]]]]],[[29,[43,30,30]]]],[[[41,[45,30,30,[44,[45,30,30]]]],3,3],[[161,[45,30,30]]]],[[[41,[45,30,30,[44,[45,30,30]]]],3,3],[[161,[45,30,30]]]],[[[41,[30,30,[48,[30,30]]]]]],[[[41,[43,30,30,[48,[43,30,30]]]],9,9]],[[[41,[43,30,30,[48,[43,30,30]]]],9,9]],[[[41,[30,30,[48,[30,30]]]]]],[[[54,[30]],46,54]],[[[41,[30,40]],46,54]],[[[41,[30,30,[141,[30,30]]]],54,54]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[162,[45,30]]]],[[[46,[45,[163,[56]],[44,[45,[163,[56]],[163,[56]]]]]]],[[39,[[163,[56]]]]]],[[[41,[45,[163,[56]],[163,[56]],[44,[45,[163,[56]],[163,[56]]]]]]],[[39,[[163,[56]]]]]],[[[46,[6,30,[44,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]]],[[29,[6,30,30]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[164,[45,30]]]],[[[42,[[49,[33]]]]]],[[[54,[[0,[43,38]],[136,[56]],[47,[[0,[43,38]],[136,[56]]]]]]],[[39,[[0,[43,38]],[101,[[136,[56]],56]]]]]],[[[41,[[0,[43,38,34]],[0,[[136,[56]],165]],[0,[[136,[56]],165]],[47,[[0,[43,38,34]],[0,[[136,[56]],165]],[0,[[136,[56]],165]]]]]]],[[29,[[0,[43,38,34]],[101,[[0,[[136,[56]],165]],56]],[101,[[0,[[136,[56]],165]],56]]]]]],[[[41,[[0,[43,38]],[136,[56]],40,[47,[[0,[43,38]],[136,[56]]]]]]],[[39,[[0,[43,38]],[101,[[136,[56]],56]]]]]],[[[42,[[86,[[0,[33,100]]]]]]],[[114,[[0,[33,100]]]]]],[[[42,[[49,[33]]]]],[[114,[33]]]],[[[42,[[2,[33]]]]],[[126,[33]]]],[[[42,[[86,[33]]]]],[[137,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[42,[[2,[33]]]]],[[124,[33]]]],[[[42,[[49,[33]]]]],[[108,[33]]]],[[],36],[[],36],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,29],[[[41,[30,30,[48,[30,30]]]],41]],[[[41,[30,30,[47,[30,30]]]],41]],[[[41,[30,30]],41],[[29,[30,30]]]],[[[41,[30,30]],41,41]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[[46,[45,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],41],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[44,[45,30,30]]]],41],3],[[[41,[45,30,30,[44,[45,30,30]]]],41],3],[[[46,[6,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[41,[6,30,30,[44,[6,30,30]]]],41],[[29,[6,30,30]]]],[[[46,[6,30,[44,[6,30,30]]]],41]],[[[41,[6,30,30,[44,[6,30,30]]]],41]],[[[46,[43,30,[47,[43,30,30]]]]],43],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[46,[100,40,[44,[100,40,40]]]],5],[[5,[100]]]],[[[46,[100,40,[44,[100,40,40]]]],5],[[5,[100]]]],[[[41,[100,[44,[100,40,40]]]],5],[[5,[100]]]],[[[41,[100,[44,[100,40,40]]]],5],[[5,[100]]]],[[[42,[[86,[33]]]],113],[[113,[33]]]],[[[42,[[49,[33]]]],113],[[113,[33]]]],[[[42,[[2,[33]]]],144],[[144,[33]]]],[[[46,[100,[166,[56]],[44,[100,[166,[56]],[166,[56]]]]]],39],[[39,[100,[167,[[166,[56]],56]]]]]],[[[41,[100,[166,[56]],[166,[56]],[44,[100,[166,[56]],[166,[56]]]]]],39],[[39,[100,[167,[[166,[56]],56]]]]]],[[[42,[[86,[33]]]],50],[[50,[33]]]],[[[42,[[2,[33]]]],145],[[145,[33]]]],[[[42,[[49,[33]]]],50],[[50,[33]]]],[[[42,[[86,[33]]]]],[[138,[33]]]],[[[41,[30,30,[47,[30,30]]]]],[[29,[30,30]]]],[[[41,[43,30,30,[48,[43,30,30]]]]]],[[[41,[30,30,[47,[30,30]]]],41]],[[[41,[30,30,[47,[30,30]]]]],[[13,[[29,[43,30,30]]]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[46,[45,30,[44,[45,30,30]]]]],[[13,[[29,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]]],[[13,[[29,[45,30,30]]]]]],[[[46,[45,30,[141,[45,30,30]]]]],3],[[[41,[45,30,30,[141,[45,30,30]]]]],3],[151,[[13,[[42,[151]]]]]],[151,13],[[[41,[43,30,30,[44,[43,30,30]]]]],[[13,[[29,[43,30,30]]]]]],[[[41,[43,30,30,[141,[43,30,30]]]]],13],[[[41,[45,30,30,[44,[45,30,30]]]],9],13],[[[41,[45,30,30,[44,[45,30,30]]]],9],[[13,[[157,[45,30]]]]]],[[[42,[[86,[33]]]],[42,[[86,[33]]]],33,33],[[13,[[42,[[86,[33]]]]]]]],[[[41,[43,30,30,[44,[43,30,30]]]]]],[[[42,[[49,[33]]]],[42,[[49,[33]]]],33,33],[[13,[[42,[[49,[33]]]]]]]],[[[42,[[54,[100,30,[44,[100,30]]]]]],42,100,100],[[13,[[42,[[39,[100,30]]]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],3,3,9],[[13,[[161,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],3,3,9],[[13,[[161,[45,30,30]]]]]],[[[41,[45,30,30,[44,[45,30,30]]]],9],[[13,[[162,[45,30]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[41,[45,30,30,[44,[45,30,30]]]]],[[13,[[168,[45,30]]]]]],[[[41,[30,30]],[41,[30,30]],24],3],[[[42,[[41,[30,30]]]],[42,[[41,[30,30]]]],24],3],0,[[30,30],[[81,[43,30,30]]]],[[30,30],[[41,[[82,[43]],30,30]]]],[[[41,[6,30,30,[47,[6,30,30]]]]],[[29,[6,30,30]]]],[[]],[[[29,[6,30,30]]]],[[[41,[6,30,30,[48,[6,30,30]]]]]],[42],[[[41,[[0,[43,38]],30,30,[44,[[0,[43,38]],30,30]]]]],[[29,[[0,[43,38]],30,30]]]],[[[41,[43,30,30,[47,[43,30,30]]]]],43],[[[41,[30,30,[47,[30,30]]]],9]],[[[54,[30,[47,[30]]]],9]],[[[41,[30,40,[47,[30]]]],9]],[[[54,[30,[48,[30]]]],9]],[[[41,[30,40,[48,[30]]]],9]],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76]]]],[[[41,[30,30,[47,[30,30]]]]],79],[[[41,[30,30,[48,[30,30]]]]],80],[[[41,[30,30,[47,[30,30]]]]],[[79,[76,76,76,76]]]],[[[41,[30,30,[48,[30,30]]]]],[[80,[76,76,76,76]]]],[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[],39],[[],[[41,[40]]]],[[],[[42,[39]]]],[[],[[42,[[41,[40]]]]]],[[],[[29,[53,53]]]],[9,[[29,[43,53,76]]]],[[9,9],[[29,[43,76,76]]]],[[],[[29,[43,53,53]]]],[9,[[29,[43,76,53]]]],[[9,9],[[41,[43]]]],[9,[[41,[43,53]]]],[9,[[41,[43,53]]]],[[],[[41,[43,53,53]]]],[[30,30],[[29,[43,30,30]]]],[[30,30],[[41,[43,30,30]]]],[[[41,[30,30,[47,[30,30]]]],41,55]],[[[41,[30,30,[47,[30,30]]]],41,55]],[[[41,[30,30,[47,[30,30]]]],41],[[29,[30,30]]]],[[[41,[30,30,[47,[30,30]]]],41,41,55]],[[[41,[30,30,[47,[30,30]]]],41,41],[[29,[30,30]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[145,[43]]]],[[[41,[43,40,[47,[43]]]]],[[145,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],[[[54,[43,[47,[43]]]]],[[50,[43]]]],[[[41,[43,40,[47,[43]]]]],[[50,[43]]]],0,0,0,0,0,0,0,0,[111],[111],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[169,169],[[]],[[169,10],116],[[]],[[]],[[]],[[],3],[[]],[[],13],[[]],[[],12],[[],12],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[170,[[0,[89,43]]]]],[[170,[[0,[89,43]]]]]],[[[171,[[0,[89,43]]]]],[[171,[[0,[89,43]]]]]],[[[172,[[0,[89,43]]]]],[[172,[[0,[89,43]]]]]],[[[173,[[0,[89,43]]]]],[[173,[[0,[89,43]]]]]],[[[174,[[0,[89,43]]]]],[[174,[[0,[89,43]]]]]],[[[175,[[0,[89,43]]]]],[[175,[[0,[89,43]]]]]],[[[176,[[0,[89,43]]]]],[[176,[[0,[89,43]]]]]],[[[177,[[0,[89,43]]]]],[[177,[[0,[89,43]]]]]],[[[178,[[0,[89,43]]]]],[[178,[[0,[89,43]]]]]],[[[179,[[0,[89,43]]]]],[[179,[[0,[89,43]]]]]],[[[180,[[0,[89,43]]]]],[[180,[[0,[89,43]]]]]],[[[181,[[0,[89,43]]]]],[[181,[[0,[89,43]]]]]],[[[182,[[0,[89,43]]]]],[[182,[[0,[89,43]]]]]],[[[183,[[0,[89,43]]]]],[[183,[[0,[89,43]]]]]],[[[184,[[0,[89,43]]]]],[[184,[[0,[89,43]]]]]],[[[185,[[0,[89,43]]]]],[[185,[[0,[89,43]]]]]],[[[186,[[0,[89,43]]]]],[[186,[[0,[89,43]]]]]],[[[187,[[0,[89,43]]]]],[[187,[[0,[89,43]]]]]],[[[188,[[0,[89,43]]]]],[[188,[[0,[89,43]]]]]],[[[189,[[0,[89,43]]]]],[[189,[[0,[89,43]]]]]],[[[190,[[0,[89,43]]]]],[[190,[[0,[89,43]]]]]],[[[191,[[0,[89,43]]]]],[[191,[[0,[89,43]]]]]],[[[192,[[0,[89,43]]]]],[[192,[[0,[89,43]]]]]],[[[193,[[0,[89,43]]]]],[[193,[[0,[89,43]]]]]],[[[194,[[0,[89,43]]]]],[[194,[[0,[89,43]]]]]],[[[195,[[0,[89,43]]]]],[[195,[[0,[89,43]]]]]],[[[196,[[0,[89,43]]]]],[[196,[[0,[89,43]]]]]],[[[197,[[0,[89,43]]]]],[[197,[[0,[89,43]]]]]],[[[198,[[0,[89,43]]]]],[[198,[[0,[89,43]]]]]],[[[199,[[0,[89,43]]]]],[[199,[[0,[89,43]]]]]],[[[200,[[0,[89,43]]]]],[[200,[[0,[89,43]]]]]],[[[201,[[0,[89,43]]]]],[[201,[[0,[89,43]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[170,[[0,[110,43]]]],170],3],[[[171,[[0,[110,43]]]],171],3],[[[172,[[0,[110,43]]]],172],3],[[[173,[[0,[110,43]]]],173],3],[[[174,[[0,[110,43]]]],174],3],[[[175,[[0,[110,43]]]],175],3],[[[176,[[0,[110,43]]]],176],3],[[[177,[[0,[110,43]]]],177],3],[[[178,[[0,[110,43]]]],178],3],[[[179,[[0,[110,43]]]],179],3],[[[180,[[0,[110,43]]]],180],3],[[[181,[[0,[110,43]]]],181],3],[[[182,[[0,[110,43]]]],182],3],[[[183,[[0,[110,43]]]],183],3],[[[184,[[0,[110,43]]]],184],3],[[[185,[[0,[110,43]]]],185],3],[[[186,[[0,[110,43]]]],186],3],[[[187,[[0,[110,43]]]],187],3],[[[188,[[0,[110,43]]]],188],3],[[[189,[[0,[110,43]]]],189],3],[[[190,[[0,[110,43]]]],190],3],[[[191,[[0,[110,43]]]],191],3],[[[192,[[0,[110,43]]]],192],3],[[[193,[[0,[110,43]]]],193],3],[[[194,[[0,[110,43]]]],194],3],[[[195,[[0,[110,43]]]],195],3],[[[196,[[0,[110,43]]]],196],3],[[[197,[[0,[110,43]]]],197],3],[[[198,[[0,[110,43]]]],198],3],[[[199,[[0,[110,43]]]],199],3],[[[200,[[0,[110,43]]]],200],3],[[[201,[[0,[110,43]]]],201],3],[[[170,[[0,[115,43]]]],10],116],[[[171,[[0,[115,43]]]],10],116],[[[172,[[0,[115,43]]]],10],116],[[[173,[[0,[115,43]]]],10],116],[[[174,[[0,[115,43]]]],10],116],[[[175,[[0,[115,43]]]],10],116],[[[176,[[0,[115,43]]]],10],116],[[[177,[[0,[115,43]]]],10],116],[[[178,[[0,[115,43]]]],10],116],[[[179,[[0,[115,43]]]],10],116],[[[180,[[0,[115,43]]]],10],116],[[[181,[[0,[115,43]]]],10],116],[[[182,[[0,[115,43]]]],10],116],[[[183,[[0,[115,43]]]],10],116],[[[184,[[0,[115,43]]]],10],116],[[[185,[[0,[115,43]]]],10],116],[[[186,[[0,[115,43]]]],10],116],[[[187,[[0,[115,43]]]],10],116],[[[188,[[0,[115,43]]]],10],116],[[[189,[[0,[115,43]]]],10],116],[[[190,[[0,[115,43]]]],10],116],[[[191,[[0,[115,43]]]],10],116],[[[192,[[0,[115,43]]]],10],116],[[[193,[[0,[115,43]]]],10],116],[[[194,[[0,[115,43]]]],10],116],[[[195,[[0,[115,43]]]],10],116],[[[196,[[0,[115,43]]]],10],116],[[[197,[[0,[115,43]]]],10],116],[[[198,[[0,[115,43]]]],10],116],[[[199,[[0,[115,43]]]],10],116],[[[200,[[0,[115,43]]]],10],116],[[[201,[[0,[115,43]]]],10],116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[170,[[0,[142,43]]]]]],[[[171,[[0,[142,43]]]]]],[[[172,[[0,[142,43]]]]]],[[[173,[[0,[142,43]]]]]],[[[174,[[0,[142,43]]]]]],[[[175,[[0,[142,43]]]]]],[[[176,[[0,[142,43]]]]]],[[[177,[[0,[142,43]]]]]],[[[178,[[0,[142,43]]]]]],[[[179,[[0,[142,43]]]]]],[[[180,[[0,[142,43]]]]]],[[[181,[[0,[142,43]]]]]],[[[182,[[0,[142,43]]]]]],[[[183,[[0,[142,43]]]]]],[[[184,[[0,[142,43]]]]]],[[[185,[[0,[142,43]]]]]],[[[186,[[0,[142,43]]]]]],[[[187,[[0,[142,43]]]]]],[[[188,[[0,[142,43]]]]]],[[[189,[[0,[142,43]]]]]],[[[190,[[0,[142,43]]]]]],[[[191,[[0,[142,43]]]]]],[[[192,[[0,[142,43]]]]]],[[[193,[[0,[142,43]]]]]],[[[194,[[0,[142,43]]]]]],[[[195,[[0,[142,43]]]]]],[[[196,[[0,[142,43]]]]]],[[[197,[[0,[142,43]]]]]],[[[198,[[0,[142,43]]]]]],[[[199,[[0,[142,43]]]]]],[[[200,[[0,[142,43]]]]]],[[[201,[[0,[142,43]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[40,40,111]],[[53,76,111]],[[76,30,111]],[[40,40],[[72,[[82,[43]]]]]],[[53,76],[[74,[[82,[43]],53,76]]]],[[76,30],[[74,[[82,[43]],76,30]]]],[[[72,[[82,[43]]]]],[[72,[43]]]],[[[74,[[82,[43]],53,76]]],[[74,[43,53,76]]]],[[[74,[[82,[43]],76,30]]],[[74,[43,76,30]]]],[[]],[[]],[202,202],[[]],[[202,10],116],[[]],[[]],[[]],[[],3],[[40,40],[[72,[[82,[43]]]]]],[[76,[72,[43]]],[[74,[[82,[43]],76]]]],[[76,30,[74,[43,76,30]]],[[74,[[82,[43]],76,30]]]],[[53,76,[74,[43,76,30]]],[[74,[[82,[43]],53,76]]]],[[76,30,[74,[43,53,76]]],[[74,[[82,[43]],76,30]]]],[[53,76,[74,[43,53,76]]],[[74,[[82,[43]],53,76]]]],[[76,[72,[43]]],[[74,[[82,[43]],76]]]],[[]],[[],13],[[]],[[],12],[[],12],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[76,9],76],[[76,30],76],[[40,40]],[76,76],[[40,40]],[[]],[[]],[[]],[[]],[76,76],[40,40],[[]],[[]],[[],9],[[],9],[[]],[[]],[[76,30],76],[[40,40]],[[40,40]],[76,76],[[76,76],3],[[40,40],3],[[76,10],116],[[40,10],116],[[]],[[]],[[]],[[]],[9],[9,76],[9,40],[40],[[]],[[]],[[],3],[[],3],[[],3],[[]],[[]],[[76,30],76],[[40,40]],[[40,40]],[76,76],[[]],[[]],[[76,30],76],[76,76],[[40,40]],[[40,40]],[[]],[[]],[[76,30],76],[76,76],[[40,40]],[[40,40]],[[]],[[],40],[9,76],[[]],[[]],[[76,9],76],[[76,30],76],[[40,40]],[[40,40]],[76,76],[[]],[[]],[[],13],[[],13],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],[[13,[9]]]],[[],[[13,[9]]]],[[],[[13,[9]]]],[[],37],[[],37],[[],9],[76,9],[40,9],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[89,[0,[89,30]],[0,[89,30]],[0,[89,[47,[89,[0,[89,30]],[0,[89,30]]]]]]]]],[[154,[89,[0,[89,30]],[0,[89,30]],[0,[89,[47,[89,[0,[89,30]],[0,[89,30]]]]]]]]]],[[[96,[89,[0,[89,30]],[0,[89,30]],[0,[89,[47,[89,[0,[89,30]],[0,[89,30]]]]]]]]],[[96,[89,[0,[89,30]],[0,[89,30]],[0,[89,[47,[89,[0,[89,30]],[0,[89,30]]]]]]]]]],[[]],[[]],[[[146,[30,30,[47,[30,30]]]]],9],[[[147,[30,30,[48,[30,30]]]]],9],[[[154,[30,30,[47,[30,30]]]]],9],[[[155,[30,30,[48,[30,30]]]]],9],[[[96,[30,30,[47,[30,30]]]]],9],[[[97,[30,30,[48,[30,30]]]]],9],[[[146,[115,[0,[115,30]],[0,[115,30]],[0,[115,[47,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[[147,[115,[0,[115,30]],[0,[115,30]],[0,[115,[48,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[[154,[115,[0,[115,30]],[0,[115,30]],[0,[115,[47,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[[155,[115,[0,[115,30]],[0,[115,30]],[0,[115,[48,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[[96,[115,[0,[115,30]],[0,[115,30]],[0,[115,[47,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[[97,[115,[0,[115,30]],[0,[115,30]],[0,[115,[48,[115,[0,[115,30]],[0,[115,30]]]]]]]],10],116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[146,[30,30,[47,[30,30]]]]],9],[[[147,[30,30,[48,[30,30]]]]],9],[[[154,[43,30,30,[47,[43,30,30]]]]],9],[[[155,[43,30,30,[48,[43,30,30]]]]],9],[[[96,[43,30,30,[47,[43,30,30]]]]],9],[[[97,[43,30,30,[48,[43,30,30]]]]],9],[[],[[146,[30,30,[47,[30,30]]]]]],[[],[[147,[30,30,[48,[30,30]]]]]],[[[146,[30,30,[47,[30,30]]]]],13],[[[147,[30,30,[48,[30,30]]]]],13],[[[154,[30,30,[47,[30,30]]]]],13],[[[155,[30,30,[48,[30,30]]]]],13],[[[96,[30,30,[47,[30,30]]]]],13],[[[97,[30,30,[48,[30,30]]]]],13],[[[146,[30,30,[47,[30,30]]]]],13],[[[147,[30,30,[48,[30,30]]]]],13],[[[96,[30,30,[47,[30,30]]]]],13],[[[97,[43,30,30,[48,[43,30,30]]]]],13],[[[146,[30,30,[47,[30,30]]]]]],[[[147,[30,30,[48,[30,30]]]]]],[[[154,[30,30,[47,[30,30]]]]]],[[[155,[30,30,[48,[30,30]]]]]],[[[96,[30,30,[47,[30,30]]]]]],[[[97,[30,30,[48,[30,30]]]]]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],93],[[9,9]],[9],[9],[[9,9]],[[9,9]],[9],[9],[[9,9]],[[],93],[[],3],[[9,9],9],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9]],0,0,0,0,[[]],[[]],[82],[[]],[[]],[82],[[]],[[]],[[]],[[]],[203,203],[204,204],[[]],[[]],[[203,203],3],[[204,204],3],[[203,10],116],[[204,10],116],[[]],[[]],[[]],[[]],[[]],[[]],[82],[[]],[[]],[[],3],[[],3],[[]],[[]],[[],13],[[],13],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],37],[[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[84,[[0,[100,205]]]],[84,[[0,[100,205]]]]],3],[[[87,[[0,[100,205]]]],[87,[[0,[100,205]]]]],3],[[[85,[100]],[85,[100]]],3],[[[119,[100,206]],[119,[100,206]]],3],[[[130,[[0,[43,205]],53]],[130,[[0,[43,205]],53]]],3],[[108,108],3],[[[49,[[0,[100,205]]]],[49,[[0,[100,205]]]]],3],[[[86,[[0,[100,205]]]],[86,[[0,[100,205]]]]],3],[[[120,[[0,[43,205]]]],[120,[[0,[43,205]]]]],3],[[[122,[[0,[43,205]]]],[122,[[0,[43,205]]]]],3],[[[117,[100]],[117,[100]]],3],[[[121,[100]],[121,[100]]],3],[[[49,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[130,54]],[[130,54]],[[130,54]],[[130,54]],[[49,49]],[[[49,[33]],49]],[[49,[49,[33]]]],[[[49,[33]],[49,[33]]]],[[[86,[33]],[86,[33]]]],[[[86,[33]],86]],[[86,[86,[33]]]],[[86,86]],[[[130,[53]],[54,[30]]]],[[[130,[53]],54]],[[[49,[33]],49]],[[[49,[33]],[49,[33]]]],[[[86,[33]],86]],[[[86,[33]],[86,[33]]]],[[[124,[33]]],33],[[[125,[33]]],33],[[[84,[33]]],33],[[[85,[33]]],33],[[[108,[33]]],33],[[[108,[33]]],33],[[[124,[33]],[124,[33]]],33],[[[125,[33]],[125,[33]]],33],[[[84,[33]],[84,[33]]],33],[[[85,[33]],[85,[33]]],33],[[[108,[33]],[108,[33]]],33],[[[108,[33]],[108,[33]]],33],[[[84,[33]],50],[[84,[33]]]],[[[117,[33,[207,[33]]]]]],[[[121,[33]]]],[[[117,[33,[207,[33]]]]]],[[[121,[33]]]],[[[117,[33,[207,[33]]]],5]],[[[121,[33]],5]],[[[121,[33]],33],[[121,[33]]]],[[[121,[33]],33]],[[[117,[33,[207,[33]]]],120]],[[[121,[33]],120]],[[[130,[43,53]],55]],[[[128,[100]]],114],[[[127,[100]]],114],[[[86,[33]]]],[[[128,[100]]],208],[[[127,[100]]],208],[[[86,[33]]]],[[[49,[33]]],209],[[[49,[33]]],209],[[[49,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[127,[100]]],100],[[[49,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[125,[33]]],[[13,[[42,[[50,[33]]]]]]]],[[[84,[33]]],[[13,[[42,[[50,[33]]]]]]]],[[[210,[45,30,[44,[45,30]]]]],54],[[[108,[33]]],[[13,[[42,[[50,[33]]]]]]]],[[[125,[33]]],13],[[[84,[33]]],13],[[[85,[33]]],13],[[[108,[33]]],13],[[[210,[45,30,[44,[45,30]]]]],45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[100]]],100],[[[84,[33]]],84],[[[87,[33]]],[[87,[43]]]],[[[85,[33]]],[[85,[43]]]],[[[211,[33]]],[[211,[43]]]],[[[137,[33]]],[[137,[43]]]],[[[212,[33]]],[[212,[43]]]],[[[213,[33]]],[[213,[43]]]],[[[130,[43,53]]],[[130,[43,53]]]],[[[108,[43]]],[[108,[43]]]],[49,49],[[[86,[43]]],[[86,[43]]]],[[[120,[43]]],[[120,[43]]]],[[[122,[43]]],[[122,[43]]]],[[[117,[33,[42,[[2,[33]]]]]]],[[211,[43]]]],[[[117,[33,[42,[[49,[33]]]]]]],[[137,[43]]]],[[[117,[33,[108,[33]]]]],[[213,[43]]]],[[[117,[33,[108,[33]]]]],[[212,[43]]]],[[[121,[33,[124,[33]]]]],[[121,[43,[124,[43]]]]]],[[[121,[33,[85,[33]]]]],[[121,[43,[85,[43]]]]]],[[[121,[33,[125,[33]]]]],[[121,[43,[125,[43]]]]]],[[[121,[33,[84,[33]]]]],[[121,[43,[84,[43]]]]]],[29,3],[29,3],[29,3],[29,3],[[[119,[100,206]]],[[119,[100,206]]]],[[[130,[[0,[89,43]],[0,[89,53]]]]],[[130,[[0,[89,43]],[0,[89,53]]]]]],[[[108,[89]]],[[108,[89]]]],[[[49,[89]]],[[49,[89]]]],[[[86,[89]]],[[86,[89]]]],[[[120,[89]]],[[120,[89]]]],[[[122,[89]]],[[122,[89]]]],[[[117,[89,89]]],[[117,[89,89]]]],[[[121,[89,89]]],[[121,[89,89]]]],[214,214],[215,215],[216,216],[[[128,[89]]],[[128,[89]]]],[[[127,[89]]],[[127,[89]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[100,206]]],[[119,[100,206]]]],[[[49,[33]]],[[49,[33]]]],[[[85,[33]]],2],[[[84,[33]]],[[84,[33]]]],[[[87,[33]]],[[87,[33]]]],[[[85,[33]]],[[85,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[86,[33]]],[[86,[33]]]],[[[84,[33]]]],[[[87,[33]]]],[[[85,[33]]]],[[[49,[33]]]],[[[86,[33]]]],0,0,[[[49,[33]]],[[49,[33]]]],[[[85,[33]]],33],[[[49,[33]]],[[49,[33]]]],[[],[[84,[100]]]],[[],[[87,[100]]]],[[],[[85,[33]]]],[[],[[119,[100,206]]]],[[],[[130,[[0,[43,38]],53]]]],[[],108],[[],[[49,[[0,[43,38]]]]]],[[],[[86,[[0,[43,38]]]]]],[[],[[120,[[0,[43,38]]]]]],[[],[[117,[33,[207,[33]]]]]],[[],[[121,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[[130,[43,60]]]],[[[130,[43,56]]]],[[[130,[43,61]]]],[[[130,[43,58]]]],[[[130,[43,62]]]],[[[130,[43,59]]]],[[[49,[[0,[43,217]]]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[130,[43,58]]]],[[[130,[43,62]]]],[[[130,[43,59]]]],[[[130,[43,61]]]],[[[130,[43,60]]]],[[[130,[43,56]]]],[[[49,[[0,[43,217]]]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[120,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[[122,[43]]]],[[84,119]],[[84,[117,[33,[84,[33]]]]]],[[[84,[33]],[117,[33,[84,[33]]]]]],[[[84,[33]],[87,[33]]]],[[[84,[33]],87]],[[84,[87,[33]]]],[[[84,[33]],117]],[[84,87]],[[84,117]],[[84,119]],[[84,121]],[[84,84]],[[84,119]],[[84,119]],[[84,[84,[33]]]],[[[84,[33]],84]],[[[84,[33]],[84,[33]]]],[[84,108]],[[[84,[33]],[121,[33,[84,[33]]]]]],[[84,[108,[33]]]],[[[84,[33]],108]],[[[84,[33]],[108,[33]]]],[[84,[121,[33,[84,[33]]]]]],[[[84,[33]],121]],[[[87,[33]],[138,[33]]]],[[[87,[33]],87]],[[87,[138,[33]]]],[[[87,[33]],[137,[33]]]],[[[87,[33]],[84,[33]]]],[[[87,[33]],137]],[[[87,[33]],84]],[[[87,[33]],138]],[[87,138]],[[87,[137,[33]]]],[[87,[84,[33]]]],[[87,84]],[[[87,[33]],[87,[33]]]],[[87,137]],[[87,87]],[[87,[87,[33]]]],[[[85,[33]],85]],[[[85,[33]],108]],[[85,[108,[33]]]],[[85,108]],[[[85,[33]],[85,[33]]]],[[85,[85,[33]]]],[[[85,[33]],[108,[33]]]],[[85,85]],[[[138,[33]],87]],[[[138,[33]],[87,[33]]]],[[138,[87,[33]]]],[[138,87]],[[[137,[33]],87]],[[137,87]],[[[137,[33]],[87,[33]]]],[[137,[87,[33]]]],[[119,108]],[[119,119]],[[119,119]],[[119,119]],[[119,119]],[[119,108]],[[119,108]],[[119,108]],[[119,84]],[[119,84]],[[119,84]],[[119,84]],[[119,120]],[[119,120]],[[119,120]],[[119,120]],[[[130,[[0,[43,218]],53]],[0,[43,218]]]],[[130,[0,[43,218]]]],[[108,[117,[33,[108,[33]]]]]],[[108,119]],[[108,[84,[33]]]],[[[108,[33]],84]],[[[108,[33]],117]],[[108,108]],[[[108,[33]],[117,[33,[108,[33]]]]]],[[[108,[33]],[85,[33]]]],[[108,[85,[33]]]],[[[108,[33]],85]],[[108,85]],[[108,108]],[[108,108]],[[108,108]],[[108,119]],[[108,117]],[[[108,[33]],[84,[33]]]],[[108,119]],[[[108,[33]],[121,[33,[108,[33]]]]]],[[108,84]],[[108,[121,[33,[108,[33]]]]]],[[[108,[33]],121]],[[108,119]],[[108,121]],[[49,33]],[[[49,[33]],33]],[[[86,[33]],87]],[[86,[87,[33]]]],[[86,87]],[[[86,[33]],33]],[[[86,[33]],[87,[33]]]],[[86,33]],[[120,120]],[[120,120]],[[120,120]],[[120,119]],[[120,120]],[[120,119]],[[120,119]],[[120,119]],[[117,117]],[[[117,[33,[108,[33]]]],[108,[33]]]],[[[117,[33,[84,[33]]]],[84,[33]]]],[[117,[84,[33]]]],[[117,108]],[[[117,[33]],[117,[33]]]],[[117,[117,[33]]]],[[[117,[33]],117]],[[[117,[33,[84,[33]]]],84]],[[117,84]],[[[117,[33,[85,[33]]]],[85,[33]]]],[[117,[85,[33]]]],[[[117,[33,[85,[33]]]],85]],[[117,85]],[[[117,[33,[108,[33]]]],108]],[[117,[108,[33]]]],[[117,121]],[[[117,[33]],121]],[[117,[121,[33]]]],[[[117,[33]],[121,[33]]]],[[121,121]],[[[121,[33]],[121,[33]]]],[[[121,[33,[108,[33]]]],[108,[33]]]],[[[121,[33]],121]],[[[121,[33,[84,[33]]]],84]],[[121,[121,[33]]]],[[[121,[33,[108,[33]]]],108]],[[121,[84,[33]]]],[[121,84]],[[[121,[33]],117]],[[[121,[33]],[117,[33]]]],[[[121,[33,[85,[33]]]],[85,[33]]]],[[121,85]],[[121,[85,[33]]]],[[[121,[33,[85,[33]]]],85]],[[121,108]],[[121,[108,[33]]]],[[121,117]],[[121,[117,[33]]]],[[[121,[33,[84,[33]]]],[84,[33]]]],[[[84,[33]],84]],[[[84,[33]],[84,[33]]]],[[[84,[33]],108]],[[[84,[33]],[108,[33]]]],[[[87,[33]],84]],[[[87,[33]],137]],[[[87,[33]],[138,[33]]]],[[[87,[33]],138]],[[[87,[33]],[84,[33]]]],[[[87,[33]],[87,[33]]]],[[[87,[33]],[137,[33]]]],[[[87,[33]],87]],[[[85,[33]],[85,[33]]]],[[[85,[33]],108]],[[[85,[33]],[108,[33]]]],[[[85,[33]],85]],[[119,85]],[[119,85]],[[119,84]],[[119,108]],[[119,84]],[[119,108]],[[119,119]],[[119,119]],[[119,120]],[[119,120]],[[[130,[[0,[43,218]],53]],[0,[43,218]]]],[[108,108]],[[108,108]],[[[108,[33]],[85,[33]]]],[[[108,[33]],85]],[[[49,[33]],33]],[[[86,[33]],33]],[[[86,[33]],87]],[[[86,[33]],[87,[33]]]],[[120,120]],[[120,120]],[[[117,[33]],[117,[33]]]],[[[117,[108]],108]],[[[117,[85]],85]],[[[117,[85]],85]],[[[117,[84]],84]],[[[117,[108]],108]],[[[117,[84]],84]],[[[117,[33]],117]],[[[121,[108]],108]],[[[121,[108]],108]],[[[121,[33]],117]],[[[121,[33]],[117,[33]]]],[[[121,[33]],121]],[[[121,[33]],[121,[33]]]],[[[121,[84]],84]],[[[121,[84]],84]],[[[121,[85]],85]],[[[121,[85]],85]],[[[49,[33]],[49,[33]]],33],0,[[[87,[33]]],86],[[[84,[[0,[43,150,110]]]],[84,[[0,[43,150,110]]]]],3],[[[87,[[0,[43,150,110,33]]]],[87,[[0,[43,150,110,33]]]]],3],[[[85,[[0,[43,110]]]],[85,[[0,[43,110]]]]],3],[[[119,[100,206]],[119,[100,206]]],3],[[[130,[43,53]],[130,[43,53]]],3],[[[108,[[0,[43,110]]]],[108,[[0,[43,110]]]]],3],[[[49,[43]],[49,[43]]],3],[[[86,[43]],[86,[43]]],3],[[[120,[[0,[43,110]]]],120],3],[[[122,[[0,[43,110]]]],122],3],[[[117,[33]],[117,[33]]],3],[[[121,[33]],[121,[33]]],3],[[214,214],3],[[215,215],3],[[216,216],3],[[[128,[100]],[128,[100]]],3],[[[127,[100]],[127,[100]]],3],[[[125,[33]]]],[[[84,[33]]]],[[[108,[33]]]],[[[84,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[49,[33]],33],[[49,[33]]]],[[[5,[[0,[43,217]]]],9]],[[[84,[[0,[43,217]]]],9]],[[[85,[33]],9]],[[[119,[100]],9]],[[108,9]],[[[49,[[0,[43,217]]]],9]],[[[120,[[0,[43,217]]]],9]],[[[122,[[0,[43,217]]]],9]],[[[117,[33]],9]],[[[121,[33]],9]],[[[5,[[0,[43,217]]]],9]],[[[84,[[0,[43,217]]]],9]],[[[85,[33]],9]],[[[119,[100]],9]],[[108,9]],[[[49,[[0,[43,217]]]],9]],[[[120,[[0,[43,217]]]],9]],[[[122,[[0,[43,217]]]],9]],[[[117,[33]],9]],[[[121,[33]],9]],[[54,54],[[125,[33]]]],[[54,54],[[84,[33]]]],[[113,113,50],[[137,[33]]]],[[113,113,50],[[213,[33]]]],[[54,54],[[108,[33]]]],[[113,113,50],[[117,[33,[42,[[49,[33]]]]]]]],[[113,113,50],[[117,[33,[108,[33]]]]]],[[113,113,50,33],[[121,[33,[125,[33]]]]]],[[113,113,50,33],[[121,[33,[84,[33]]]]]],[[[84,[[0,[100,219]]]],10],116],[[[87,[[0,[100,219]]]],10],116],[[[85,[[0,[100,219]]]],10],116],[[[119,[[0,[100,115]],206]],10],[[12,[11]]]],[[[130,[[0,[43,219]],53]],10],116],[[[130,[[0,[43,115]],53]],10],[[12,[11]]]],[[108,10],116],[[[108,[115]],10],[[12,[11]]]],[[[49,[115]],10],[[12,[11]]]],[[[49,[[0,[100,219]]]],10],116],[[[86,[115]],10],116],[[[120,[115]],10],[[12,[11]]]],[[[120,[[0,[43,219]]]],10],116],[[[122,[[0,[43,219]]]],10],116],[[[122,[115]],10],[[12,[11]]]],[[[117,[[0,[100,219]]]],10],116],[[[117,[115,115]],10],116],[[121,10],116],[[[121,[115,115]],10],116],[[214,10],116],[[215,10],116],[[216,10],116],[[[128,[100]],10],[[12,[11]]]],[[[127,[100]],10],[[12,[11]]]],[[[127,[100]]],100],[[],[[5,[43]]]],[[],5],[[],5],[[],5],[[],5],[[[85,[33]]],[[124,[33]]]],[[[84,[33]]],[[125,[33]]]],[[],84],[[],84],[[],84],[[],84],[[[125,[33]]],[[84,[33]]]],[[[137,[33]]],[[87,[33]]]],[[[124,[33]]],[[85,[33]]]],[[],85],[[],85],[[],85],[[],85],[[[87,[33]]],[[137,[33]]]],[[]],[[]],[[]],[[[39,[43,53]]],[[130,[43,53]]]],[[]],[[],108],[[],108],[[],108],[[],108],[[],[[49,[43]]]],[[],49],[[],49],[[[209,[43]]],[[49,[43]]]],[[]],[[],49],[[],49],[[]],[[],120],[[],120],[[],120],[[],120],[[]],[[[39,[43,40]]],[[120,[43]]]],[[],[[120,[43]]]],[[[5,[43]]],[[120,[43]]]],[[],122],[[]],[[],122],[[],122],[[],122],[[[39,[43,40]]],[[122,[43]]]],[[],[[122,[43]]]],[[[5,[43]]],[[122,[43]]]],[[[5,[33]]],[[117,[33]]]],[[[131,[33]]],[[117,[33]]]],[[],[[117,[33]]]],[[[120,[33]]],[[117,[33,[207,[33]]]]]],[[],117],[[],117],[[],117],[[]],[[],117],[[],121],[[],121],[[],121],[[],121],[[]],[[]],[[]],[[]],[[]],[[]],[33,[[85,[33]]]],[[42,33],[[125,[33]]]],[[42,33],[[84,[33]]]],[[42,33],[[108,[33]]]],[[],[[124,[33]]]],[[],[[125,[33]]]],[[],[[84,[33]]]],[[],[[85,[33]]]],[[],[[108,[33]]]],[[],[[108,[33]]]],[[[2,[33]]],[[85,[33]]]],[[[2,[33]]]],[[[39,[43,53]]],[[130,[43,53]]]],[[33,33],[[85,[33]]]],[[33,33,33],[[125,[33]]]],[[33,33,33],[[84,[33]]]],[[33,33,33],[[108,[33]]]],[[100,100,100,100],[[128,[100]]]],[[[39,[43,[118,[53,56]]]]],[[13,[[130,[43,53]]]]]],[[[50,[33]]],[[49,[33]]]],[137,[[87,[33]]]],[[[117,[[0,[43,38]]]],[0,[43,38]]],[[121,[[0,[43,38]]]]]],[123,[[124,[33]]]],[126,[[125,[33]]]],[126,[[84,[33]]]],[123,[[85,[33]]]],[123,[[108,[33]]]],[126,[[108,[33]]]],[[123,33,9,[124,[33]]],[[124,[33]]]],[[126,33,9,[125,[33]]],[[125,[33]]]],[[126,33,9,[84,[33]]],[[84,[33]]]],[[123,33,9,[85,[33]]],[[85,[33]]]],[[126,33,9,[108,[33]]],[[108,[33]]]],[[123,33,9,[108,[33]]],[[108,[33]]]],[[[29,[100,[118,[40,56]],[118,[40,56]]]]],[[119,[100,206]]]],[109,108],[114,128],[114,127],[[[138,[33]],[84,[33]]],[[87,[33]]]],[[33,[54,[33,58]]],[[49,[33]]]],[[[120,[43]],[207,[43]]],[[117,[43,[207,[43]]]]]],[[[120,[[0,[43,38]]]],[0,[43,38]]],[[121,[[0,[43,38]]]]]],[[33,33,[42,[[54,[33,58]]]]],[[49,[33]]]],[[[49,[33]]],[[84,[33]]]],[33,[[49,[33]]]],[[[49,[33]]],[[86,[33]]]],[[[49,[43]],[49,[43]]],[[86,[43]]]],[[[84,[33]]],[[87,[33]]]],[125,[[84,[33]]]],[124,[[85,[33]]]],[[[54,[33,56,[44,[33,56]]]]],[[124,[33]]]],[[[54,[33,58,[44,[33,58]]]]],[[125,[33]]]],[[[54,[33,58]]],[[84,[33]]]],[[[54,[33,56,[44,[33,56]]]]],[[85,[33]]]],[[[54,[33,56,[44,[33,56]]]]],[[108,[33]]]],[[[54,[33,58,[44,[33,58]]]]],[[108,[33]]]],[[[54,[33,58]],33],[[84,[33]]]],[33,[[121,[33]]]],[[],[[130,[43,53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[85,124],[87,125],[84,125],[87,84],[117,84],[125,84],[121,84],[84,84],[114,[[84,[100]]]],[119,84],[114,[[87,[100]]]],[119,87],[87,87],[220,87],[137,87],[119,85],[124,85],[85,85],[126,[[85,[100]]]],[121,85],[117,85],[87,138],[87,137],[29,119],[119,119],[130,[[130,[53]]]],[39,130],[29,108],[119,108],[121,108],[108,108],[117,108],[49,49],[86,86],[29,120],[120,120],[117,120],[121,120],[119,120],[29,122],[119,122],[122,122],[117,117],[121,117],[119,117],[29,117],[29,121],[119,121],[121,121],[209,49],[[[131,[43]]],[[120,[43]]]],[[[130,[[0,[43,7]],53]],[130,[[0,[43,7]],53]]],3],[[[130,[43,53]],9]],[[[130,[43,53]],9]],[[[130,[[0,[43,7]],53]],[130,[[0,[43,7]],53]]],3],[[[49,[33]]],[[49,[33]]]],[[],3],[[],3],[[],3],[[[119,[[0,[100,142]],206]]]],[[[130,[[0,[43,142]],53]]]],[[[108,[[0,[43,142]]]]]],[[[49,[[0,[43,142]]]]]],[[[120,[[0,[43,142]]]]]],[[[122,[[0,[43,142]]]]]],[[[117,[[0,[43,142]],142]]]],[[[121,[[0,[43,142]],142]]]],[214],[215],[216],[[]],[[],[[84,[33]]]],[[],[[84,[33]]]],[[],[[87,[33]]]],[[],[[85,[33]]]],[[],[[85,[33]]]],[[],[[119,[100,206]]]],[[],108],[[],[[108,[33]]]],[[],[[49,[33]]]],[[],[[86,[43]]]],[[],[[120,[43]]]],[[],[[122,[43]]]],[[],[[117,[33,[207,[33]]]]]],[[],[[121,[33]]]],[[[49,[33]]],[[50,[33]]]],[[[119,[100,206]]]],[[[130,[43,53]],9]],[[[108,[43]]]],[[[49,[43]],9]],[[[86,[33]],9]],[[[119,[100,214]]]],[[[130,[43,53]],9]],[[[49,[43]],9]],[[[86,[33]],9]],[[[130,[[0,[43,221]],53]],[130,[[0,[43,221]],53]]],[[130,[[0,[43,221]],53]]]],[[[130,[[0,[43,221]],53]],[130,[[0,[43,221]],53]]]],[[[49,[33]],[49,[33]]],[[49,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[100,206]]],[[29,[100,[118,[40,56]],[118,[40,56]]]]]],[[[108,[43]]],[[109,[43]]]],[[[128,[100]]],[[114,[100]]]],[[[127,[100]]],[[114,[100]]]],[[[49,[33]]],[[49,[33]]]],[[[117,[33,[207,[33]]]],117],[[117,[33,[207,[33]]]]]],[[]],[[[84,[33]]],[[84,[33]]]],[[[84,[33]]],[[84,[33]]]],[[[87,[33]]],[[87,[33]]]],[[[85,[33]]],[[85,[33]]]],[[[85,[33]]],[[85,[33]]]],[[[119,[100,206]]],[[119,[100,206]]]],[[[108,[33]]],[[108,[33]]]],[[[108,[43]]],[[108,[43]]]],[[[120,[43]]],[[120,[43]]]],[[[117,[33,[207,[33]]]]],[[117,[33,[207,[33]]]]]],[[[121,[33]]],[[121,[33]]]],[[[128,[100]]],[[114,[100]]]],[[[127,[100]]],[[114,[100]]]],[[]],[[[84,[33]]]],[[[84,[33]]]],[[[87,[33]]]],[[[85,[33]]]],[[[85,[33]]]],[[[119,[100,206]]]],[[[108,[43]]]],[[[108,[33]]]],[[[120,[43]]]],[[[117,[33,[207,[33]]]]]],[[[121,[33]]]],[5,5],[[[84,[33]],5],[[5,[33]]]],[[[84,[33]],113],[[113,[33]]]],[[[87,[33]],113],[[113,[33]]]],[[[85,[33]],5],[[5,[33]]]],[[[85,[33]],144],[[144,[33]]]],[[[119,[100]],5],[[5,[100]]]],[[[108,[33]],5],[[5,[33]]]],[[[108,[33]],5],[[5,[33]]]],[[[120,[[0,[43,103]]]],5],[[5,[[0,[43,103]]]]]],[[[117,[33,[207,[33]]]],5],[[5,[33]]]],[[[121,[33]],5],[[5,[33]]]],[42,[[42,[131]]]],[42,[[42,[131]]]],[[[84,[33]],42],[[42,[[50,[33]]]]]],[[[87,[33]],42],[[42,[[50,[33]]]]]],[[[85,[33]],42],[[42,[[145,[33]]]]]],[[[108,[33]],42],[[42,[[131,[33]]]]]],[[[108,[33]],42],[[42,[[131,[33]]]]]],[[[117,[33,[207,[33]]]],42],[[42,[[131,[33]]]]]],[39,[[39,[40]]]],[[[84,[33]],131],[[131,[33]]]],[[[84,[33]],50],[[50,[33]]]],[[[87,[33]],50],[[50,[33]]]],[[[85,[33]],145],[[145,[33]]]],[[[85,[33]],131],[[131,[33]]]],[[[119,[100]],131],[[131,[100]]]],[[[108,[33]],131],[[131,[33]]]],[[[108,[33]],131],[[131,[33]]]],[[[117,[33,[207,[33]]]],131],[[131,[33]]]],[[[121,[33]],131],[[131,[33]]]],[[[122,[43]]],[[122,[43]]]],[[[130,[43,53]]],3],[85,3],[84,3],[87,3],[87,3],[121,3],[119,3],[117,3],[114,3],[84,3],[125,3],[87,3],[137,3],[220,3],[119,3],[114,3],[85,3],[124,3],[117,3],[121,3],[126,3],[119,3],[87,3],[87,3],[119,3],[[],3],[29,3],[[],3],[[],3],[130,3],[39,3],[119,3],[29,3],[108,3],[121,3],[117,3],[[],3],[[],3],[49,3],[[],3],[86,3],[119,3],[29,3],[117,3],[121,3],[[],3],[120,3],[119,3],[[],3],[29,3],[122,3],[117,3],[29,3],[119,3],[[],3],[121,3],[121,3],[119,3],[29,3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[49,[33]]],3],[[[49,[33]]],3],[[[86,[33]]],3],0,[[[87,[33]],[87,[33]]],[[87,[33]]]],[[[130,[43,53]]],[[146,[43,53,40]]]],[[[130,[43,53]]],[[147,[43,53,40]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[130,[[0,[43,7]],53]],[130,[[0,[43,7]],53]]],3],[[[128,[100]]],100],[[[49,[33]],[49,[33]]],[[13,[[49,[33]]]]]],[[[130,[43,53]]],9],[[[84,[33]],[84,[33]],33],[[49,[33]]]],[[[87,[33]],[87,[33]],33],[[86,[33]]]],[[[49,[33]],[49,[33]],33],[[49,[33]]]],[[[86,[33]],[86,[33]],33],[[86,[33]]]],[[[211,[33]],[211,[33]],33],[[211,[33]]]],[[[137,[33]],[137,[33]],33],[[137,[33]]]],[[[212,[33]],[212,[33]],33],[[212,[33]]]],[[[213,[33]],[213,[33]],33],[[213,[33]]]],[[[117,[33,[42,[[2,[33]]]]]],[117,[33,[42,[[2,[33]]]]]],33],[[117,[33,[42,[[2,[33]]]]]]]],[[[117,[33,[108,[33]]]],[117,[33,[108,[33]]]],33],[[117,[33,[108,[33]]]]]],[[[117,[33,[108,[33]]]],[117,[33,[108,[33]]]],33],[[117,[33,[108,[33]]]]]],[[[117,[33,[42,[[49,[33]]]]]],[117,[33,[42,[[49,[33]]]]]],33],[[117,[33,[42,[[49,[33]]]]]]]],[[[84,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[54,54],[[125,[33]]]],[[54,54],[[84,[33]]]],[[113,113,50],[[137,[33]]]],[[113,113,50],[[213,[33]]]],[[54,54],[[108,[33]]]],[[113,113,50],[[117,[33,[108,[33]]]]]],[[113,113,50],[[117,[33,[42,[[49,[33]]]]]]]],[[113,113,50,33],[[121,[33,[84,[33]]]]]],[[113,113,50,33],[[121,[33,[125,[33]]]]]],[[54,54],[[125,[33]]]],[[54,54],[[84,[33]]]],[[113,113,50],[[137,[33]]]],[[113,113,50],[[213,[33]]]],[[54,54],[[108,[33]]]],[[113,113,50],[[117,[33,[108,[33]]]]]],[[113,113,50],[[117,[33,[42,[[49,[33]]]]]]]],[[113,113,50,33],[[121,[33,[125,[33]]]]]],[[113,113,50,33],[[121,[33,[84,[33]]]]]],[[[130,[[0,[43,7]],53]],[130,[[0,[43,7]],53]]],3],[[[49,[33]]],33],[[[49,[33]]],33],[[[130,[43,53]],55],[[130,[43,53]]]],[[[119,[100,206]]],29],[[[108,[43]]],109],[[[119,[100,214]]],29],[[[108,[43]]],109],[[[119,[100,206]]],29],[[[108,[43]]],109],[[],[[130,[[0,[43,222]],53]]]],[[]],[111,[[84,[33]]]],[[]],[[],[[130,[[0,[43,222]],53]]]],[[[84,[33]],[121,[33,[84,[33]]]]]],[[[84,[33]],[84,[33]]]],[[[84,[33]],[113,[33]]]],[[84,42]],[[84,[42,[[54,[33,58,[44,[33,40]]]]]]]],[[[84,[33]],42]],[[[84,[33]],[42,[[54,[33,58,[44,[33,40]]]]]]]],[[84,[120,[33]]]],[[84,84]],[[[84,[33]],[120,[33]]]],[[84,[84,[33]]]],[[[84,[33]],120]],[[84,120]],[[[84,[33]],84]],[[84,87]],[[84,[54,[33,58,[44,[33,40]]]]]],[[[84,[33]],121]],[[84,[121,[33,[84,[33]]]]]],[[[84,[33]],117]],[[[84,[33]],113]],[[84,121]],[[84,[87,[33]]]],[[[84,[33]],87]],[[[84,[33]],[87,[33]]]],[[84,108]],[[84,[108,[33]]]],[[[84,[33]],108]],[[84,[113,[33]]]],[[[84,[33]],[117,[33,[84,[33]]]]]],[[84,54]],[[84,119]],[[84,119]],[[84,113]],[[84,[117,[33,[84,[33]]]]]],[[[84,[33]],54]],[[84,117]],[[[84,[33]],[54,[33,58,[44,[33,40]]]]]],[[84,119]],[[[84,[33]],[108,[33]]]],[[84,119]],[[[87,[33]],[86,[33]]]],[[87,87]],[[87,54]],[[87,[54,[33,58,[44,[33,58]]]]]],[[[87,[33]],54]],[[[87,[33]],[54,[33,58,[44,[33,58]]]]]],[[87,113]],[[87,[113,[33]]]],[[[87,[33]],113]],[[[87,[33]],[113,[33]]]],[[87,42]],[[[87,[33]],[137,[33]]]],[[[87,[33]],137]],[[87,[137,[33]]]],[[87,137]],[[87,[42,[[54,[33,58,[44,[33,58]]]]]]]],[[[87,[33]],42]],[[[87,[33]],[42,[[54,[33,58,[44,[33,58]]]]]]]],[[[87,[33]],[138,[33]]]],[[[87,[33]],138]],[[87,[138,[33]]]],[[87,138]],[[[87,[33]],[84,[33]]]],[[[87,[33]],84]],[[87,[84,[33]]]],[[87,84]],[[[87,[33]],86]],[[87,[86,[33]]]],[[87,86]],[[[87,[33]],[87,[33]]]],[[[87,[33]],87]],[[87,[87,[33]]]],[[85,[85,[33]]]],[[[85,[33]],[117,[33,[85,[33]]]]]],[[85,119]],[[[85,[33]],[85,[33]]],[[85,[33]]]],[[[85,[33]],85]],[[85,85]],[[85,119]],[[85,119]],[[85,119]],[[[85,[33]],120]],[[85,[120,[33]]]],[[[85,[33]],121]],[[[85,[33]],[108,[33]]]],[[85,[108,[33]]]],[[[85,[33]],108]],[[85,108]],[[[85,[33]],[144,[33]]]],[[85,[144,[33]]]],[[[85,[33]],144]],[[85,144]],[[[85,[33]],[54,[33,40,[44,[33,40]]]]]],[[85,[54,[33,40,[44,[33,40]]]]]],[[[85,[33]],54]],[[85,54]],[[[85,[33]],[42,[[54,[33,40,[44,[33,40]]]]]]]],[[85,[42,[[54,[33,40,[44,[33,40]]]]]]]],[[[85,[33]],42]],[[85,42]],[[85,120]],[[85,[117,[33,[85,[33]]]]]],[[[85,[33]],[120,[33]]]],[[[85,[33]],117]],[[85,117]],[[[85,[33]],[121,[33,[85,[33]]]]]],[[85,[121,[33,[85,[33]]]]]],[[85,121]],[[138,87]],[[[138,[33]],87]],[[[138,[33]],[87,[33]]]],[[138,[87,[33]]]],[[137,[87,[33]]]],[[[137,[33]],[87,[33]]]],[[137,87]],[[[137,[33]],87]],[[119,84]],[[119,117]],[[119,119]],[[119,108]],[[119,119]],[[119,131]],[[119,121]],[[119,108]],[[119,119]],[[119,84]],[[119,5]],[[119,84]],[[119,121]],[[119,131]],[[119,85]],[[119,85]],[[119,85]],[[119,108]],[[119,121]],[[119,108]],[[119,84]],[[119,5]],[[119,5]],[[119,5]],[[119,131]],[[119,131]],[[119,117]],[[119,119]],[[119,117]],[[119,117]],[[119,85]],[[119,120]],[[119,120]],[[119,120]],[[119,120]],[[119,121]],[[[130,[[0,[43,51]],53]],[0,[43,51]]]],[[130,[0,[43,51]]]],[[108,[85,[33]]]],[[[108,[33]],117]],[[108,41]],[[108,41]],[[108,41]],[[108,120]],[[108,41]],[[108,119]],[[[108,[33]],120]],[[108,[120,[33]]]],[[108,5]],[[[108,[33]],[120,[33]]]],[[[108,[33]],[85,[33]]]],[[[108,[33]],[84,[33]]]],[[108,5]],[[108,5]],[[108,5]],[[108,[42,[[54,[40]]]]]],[[108,[42,[[54,[40]]]]]],[[108,42]],[[108,42]],[[[108,[33]],85]],[[108,108]],[[108,108]],[[108,108]],[[108,85]],[[108,[117,[33,[108,[33]]]]]],[[108,119]],[[108,121]],[[[108,[33]],121]],[[108,108]],[[108,[121,[33,[108,[33]]]]]],[[108,119]],[[[108,[33]],[121,[33,[108,[33]]]]]],[[108,84]],[[[108,[33]],84]],[[[108,[33]],[117,[33,[108,[33]]]]]],[[108,117]],[[108,[84,[33]]]],[[108,119]],[[[49,[33]],33]],[[49,33]],[[49,49]],[[49,[49,[33]]]],[[[49,[33]],49]],[[[49,[33]],[49,[33]]]],[[[86,[33]],33]],[[86,[86,[33]]]],[[86,33]],[[86,86]],[[[86,[33]],86]],[[[86,[33]],[86,[33]]]],[[86,87]],[[86,[87,[33]]]],[[[86,[33]],87]],[[[86,[33]],[87,[33]]]],[[120,119]],[[[120,[33]],[84,[33]]]],[[120,5]],[[120,5]],[[120,5]],[[120,120]],[[120,120]],[[120,120]],[[120,120]],[[120,5]],[[120,119]],[[120,119]],[[120,117]],[[[120,[33]],[121,[33]]]],[[120,[121,[33]]]],[[[120,[33]],121]],[[120,121]],[[[120,[33]],117]],[[120,[117,[33]]]],[[[120,[33]],[117,[33]]]],[[120,84]],[[[120,[33]],84]],[[120,[84,[33]]]],[[120,119]],[[120,108]],[[[120,[33]],108]],[[120,[108,[33]]]],[[[120,[33]],[108,[33]]]],[[120,85]],[[[120,[33]],85]],[[120,[85,[33]]]],[[[120,[33]],[85,[33]]]],[122],[[122,122]],[[122,131]],[[122,5]],[[122,5]],[[122,131]],[[122,122]],[[122,122]],[[122,122]],[[122,131]],[122],[[122,131]],[[122,5]],[[122,5]],[[117,[84,[33]]]],[[[117,[33,[84,[33]]]],[84,[33]]]],[[117,119]],[[[117,[33,[84,[33]]]],84]],[[117,117]],[[[117,[33]],117]],[[117,119]],[[[117,[33]],[5,[33]]]],[[117,[5,[33]]]],[[[117,[33]],5]],[[117,5]],[[117,[117,[33]]]],[[117,[131,[33]]]],[[[117,[33]],[117,[33]]]],[[117,84]],[[117,119]],[[117,119]],[[[117,[33]],131]],[[117,131]],[[[117,[33]],[42,[[131,[33]]]]]],[[117,[42,[[131,[33]]]]]],[[[117,[33]],42]],[[117,42]],[[[117,[33]],[120,[33]]]],[[117,[120,[33]]]],[[[117,[33]],120]],[[117,120]],[[[117,[33,[85,[33]]]],[85,[33]]]],[[117,[85,[33]]]],[[[117,[33,[85,[33]]]],85]],[[117,85]],[[[117,[33]],[121,[33]]]],[[117,[121,[33]]]],[[[117,[33]],121]],[[117,121]],[[[117,[33]],[131,[33]]]],[[[117,[33,[108,[33]]]],[108,[33]]]],[[117,[108,[33]]]],[[[117,[33,[108,[33]]]],108]],[[117,108]],[[[121,[33]],[5,[33]]]],[[121,119]],[[121,119]],[[121,[120,[33]]]],[[[121,[33]],[120,[33]]]],[[121,131]],[[[121,[33]],131]],[[121,[131,[33]]]],[[[121,[33]],[131,[33]]]],[[121,5]],[[[121,[33]],5]],[[[121,[33,[108,[33]]]],[108,[33]]]],[[121,[108,[33]]]],[[[121,[33,[108,[33]]]],108]],[[121,[85,[33]]]],[[[121,[33,[85,[33]]]],[85,[33]]]],[[[121,[33]],[121,[33]]]],[[121,[121,[33]]]],[[[121,[33]],121]],[[121,121]],[[[121,[33,[84,[33]]]],84]],[[121,120]],[[[121,[33]],[117,[33]]]],[[121,[5,[33]]]],[[121,119]],[[121,84]],[[121,119]],[[121,108]],[[121,117]],[[[121,[33]],117]],[[121,[117,[33]]]],[[[121,[33]],120]],[[121,85]],[[[121,[33,[85,[33]]]],85]],[[[121,[33,[84,[33]]]],[84,[33]]]],[[121,[84,[33]]]],[[[84,[33]],[108,[33]]]],[[[84,[33]],108]],[[[84,[33]],[84,[33]]]],[[[84,[33]],84]],[[[87,[33]],87]],[[[87,[33]],[87,[33]]]],[[[87,[33]],[84,[33]]]],[[[87,[33]],84]],[[[87,[33]],[138,[33]]]],[[[87,[33]],138]],[[[87,[33]],137]],[[[87,[33]],[137,[33]]]],[[[85,[33]],[85,[33]]]],[[[85,[33]],85]],[[[85,[33]],[108,[33]]]],[[[85,[33]],108]],[[119,108]],[[119,121]],[[119,85]],[[119,119]],[[119,121]],[[119,84]],[[119,84]],[[119,119]],[[119,117]],[[119,120]],[[119,120]],[[119,108]],[[119,85]],[[119,117]],[[[130,[[0,[43,51]],53]],[0,[43,51]]]],[[[108,[33]],85]],[[108,108]],[[[108,[33]],[85,[33]]]],[[108,108]],[[[49,[33]],49]],[[[49,[33]],33]],[[[49,[33]],[49,[33]]]],[[[86,[33]],87]],[[[86,[33]],[86,[33]]]],[[[86,[33]],86]],[[[86,[33]],[87,[33]]]],[[[86,[33]],33]],[[120,120]],[[120,120]],[122],[[122,122]],[[122,122]],[[[117,[33]],[120,[33]]]],[[[117,[84]],84]],[[[117,[85]],85]],[[[117,[85]],85]],[[[117,[84]],84]],[[[117,[33]],120]],[[[117,[108]],108]],[[[117,[33]],[117,[33]]]],[[[117,[33]],117]],[[[117,[108]],108]],[[[121,[85]],85]],[[[121,[85]],85]],[[[121,[84]],84]],[[[121,[108]],108]],[[[121,[108]],108]],[[[121,[84]],84]],[[[121,[33]],117]],[[[121,[33]],[117,[33]]]],[[[121,[33]],121]],[[[121,[33]],[121,[33]]]],[[[121,[33]],[120,[33]]]],[[[121,[33]],120]],[87],[[[87,[33]]]],[[[130,[[0,[43,150]],53]]]],[130],[49],[[[49,[33]]]],[86],[[[86,[33]]]],[43,[[223,[43]]]],[[43,43],[[144,[43]]]],[[43,43,43],[[113,[43]]]],[[43,43,43,43],[[224,[43]]]],[[43,43,43,43,43],[[225,[43]]]],[[43,43,43,43,43,43],[[226,[43]]]],[33,[[124,[33]]]],[[[54,[33,58,[44,[33,58]]]]],[[125,[33]]]],[[[54,[33,58]]],[[84,[33]]]],[33,[[85,[33]]]],[[[145,[33]],33],[[211,[33]]]],[[[50,[33]],[50,[33]]],[[137,[33]]]],[[[145,[33]],33],[[212,[33]]]],[[[50,[33]],[50,[33]]],[[213,[33]]]],[[[42,[[54,[45,30,[44,[45,30]]]]]],45],[[210,[45,30,[44,[45,30]]]]]],[[43,43,43,43,43,43],[[130,[43,40]]]],[43,[[130,[43,40]]]],[[43,43,43,43,43],[[130,[43,40]]]],[[43,43,43],[[130,[43,40]]]],[[43,43],[[130,[43,40]]]],[[43,43,43,43],[[130,[43,40]]]],[[[54,[33,58,[44,[33,58]]]]],[[108,[33]]]],[33,[[108,[33]]]],[[],49],[[],120],[[],120],[[],120],[[],120],[[],120],[[],120],[[],122],[[],122],[[],122],[[],122],[[],122],[[],122],[[[50,[33]],[50,[33]]],[[117,[33,[108,[33]]]]]],[[[50,[33]],[50,[33]]],[[117,[33,[42,[[49,[33]]]]]]]],[[[145,[33]],33],[[117,[33,[108,[33]]]]]],[[[145,[33]],33],[[117,[33,[42,[[2,[33]]]]]]]],[[[145,[33]],33,33],[[121,[33,[85,[33]]]]]],[[[145,[33]],33,33],[[121,[33,[124,[33]]]]]],[[[50,[33]],[50,[33]],33],[[121,[33,[84,[33]]]]]],[[[50,[33]],[50,[33]],33],[[121,[33,[125,[33]]]]]],[[100,100,100,100,100,100],[[128,[100]]]],[[100,100,100,100],[[127,[100]]]],[[[42,[[54,[45,40,[44,[45,40]]]]]],5],[[210,[45,40,[44,[45,40]]]]]],[[[54,[33,58]],33],[[84,[33]]]],[[113,113,50],[[137,[33]]]],[[113,113,50],[[213,[33]]]],[[113,113,50],[[117,[33,[108,[33]]]]]],[[113,113,50],[[117,[33,[42,[[49,[33]]]]]]]],[[54,54],[[125,[33]]]],[[54,54],[[84,[33]]]],[[54,54],[[108,[33]]]],[[113,113,50,33],[[121,[33,[84,[33]]]]]],[[113,113,50,33],[[121,[33,[125,[33]]]]]],[[[84,[33]],[84,[33]],33],[[84,[33]]]],[[[87,[33]],[87,[33]],33],[[87,[33]]]],[[[49,[33]]]],[[[49,[33]]],33],[[[86,[33]]]],[[[49,[33]]],33],[[[49,[33]]]],[[[86,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[86,[33]]],[[86,[33]]]],[[[49,[33]]],33],[[[86,[33]]],33],[[],[[84,[33]]]],[[],[[87,[33]]]],[[],[[85,[33]]]],[[],[[119,[100,206]]]],[[],108],[[],[[49,[33]]]],[[],[[86,[33]]]],[[],[[120,[[0,[43,38,52]]]]]],[[],[[122,[[0,[43,34,51]]]]]],[[],[[117,[33,[207,[33]]]]]],[[],[[121,[33]]]],[[],[[130,[43,53]]]],[[[49,[33]],[49,[33]]],[[49,[33]]]],[[[130,[[0,[43,7]],53]],[130,[[0,[43,7]],53]]],[[13,[35]]]],[[[49,[33]]]],[[[124,[33]],33],[[124,[33]]]],[[[125,[33]],33],[[125,[33]]]],[[[84,[33]],33],[[84,[33]]]],[[[85,[33]],33],[[85,[33]]]],[[[108,[33]],33],[[108,[33]]]],[[[108,[33]],33],[[108,[33]]]],[[[49,[33]],33],[[49,[33]]]],[[[121,[33]],33],[[121,[33]]]],[[[121,[33]],33]],[[[49,[33]],[49,[33]]],[[13,[[49,[33]]]]]],[[[128,[100]],113],[[113,[100]]]],[[[127,[100]],113],[[113,[100]]]],[[[128,[100]],54],[[50,[100]]]],[[[127,[100]],54],[[50,[100]]]],[[[122,[43]]],[[122,[43]]]],[[[49,[33]]],[[49,[33]]]],[[[84,[33]]],49],0,[[[210,[45,30,[44,[45,30]]]],41]],[[[210,[45,30,[44,[45,30]]]],41,54]],[[[210,[45,30,[44,[45,30]]]],41,54,45]],[[[210,[45,30,[44,[45,30]]]],41,45]],[[[49,[33]],[49,[33]]],[[13,[[49,[33]]]]]],[[[84,[[0,[100,227]]]],[84,[[0,[100,227]]]]],3],[[[87,[[0,[100,227]]]],[87,[[0,[100,227]]]]],3],[[[85,[100]],[85,[100]]],3],[[[119,[100,206]],[119,[100,206]]],3],[[[130,[[0,[43,227]],53]],[130,[[0,[43,227]],53]]],3],[[108,108],3],[[[49,[[0,[100,227]]]],[49,[[0,[100,227]]]]],3],[[[86,[[0,[100,227]]]],[86,[[0,[100,227]]]]],3],[[[120,[[0,[43,227]]]],[120,[[0,[43,227]]]]],3],[[[122,[[0,[43,227]]]],[122,[[0,[43,227]]]]],3],[[[117,[100]],[117,[100]]],3],[[[121,[100]],[121,[100]]],3],[[[124,[33]]]],[[[125,[33]]]],[[[108,[33]]]],[[[108,[33]]]],[[[5,[[0,[43,217]]]],9]],[[[84,[[0,[43,217]]]],9]],[[[85,[33]],9]],[[[119,[100]],9]],[[108,9]],[[[49,[[0,[43,217]]]],9]],[[[120,[[0,[43,217]]]],9]],[[[122,[[0,[43,217]]]],9]],[[[117,[33]],9]],[[[121,[33]],9]],[[[5,[[0,[43,217]]]],9]],[[[84,[[0,[43,217]]]],9]],[[[85,[33]],9]],[[[119,[100]],9]],[[108,9]],[[[49,[[0,[43,217]]]],9]],[[[120,[[0,[43,217]]]],9]],[[[122,[[0,[43,217]]]],9]],[[[117,[33]],9]],[[[121,[33]],9]],[[[128,[100]]],100],[[[49,[33]],[49,[33]]],[[13,[[49,[33]]]]]],[[[87,[33]]],[[84,[33]]]],[33,[[211,[33]]]],[[[50,[33]]],[[137,[33]]]],[33,[[212,[33]]]],[[[50,[33]]],[[213,[33]]]],[[[50,[33]]],[[117,[33,[42,[[49,[33]]]]]]]],[33,[[117,[33,[108,[33]]]]]],[[[50,[33]]],[[117,[33,[108,[33]]]]]],[33,[[117,[33,[42,[[2,[33]]]]]]]],0,[[54,54],[[124,[33]]]],[[54,54],[[13,[[125,[33]]]]]],[[54,54],[[13,[[84,[33]]]]]],[[54,54],[[85,[33]]]],[[54,54],[[108,[33]]]],[[54,54],[[13,[[108,[33]]]]]],[[42,42],[[13,[[84,[33]]]]]],[[42,42],[[85,[33]]]],[[[124,[33]],[124,[33]]],[[124,[33]]]],[[[125,[33]],[125,[33]]],[[125,[33]]]],[[[84,[33]],[84,[33]]],[[84,[33]]]],[[[85,[33]],[85,[33]]],[[85,[33]]]],[[[108,[33]],[108,[33]]],[[108,[33]]]],[[[108,[33]],[108,[33]]],[[108,[33]]]],[[[207,[33]],[5,[33]]],[[117,[33,[207,[33]]]]]],[[[5,[33]],33],[[121,[33]]]],[[[49,[33]]],33],[[[49,[33]]]],[[[86,[33]]]],[[[124,[33]]],[[131,[33]]]],[[[125,[33]]],[[50,[33]]]],[[[84,[33]]],[[50,[33]]]],[[[85,[33]]],[[156,[33]]]],[[[108,[33]]],[[131,[33]]]],[[[108,[33]]],[[50,[33]]]],[[54,54,33],[[124,[33]]]],[[54,54,33],[[13,[[125,[33]]]]]],[[54,54,33],[[13,[[84,[33]]]]]],[[54,54,33],[[85,[33]]]],[[54,54,33],[[108,[33]]]],[[54,54,33],[[13,[[108,[33]]]]]],[[42,42,33],[[13,[[84,[33]]]]]],[[42,42,33],[[85,[33]]]],[[[121,[43]]],43],[[[87,[33]],[87,[33]],33],[[87,[33]]]],[[[5,[[0,[43,217]]]],[5,[[0,[43,217]]]]],[[5,[[0,[43,217]]]]]],[[[84,[[0,[43,217]]]],[84,[[0,[43,217]]]]],[[84,[[0,[43,217]]]]]],[[[85,[33]],[85,[33]]],[[85,[33]]]],[[[119,[100]],[119,[100]]],[[119,[100]]]],[[108,108],108],[[[49,[[0,[43,217]]]],[49,[[0,[43,217]]]]],[[49,[[0,[43,217]]]]]],[[[120,[[0,[43,217]]]],[120,[[0,[43,217]]]]],[[120,[[0,[43,217]]]]]],[[[122,[[0,[43,217]]]],[122,[[0,[43,217]]]]],[[122,[[0,[43,217]]]]]],[[[117,[33]],[117,[33]]],[[117,[33]]]],[[[121,[33]],[121,[33]]],[[121,[33]]]],[[[127,[100]],100]],[[[128,[100]],100]],[[[128,[100]],100,100]],[[[119,[100,206]]],[[119,[100,[228,[206]]]]]],[[[127,[100]],100]],[[[128,[100]],100]],[[[128,[100]],100,100]],[[[128,[100]],100]],[[[121,[[0,[43,38]]]],[0,[43,38]]]],[[[128,[100]],100]],[[[128,[100]],100]],[[[127,[100]],100]],[[[128,[100]],100]],[[[127,[100]],100]],[[[128,[100]],100,100]],[[[127,[100]],100,100]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[33]]],[[159,[[49,[33]]]]]],[[[49,[33]]],[[49,[33]]]],[[[85,[33]]],33],[[[49,[33]]],[[49,[33]]]],[[[124,[33]],[124,[33]],33],[[124,[33]]]],[[[125,[33]],[125,[33]],33],[[125,[33]]]],[[[84,[33]],[84,[33]],33],[[84,[33]]]],[[[85,[33]],[85,[33]],33],[[85,[33]]]],[[[108,[33]],[108,[33]],33],[[108,[33]]]],[[[108,[33]],[108,[33]],33],[[108,[33]]]],[[],[[5,[[0,[43,217]]]]]],[[],[[84,[[0,[43,217]]]]]],[[],[[85,[33]]]],[[],[[119,[100]]]],[[],108],[[],[[49,[[0,[43,217]]]]]],[[],[[120,[[0,[43,217]]]]]],[[],[[122,[[0,[43,217]]]]]],[[],[[117,[33]]]],[[],[[121,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[130,[43,53]]],9],[[130,54]],[[130,54]],[[130,130]],[[130,130]],[[130,130]],[[130,54]],[[130,54]],[[130,130]],[[49,49]],[[[49,[33]],49]],[[[49,[33]],[49,[33]]]],[[49,[49,[33]]]],[[86,86]],[[[86,[33]],[86,[33]]]],[[[86,[33]],86]],[[86,[86,[33]]]],[[[130,[53]],[54,[30]]]],[[[130,[53]],54]],[[[49,[33]],49]],[[[49,[33]],[49,[33]]]],[[[86,[33]],86]],[[[86,[33]],[86,[33]]]],[[[130,[[0,[43,221]],53]],[130,[[0,[43,221]],53]]],[[130,[[0,[43,221]],53]]]],[[[130,[43,53]],9,9]],[[[49,[33]]],[[49,[33]]]],[[[49,[33]]],[[49,[33]]]],[[[125,[33]]]],[[[84,[33]]]],[[[108,[33]]]],[[[84,[33]]],[[114,[33]]]],[[[87,[[0,[33,100]]]]],[[114,[[0,[33,100]]]]]],[[[85,[33]]],[[126,[33]]]],[[[119,[100,206]]],[[29,[100,[118,[40,56]],[118,[40,56]]]]]],[[[130,[43,53]]],[[39,[43,[118,[53,56]]]]]],[[[108,[43]]],[[29,[43,[118,[40,56]],[118,[40,56]]]]]],[[[120,[43]]],[[29,[43,[118,[40,56]],[118,[40,56]]]]]],[[[122,[43]]],[[29,[43,[118,[40,56]],[118,[40,56]]]]]],[[[117,[33]]],[[29,[33,[118,[40,56]],[118,[40,56]]]]]],[[[121,[33]]],[[29,[33,[118,[40,56]],[118,[40,56]]]]]],[[[128,[100]]],[[114,[100]]]],[[[127,[100]]],[[114,[100]]]],[[[87,[33]]],[[137,[33]]]],[[[117,[33]]],[[29,[33,[118,[40,56]],[118,[40,56]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[100]]],[[208,[100]]]],[[[127,[100]]],[[208,[100]]]],[[[84,[33]]],[[108,[33]]]],[[[85,[33]]],[[124,[33]]]],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,85],[125,84],[125,87],[84,121],[84,119],[84,117],[[[84,[100]]],[[114,[[0,[100,[8,[100]]]]]]]],[84,84],[84,125],[84,87],[[[87,[100]]],[[114,[[0,[100,[8,[100]]]]]]]],[87,137],[87,87],[87,119],[87,220],[[[85,[100]]],[[126,[[0,[100,[8,[100]]]]]]]],[85,119],[85,121],[85,117],[85,124],[85,85],[138,87],[137,87],[119,119],[119,[[29,[[118,[40,56]],[118,[40,56]]]]]],[130,[[39,[[118,[56]]]]]],[[[130,[53]]],[[130,[53]]]],[108,117],[108,[[29,[[118,[40,56]],[118,[40,56]]]]]],[108,121],[108,119],[108,108],[49,49],[86,86],[120,119],[120,[[29,[[118,[40,56]],[118,[40,56]]]]]],[120,117],[120,120],[120,121],[122,[[29,[[118,[40,56]],[118,[40,56]]]]]],[122,119],[122,122],[117,121],[117,119],[117,[[29,[[118,[40,56]],[118,[40,56]]]]]],[117,117],[121,[[29,[[118,[40,56]],[118,[40,56]]]]]],[121,119],[121,121],[[[128,[100]]],100],[5,5],[[[84,[33]],5],[[5,[33]]]],[[[84,[33]],113],[[113,[33]]]],[[[87,[33]],113],[[113,[33]]]],[[[85,[33]],144],[[144,[33]]]],[[[85,[33]],5],[[5,[33]]]],[[119,5],5],[[[108,[33]],5],[[5,[33]]]],[[[108,[33]],5],[[5,[33]]]],[[[120,[[0,[43,52]]]],5],[[5,[[0,[43,52]]]]]],[[[122,[[0,[43,51]]]],5],[[5,[[0,[43,51]]]]]],[[[117,[33,[207,[33]]]],5],[[5,[33]]]],[[[121,[33]],5],[[5,[33]]]],[131,131],[[[84,[33]],131],[[131,[33]]]],[[[84,[33]],50],[[50,[33]]]],[[[87,[33]],50],[[50,[33]]]],[[[85,[33]],145],[[145,[33]]]],[[[85,[33]],131],[[131,[33]]]],[[119,131],131],[[[108,[33]],131],[[131,[33]]]],[[[108,[33]],131],[[131,[33]]]],[[[117,[33,[207,[33]]]],131],[[131,[33]]]],[[[121,[33]],131],[[131,[33]]]],[[[87,[33]]],[[138,[33]]]],[[33,33],[[211,[33]]]],[[33,33,33],[[137,[33]]]],[[33,33],[[212,[33]]]],[[33,33,33],[[213,[33]]]],[[33,33,33],[[117,[33,[108,[33]]]]]],[[33,33],[[117,[33,[42,[[2,[33]]]]]]]],[[33,33,33],[[117,[33,[42,[[49,[33]]]]]]]],[[33,33],[[117,[33,[108,[33]]]]]],0,[[[108,[43]]],[[108,[43]]]],[[[108,[43]]]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[119,[100,206]]],[[13,[[119,[100,206]]]]]],[[[49,[33]]],[[13,[[49,[33]]]]]],[[[86,[33]]],[[13,[[86,[33]]]]]],[[[122,[43]]],[[13,[[122,[43]]]]]],[[[119,[100,206]]],3],[[[49,[33]]]],[[[86,[33]]],3],[[[122,[43]]],3],[[[122,[[0,[43,218,51,34,38]]]],5],[[13,[[5,[[0,[43,218,51,34,38]]]]]]]],[[[137,[33]],[137,[33]],33,33],[[13,[[137,[33]]]]]],[[[213,[33]],[213,[33]],33,33],[[13,[[213,[33]]]]]],[[[117,[33,[42,[[49,[33]]]]]],[117,[33,[42,[[49,[33]]]]]],33,33],[[13,[[117,[33,[42,[[49,[33]]]]]]]]]],[[[117,[33,[108,[33]]]],[117,[33,[108,[33]]]],33,33],[[13,[[117,[33,[108,[33]]]]]]]],[[[87,[33]],[87,[33]],33,33],[[13,[[87,[33]]]]]],[[[125,[33]],[125,[33]],33,33],[[13,[[125,[33]]]]]],[[[84,[33]],[84,[33]],33,33],[[13,[[84,[33]]]]]],[[[108,[33]],[108,[33]],33,33],[[13,[[108,[33]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[84,[[0,[100,229]]]],[84,[[0,[100,229]]]],24],3],[[[87,[[0,[100,229]]]],[87,[[0,[100,229]]]],24],3],[[[85,[100]],[85,[100]],24],3],[[[119,[100,206]],[119,[100,206]],24],3],[[[130,[[0,[43,229]],53]],[130,[[0,[43,229]],53]],24],3],[[108,108,24],3],[[[49,[[0,[100,229]]]],[49,[[0,[100,229]]]],24],3],[[[86,[[0,[100,229]]]],[86,[[0,[100,229]]]],24],3],[[[120,[[0,[43,229]]]],[120,[[0,[43,229]]]],24],3],[[[122,[[0,[43,229]]]],[122,[[0,[43,229]]]],24],3],[[[117,[100]],[117,[100]],24],3],[[[121,[100]],[121,[100]],24],3],[[[128,[100]],113],[[113,[100]]]],[[[127,[100]],113],[[113,[100]]]],[[[49,[33]]]],[[[86,[33]]]],[[[119,[100,206]]],[[29,[100,[118,[40,56]],[118,[40,56]]]]]],[[[108,[43]]],[[109,[43]]]],[[[128,[100]]],[[114,[100]]]],[[[127,[100]]],[[114,[100]]]],[[[49,[33]]],[[79,[33,58,56,[230,[33,62,56]],[231,[33,62,56]]]]]],0,0,[[[49,[33]]],[[80,[33,58,56,[230,[33,62,56]],[231,[33,62,56]]]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[],[[49,[33]]]],[[],[[86,[33]]]],[[[128,[100]]],100],[[[127,[100]]],100],[[[128,[100]]],100],[[[127,[100]]],100],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[144,[43]]]],[[[130,[43,40]]],[[144,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],[[[5,[43]]],[[113,[43]]]],[[[130,[43,40]]],[[113,[43]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[232,[30]],9,9]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[83,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[83,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[88,[[0,[89,6]],[0,[89,30]]]]],[[88,[[0,[89,6]],[0,[89,30]]]]]],[[[95,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[95,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[140,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[140,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[143,[[0,[89,45]],[0,[89,[163,[56]]]]]]],[[143,[[0,[89,45]],[0,[89,[163,[56]]]]]]]],[[[149,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[149,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[232,[[0,[89,30]]]]],[[232,[[0,[89,30]]]]]],[[[153,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[153,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[157,[[0,[89,45]],[0,[89,30]]]]],[[157,[[0,[89,45]],[0,[89,30]]]]]],[[[161,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]],[[161,[[0,[89,45]],[0,[89,[107,[[0,[89,30]]]]]],[0,[89,30]]]]]],[[[162,[[0,[89,45]],[0,[89,30]]]]],[[162,[[0,[89,45]],[0,[89,30]]]]]],[[[164,[[0,[89,45]],[0,[89,[163,[56]]]]]]],[[164,[[0,[89,45]],[0,[89,[163,[56]]]]]]]],[[[168,[[0,[89,100]],[0,[89,30]]]]],[[168,[[0,[89,100]],[0,[89,30]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[157,[45]]],[[39,[[2,[45]]]]]],[[[83,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],[160,[[107,[30]],30]]]]]],0,[[[168,[100,30]]],[[29,[100,30,30]]]],[[[88,[6,30]]]],[[[95,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],45],[[[140,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],45],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],45],[[[232,[30]]],[[0,[34,150]]]],[[[83,[45,[107,[30]],30]]],[[39,[[160,[[107,[30]],30]]]]]],[[[164,[45,[163,[56]]]]],[[39,[[163,[56]]]]]],[[[157,[45]]],[[13,[[39,[45]]]]]],0,0,[[[83,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[88,[[0,[115,6]],[0,[115,30]]]],10],116],[[[95,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[140,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[143,[[0,[115,45]],[0,[115,[163,[56]]]]]],10],116],[[[149,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[232,[[0,[115,30]]]],10],116],[[[153,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[157,[[0,[115,45]],[0,[115,30]]]],10],116],[[[161,[[0,[115,45]],[0,[115,[107,[[0,[115,30]]]]]],[0,[115,30]]]],10],116],[[[162,[[0,[115,45]],[0,[115,30]]]],10],116],[[[164,[[0,[115,45]],[0,[115,[163,[56]]]]]],10],116],[[[168,[[0,[115,100]],[0,[115,30]]]],10],116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[143,[45,[163,[56]]]]],[[29,[45,[163,[56]],[163,[56]]]]]],0,[9,[[232,[76]]]],[[],[[232,[53]]]],[30,[[232,[30]]]],[[[88,[45,30]],9,[54,[45]]],[[88,[45,[101,[30,56]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[232,[30]],41]],[[[232,[30]],41]],[[[88,[6,30]]],[[29,[6,30,30]]]],[[[232,[30]]],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[[95,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],3],[[[140,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],3],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],3],[[[153,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],3],[[[83,[45,[107,[30]],30]]],3],[[[88,[6,30]]],[[29,[6,30,30]]]],[[[140,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[149,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[88,[6,30]]],29],[[[149,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[232,[30]]],9],[[[88,[6,30]]]],[[[29,[45,[107,[30]],30]]],[[83,[45,[107,[30]],30]]]],[[[29,[45,30,30]]],[[13,[[88,[45,30]]]]]],[[[29,[45,[107,[30]],30]]],[[95,[45,[107,[30]],30]]]],[[[29,[45,[107,[30]],30]]],[[140,[45,[107,[30]],30]]]],[[[29,[45,[163,[56]],[163,[56]]]]],[[143,[45,[163,[56]]]]]],[[[29,[45,[107,[30]],30]]],[[149,[45,[107,[30]],30]]]],[[[29,[45,[107,[30]],30]]],[[153,[45,[107,[30]],30]]]],[[[29,[45]]],[[157,[45]]]],[[[29,[45,[107,[30]],30]],3,3],[[161,[45,[107,[30]],30]]]],[[[29,[45,30,30]]],[[162,[45,30]]]],[[[29,[45,[163,[56]],[163,[56]]]]],[[164,[45,[163,[56]]]]]],[[[29,[100,30,30]]],[[13,[[168,[100,30]]]]]],[[[29,[6,30,30]]],[[88,[6,30]]]],[[[29,[45,[107,[30]],30]],3,3],[[161,[45,[107,[30]],30]]]],[[[29,[45,30,30]],45],[[13,[[88,[45,30]]]]]],[[[29,[45,[163,[56]],[163,[56]]]],39],[[143,[45,[163,[56]]]]]],[[[83,[45,[107,[30]],30]]],[[39,[[102,[[160,[[107,[30]],30]],56]]]]]],[[[164,[45,[163,[56]]]]],[[39,[[102,[[163,[56]],56]]]]]],[[[95,[45,[107,[30]],30]]],232],[[[140,[45,[107,[30]],30]]],232],[[[149,[45,[107,[30]],30]]],232],[[[29,[6,30,30]]],[[88,[6,30]]]],[[[232,[30]],41]],[[[232,[30]],41]],[[[161,[45,[107,[30]],30]]],[[12,[[29,[45,30,[107,[30]]]],23]]]],[[[95,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[140,[45,[107,[30]],30]]],232],[[[143,[45,[163,[56]]]]],[[29,[45,[163,[56]],[163,[56]]]]]],[[[153,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[164,[45,[163,[56]]]]],[[29,[45,[163,[56]],[163,[56]]]]]],[[[95,[45,[107,[30]],30]],41]],[[[153,[45,[107,[30]],30]],41]],[[[95,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],[[[153,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],[[[161,[45,[107,[30]],30]]],9],[[[88,[45,30]],54]],[[[161,[45,[107,[30]],30]]],[[12,[[29,[45,[107,[30]],30]],23]]]],[[[162,[45,30]]],[[29,[45,30,30]]]],[[[164,[45,[163,[56]]]]],[[29,[45,[163,[56]],[163,[56]]]]]],[[[88,[45,30]],9],[[88,[45,[102,[30,56]]]]]],0,[[[88,[6,30]],41],[[29,[6,30,30]]]],[[[95,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],[[13,[[29,[45,30,30]]]]]],[[[140,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],[[13,[[29,[45,30,30]]]]]],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],[[13,[[29,[45,30,30]]]]]],[[[153,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],[[13,[[29,[45,30,30]]]]]],[[[161,[45,[107,[30]],30]],41],[[12,[[29,[45,30,30]],23]]]],[[[88,[6,30]],41]],[[[95,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],3],[[[140,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],3],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],3],[[[153,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],3],[[[161,[45,[107,[30]],30]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[161,[45,[107,[30]],30]]],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[[95,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],[[13,[[29,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]]]]],[[[140,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],[[13,[[29,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]]]]],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],[[13,[[29,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]]]]],[[[153,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]],[[13,[[29,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]]]]]],[[[149,[45,[107,[[107,[[107,[107]]]]]],[107,[[107,[[107,[107]]]]]]]],41],3],[[[29,[45,30,30]],41],3],[[[29,[45]],9],[[13,[[157,[45]]]]]],[[[29,[45,[107,[30]],30]],3,3,9],[[13,[[161,[45,[107,[30]],30]]]]]],[[[29,[45,30,30]],9],[[13,[[162,[45,30]]]]]],[[[29,[45,[107,[30]],30]],3,3,9],[[13,[[161,[45,[107,[30]],30]]]]]],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[[83,[45,[107,[30]],30]]],[[29,[45,[107,[30]],[160,[[107,[30]],30]]]]]],[[[140,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],[[[149,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],0,0,[[[83,[45,[107,[30]],30]]]],[[[88,[6,30]]],[[29,[6,30,30]]]],[[[95,[45,[107,[30]],30]]]],[[[140,[45,[107,[30]],30]]]],[[[143,[45,[163,[56]]]]]],[[[149,[45,[107,[30]],30]]]],[[[153,[45,[107,[30]],30]]]],[[[157,[45]]]],[[[164,[45,[163,[56]]]]]],[[[88,[6,30]]],[[29,[6,30,30]]]],[[[143,[45,[163,[56]]]]],[[29,[45,[163,[56]],[163,[56]]]]]],[[[95,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],[[[153,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],[[[164,[45,[163,[56]]]]]],[[[83,[45,[107,[30]],30]]],[[29,[45,[160,[[107,[30]],30]],30]]]],0,[[45,45,45],45],[29,[[39,[100,30]]]],[[29,39]],0,[[]],[[]],[[[233,[45]]]],[54,13],[54,13],[[[233,[[0,[89,45]]]]],[[233,[[0,[89,45]]]]]],[[]],[[[233,[[0,[115,45]]]],10],116],[[]],[[]],[[],[[233,[45]]]],[[]],[[[233,[45]]],[[233,[45]]]],[[],3],[[45,45]],[45,[[233,[45]]]],[[[233,[45]],41]],[[[233,[45]],41]],[[[233,[45]]],45],[[]],[[],13],[[]],[[],12],[[],12],[[45,45],13],[[],37]],"p":[[8,"Signed"],[3,"Complex"],[15,"bool"],[15,"u64"],[6,"Point"],[8,"SimdComplexField"],[8,"PartialOrd"],[8,"SupersetOf"],[15,"usize"],[3,"Formatter"],[3,"Error"],[4,"Result"],[4,"Option"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[3,"AutoSimd"],[15,"str"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u8"],[8,"FnOnce"],[6,"OMatrix"],[8,"Dim"],[8,"Fn"],[8,"Ord"],[8,"SimdRealField"],[8,"One"],[4,"Ordering"],[3,"String"],[3,"TypeId"],[8,"Zero"],[6,"OVector"],[3,"Const"],[3,"Matrix"],[3,"Unit"],[8,"Scalar"],[8,"Storage"],[8,"ComplexField"],[6,"SquareMatrix"],[8,"RawStorage"],[8,"RawStorageMut"],[3,"Quaternion"],[6,"Vector3"],[8,"ClosedMul"],[8,"ClosedAdd"],[8,"DimName"],[6,"Vector"],[8,"FnMut"],[6,"U1"],[6,"U14"],[6,"U3"],[6,"U5"],[6,"U2"],[6,"U6"],[6,"U4"],[6,"U15"],[6,"U13"],[6,"U12"],[6,"U11"],[6,"U7"],[6,"U10"],[6,"U16"],[6,"U8"],[6,"U9"],[3,"ArrayStorage"],[8,"IsContiguous"],[3,"VecStorage"],[3,"ViewStorageMut"],[3,"Dyn"],[3,"ViewStorage"],[3,"Vec"],[6,"MatrixView"],[6,"MatrixViewMut"],[6,"UninitMatrix"],[19,"MaybeUninit"],[3,"Bidiagonal"],[6,"UnitQuaternion"],[6,"UnitComplex"],[3,"DualQuaternion"],[6,"UnitDualQuaternion"],[3,"Cholesky"],[8,"Clone"],[3,"EuclideanNorm"],[3,"LpNorm"],[3,"UniformNorm"],[6,"Owned"],[6,"MatrixSum"],[3,"ColPivQR"],[3,"ColumnIter"],[3,"ColumnIterMut"],[8,"DimRange"],[6,"RowOVector"],[8,"RealField"],[6,"DimSum"],[6,"DimDiff"],[8,"ClosedSub"],[6,"MatrixCross"],[8,"Field"],[8,"Default"],[8,"DimMin"],[3,"Rotation"],[6,"SMatrix"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Copy"],[6,"Point3"],[6,"Matrix4"],[8,"Debug"],[6,"Result"],[3,"Isometry"],[6,"DimNameSum"],[3,"Transform"],[3,"Translation"],[3,"Similarity"],[3,"Scale"],[6,"Matrix2"],[6,"Rotation2"],[6,"Rotation3"],[6,"Matrix3"],[3,"Perspective3"],[3,"Orthographic3"],[6,"DVector"],[3,"OPoint"],[6,"SVector"],[6,"RowDVector"],[6,"RowSVector"],[6,"DVectorView"],[6,"DVectorViewMut"],[8,"DimAdd"],[6,"Isometry3"],[6,"Translation3"],[6,"DMatrix"],[3,"FullPivLU"],[8,"StorageMut"],[8,"Hash"],[3,"Hessenberg"],[6,"Point2"],[6,"Vector2"],[3,"MatrixIter"],[3,"MatrixIterMut"],[6,"DimProd"],[3,"LU"],[8,"ClosedNeg"],[8,"Normed"],[8,"Iterator"],[3,"QR"],[3,"RowIter"],[3,"RowIterMut"],[6,"Vector1"],[3,"Schur"],[6,"RowVector"],[3,"SimdOption"],[6,"DimMinimum"],[3,"SVD"],[3,"SymmetricEigen"],[8,"DimSub"],[3,"SymmetricTridiagonal"],[8,"IsNotStaticOne"],[8,"DimNameSub"],[6,"DimNameDiff"],[3,"UDU"],[3,"ShapeConstraint"],[3,"X"],[3,"XY"],[3,"XYZ"],[3,"XYZW"],[3,"XYZWA"],[3,"XYZWAB"],[3,"IJKW"],[3,"M2x2"],[3,"M2x3"],[3,"M2x4"],[3,"M2x5"],[3,"M2x6"],[3,"M3x2"],[3,"M3x3"],[3,"M3x4"],[3,"M3x5"],[3,"M3x6"],[3,"M4x2"],[3,"M4x3"],[3,"M4x4"],[3,"M4x5"],[3,"M4x6"],[3,"M5x2"],[3,"M5x3"],[3,"M5x4"],[3,"M5x5"],[3,"M5x6"],[3,"M6x2"],[3,"M6x3"],[3,"M6x4"],[3,"M6x5"],[3,"M6x6"],[3,"DefaultAllocator"],[3,"Init"],[3,"Uninit"],[8,"AbsDiffEq"],[8,"TCategory"],[8,"AbstractRotation"],[6,"Projective3"],[6,"Vector4"],[3,"Reflection"],[6,"Isometry2"],[6,"IsometryMatrix2"],[6,"IsometryMatrix3"],[4,"TGeneral"],[4,"TProjective"],[4,"TAffine"],[8,"SimdValue"],[8,"ClosedDiv"],[8,"Display"],[6,"Similarity3"],[8,"SimdPartialOrd"],[8,"Bounded"],[6,"Point1"],[6,"Point4"],[6,"Point5"],[6,"Point6"],[8,"RelativeEq"],[8,"SuperTCategoryOf"],[8,"UlpsEq"],[6,"RStride"],[6,"CStride"],[3,"PermutationSequence"],[3,"GivensRotation"],[8,"SimdBool"],[8,"Norm"],[8,"Allocator"],[8,"Reallocator"],[8,"DimEq"],[8,"SameDimension"],[8,"SameNumberOfRows"],[8,"SameNumberOfColumns"],[8,"ToConst"],[8,"DimNameAdd"],[8,"DimMul"],[8,"DimNameMul"],[8,"DimDiv"],[8,"DimNameDiv"],[8,"DimNameMin"],[8,"DimMax"],[8,"DimNameMax"],[8,"ToTypenum"],[8,"MatrixIndex"],[8,"MatrixIndexMut"],[8,"ReshapableStorage"],[8,"InitStatus"],[8,"TCategoryMul"]]},\
"num_complex":{"doc":"Complex numbers.","tn":["Complex","Complex32","Complex64","ParseComplexError","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","as_","borrow","borrow","borrow_mut","borrow_mut","clone","conj","default","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","into","into","inv","inv","inv","is_finite","is_infinite","is_nan","is_normal","is_one","is_zero","l1_norm","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powi","powu","product","product","re","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complexd":["A complex number in Cartesian form.","","","","","","","","","","","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns imaginary unit","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Checks if the given complex number is finite","Checks if the given complex number is infinite","Checks if the given complex number is NaN","Checks if the given complex number is normal","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","","","","","","","","","","","","","","","","","","Create a new Complex","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","","","Real portion of the complex number","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,1,9,9,1,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,1,9,1,9,1,1],"f":[0,0,0,0,[1],[[1,[0,[2,3]]]],[[[1,[[0,[2,3]]]]]],[[1,1]],[[[1,[[0,[2,3]]]],[0,[2,3]]]],[[1,[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],1]],[[[1,[[0,[2,3]]]],[1,[[0,[2,3]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[0,[2,4]]]],[1],[[]],[[]],[[]],[[]],[[[1,[2]]],[[1,[2]]]],[[[1,[[0,[2,3,5]]]]],[[1,[[0,[2,3,5]]]]]],[[],[[1,[6]]]],[[1,1]],[[1,[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],1]],[[[1,[[0,[2,3]]]],[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],[0,[2,3]]]],[[1,[0,[2,3]]]],[[[1,[[0,[2,3]]]]]],[1],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[0,[2,4]]]],[[[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[7]],1],8],[[[9,[7]],9],8],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[1,10],11],[[[1,[12]],10],11],[[1,10],11],[[[9,[13]],10],11],[[[9,[12]],10],11],[[]],[[],[[1,[[0,[2,3]]]]]],[[[0,[2,3]]],[[1,[[0,[2,3]]]]]],[14,[[16,[[1,[[0,[15,3]]]]]]]],[[]],[17,[[16,[[1,[[0,[18,3]]]]]]]],[19,[[16,[[1,[[0,[18,3]]]]]]]],[20,[[16,[[1,[[0,[18,3]]]]]]]],[21,[[16,[[1,[[0,[18,3]]]]]]]],[22,[[16,[[1,[[0,[18,3]]]]]]]],[23,[[16,[[1,[[0,[18,3]]]]]]]],[24,[[16,[[1,[[0,[18,3]]]]]]]],[25,[[16,[[1,[[0,[18,3]]]]]]]],[26,[[27,[1]]]],[[26,28],[[27,[[1,[[0,[3,2]]]]]]]],[29,[[16,[[1,[[0,[18,3]]]]]]]],[30,[[16,[[1,[[0,[18,3]]]]]]]],[28,[[16,[[1,[[0,[18,3]]]]]]]],[31,[[16,[[1,[[0,[18,3]]]]]]]],[32,[[16,[[1,[[0,[18,3]]]]]]]],[33,[[16,[[1,[[0,[18,3]]]]]]]],[[[1,[34]]]],[[],[[1,[[0,[2,3]]]]]],0,[[]],[[]],[1],[[[1,[[0,[2,3,5]]]]]],[[[1,[[0,[2,3,5]]]]],[[1,[[0,[2,3,5]]]]]],[[[1,[35]]],8],[[[1,[35]]],8],[[[1,[35]]],8],[[[1,[35]]],8],[[[1,[[0,[2,3]]]]],8],[[[1,[[0,[2,3]]]]],8],[[[1,[[0,[2,36]]]]],[[0,[2,36]]]],[[[1,[[0,[2,3]]]],[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],1]],[[1,[1,[[0,[2,3]]]]]],[[1,1]],[[[1,[[0,[2,3]]]],[0,[2,3]]]],[[[1,[[0,[2,3]]]]]],[[1,[0,[2,3]]]],[1],[[1,1,1],[[1,[[0,[2,3,37]]]]]],[[[1,[[0,[2,3,37]]]],[1,[[0,[2,3,37]]]],[1,[[0,[2,3,37]]]]],[[1,[[0,[2,3,37]]]]]],[[[1,[[0,[2,4,38]]]],[1,[[0,[2,4,38]]]],[1,[[0,[2,4,38]]]]]],[[[1,[[0,[2,4,38]]]],1,1]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[0,[2,4]]]],[1],[[[1,[[0,[2,3,5]]]]]],[[],1],[[[1,[[0,[2,3]]]]],[[0,[2,3]]]],[[],[[1,[[0,[2,3]]]]]],[[1,23]],[[1,25]],[[1,33]],[[1,32]],[[1,20]],[[1,23]],[[1,32]],[[1,20]],[[1,24]],[[1,24]],[[1,31]],[[1,31]],[[1,22]],[[1,22]],[[1,30]],[[1,28]],[[1,28]],[[1,21]],[[1,25]],[[1,33]],[[1,30]],[[1,21]],[[1,29]],[[1,29]],[[[1,[[0,[2,3,5]]]],22],[[1,[[0,[2,3,5]]]]]],[[[1,[[0,[2,3]]]],28],[[1,[[0,[2,3]]]]]],[[],[[1,[[0,[3,2]]]]]],[[],[[1,[[0,[3,2]]]]]],0,[[[1,[[0,[2,3]]]],[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],1]],[[1,[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],[0,[2,3]]]],[[1,1]],[[[1,[[0,[2,3]]]]]],[[1,[0,[2,3]]]],[1],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[0,[2,4]]]],[[[1,[[0,[2,3]]]],[0,[2,3]]],[[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],[1,[[0,[2,3]]]]]],[[1,1]],[[[1,[[0,[2,3]]]]]],[[1,[0,[2,3]]]],[1],[[[1,[[0,[2,3]]]],[0,[2,3]]]],[[1,[1,[[0,[2,3]]]]]],[[[1,[[0,[2,3]]]],1]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[0,[2,4]]]],[[[1,[[0,[2,4]]]]]],[[[1,[[0,[2,4]]]],[1,[[0,[2,4]]]]]],[[],[[1,[[0,[3,2]]]]]],[[],[[1,[[0,[3,2]]]]]],[[[1,[[0,[14,3]]]]],[[16,[17]]]],[[[1,[[0,[14,3]]]]],[[16,[19]]]],[[[1,[[0,[14,3]]]]],[[16,[20]]]],[[[1,[[0,[14,3]]]]],[[16,[21]]]],[[[1,[[0,[14,3]]]]],[[16,[22]]]],[[[1,[[0,[14,3]]]]],[[16,[23]]]],[[[1,[[0,[14,3]]]]],[[16,[24]]]],[[[1,[[0,[14,3]]]]],[[16,[25]]]],[[[1,[[0,[14,3]]]]],[[16,[29]]]],[[[1,[[0,[14,3]]]]],[[16,[30]]]],[[[1,[[0,[14,3]]]]],[[16,[28]]]],[[[1,[[0,[14,3]]]]],[[16,[31]]]],[[[1,[[0,[14,3]]]]],[[16,[32]]]],[[[1,[[0,[14,3]]]]],[[16,[33]]]],[[],27],[[],27],[[],27],[[],27],[[],39],[[],39],[[[1,[[0,[2,3]]]],[0,[2,3]]],[[1,[[0,[2,3]]]]]],[[],[[1,[[0,[2,3]]]]]]],"p":[[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[8,"Neg"],[8,"Default"],[8,"PartialEq"],[15,"bool"],[3,"ParseComplexError"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[15,"f32"],[8,"FromPrimitive"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"str"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[3,"TypeId"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","t":[3,3,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ParseRatioError","Ratio","Rational","Rational32","Rational64","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","cmp","default","denom","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i128","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_i64","to_integer","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u128","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","","","","","","","","","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,13,13,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,13,4,13,4,13,4],"f":[0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[4,4],4],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,10,11]]]],4],[[9,[[4,[[0,[1,2,10,11]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,10,12]]]],4],[[9,[[4,[[0,[1,2,10,12]]]]]]]],[[[4,[1]]],[[4,[1]]]],[13,13],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],14],[[],[[4,[[0,[1,2]]]]]],[4],[[4,4],4],[[4,4],4],[4,4],[[4,4],4],[4,4],[4,4],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[13,13],15],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[16,1,2]]]],17],18],[[[4,[[0,[19,1,2]]]],17],18],[[[4,[[0,[20,1,2]]]],17],18],[[[4,[[0,[21,1,2]]]],17],18],[[[4,[22]],17],18],[[[4,[[0,[23,1,2]]]],17],18],[[[4,[[0,[24,1,2]]]],17],18],[[[4,[[0,[25,1,2]]]],17],18],[[13,17],18],[[13,17],18],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[]],[[],4],[[],4],[[]],[26,[[9,[[4,[27]]]]]],[26,[[9,[[4,[28]]]]]],[26,[[9,[[4,[29]]]]]],[26,[[9,[[4,[30]]]]]],[26,[[9,[[4,[31]]]]]],[26,[[9,[[4,[32]]]]]],[26,[[9,[[4,[33]]]]]],[26,[[9,[[4,[34]]]]]],[26,[[9,[[4,[35]]]]]],[26,[[9,[[4,[36]]]]]],[26,[[9,[[4,[37]]]]]],[26,[[9,[[4,[38]]]]]],[39,[[9,[[4,[28]]]]]],[39,[[9,[[4,[34]]]]]],[39,[[9,[[4,[35]]]]]],[39,[[9,[[4,[36]]]]]],[39,[[9,[[4,[37]]]]]],[39,[[9,[[4,[33]]]]]],[39,[[9,[[4,[38]]]]]],[39,[[9,[[4,[27]]]]]],[39,[[9,[[4,[32]]]]]],[39,[[9,[[4,[31]]]]]],[39,[[9,[[4,[30]]]]]],[39,[[9,[[4,[29]]]]]],[31,[[9,[[4,[35]]]]]],[31,[[9,[[4,[37]]]]]],[31,[[9,[[4,[38]]]]]],[31,[[9,[[4,[36]]]]]],[31,[[9,[[4,[29]]]]]],[31,[[9,[[4,[33]]]]]],[31,[[9,[[4,[34]]]]]],[31,[[9,[[4,[32]]]]]],[31,[[9,[[4,[28]]]]]],[31,[[9,[[4,[27]]]]]],[31,[[9,[[4,[31]]]]]],[31,[[9,[[4,[30]]]]]],[37,[[9,[[4,[30]]]]]],[37,[[9,[[4,[27]]]]]],[37,[[9,[[4,[33]]]]]],[37,[[9,[[4,[35]]]]]],[37,[[9,[[4,[37]]]]]],[37,[[9,[[4,[28]]]]]],[37,[[9,[[4,[36]]]]]],[37,[[9,[[4,[29]]]]]],[37,[[9,[[4,[31]]]]]],[37,[[9,[[4,[32]]]]]],[37,[[9,[[4,[34]]]]]],[37,[[9,[[4,[38]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[40,[[42,[[4,[[0,[41,1,2]]]],13]]]],[[40,30],[[42,[[4,[[0,[1,2]]]],13]]]],[33,[[9,[[4,[30]]]]]],[33,[[9,[[4,[38]]]]]],[33,[[9,[[4,[28]]]]]],[33,[[9,[[4,[34]]]]]],[33,[[9,[[4,[37]]]]]],[33,[[9,[[4,[36]]]]]],[33,[[9,[[4,[29]]]]]],[33,[[9,[[4,[27]]]]]],[33,[[9,[[4,[33]]]]]],[33,[[9,[[4,[32]]]]]],[33,[[9,[[4,[31]]]]]],[33,[[9,[[4,[35]]]]]],[29,[[9,[[4,[37]]]]]],[29,[[9,[[4,[34]]]]]],[29,[[9,[[4,[36]]]]]],[29,[[9,[[4,[27]]]]]],[29,[[9,[[4,[29]]]]]],[29,[[9,[[4,[33]]]]]],[29,[[9,[[4,[28]]]]]],[29,[[9,[[4,[30]]]]]],[29,[[9,[[4,[38]]]]]],[29,[[9,[[4,[35]]]]]],[29,[[9,[[4,[31]]]]]],[29,[[9,[[4,[32]]]]]],[[[4,[[0,[1,2,43]]]]]],[4],[[]],[[]],[4,4],[4,4],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[[[4,[[0,[1,2,3]]]]],15],[[[4,[[0,[1,2]]]]],15],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[4,4],4],[4,4],[[4,4],4],[4,4],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[14]]]],[[[4,[[0,[1,2,[44,[33]]]]]],31],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],28],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],28],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,28],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],32],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],32],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],30],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[29]]]]]],29],[[4,[[0,[1,2,[44,[29]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[29]]]]]],29],[[4,[[0,[1,2,[44,[29]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],33],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],33],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],38],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],38],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],34],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[28]]]]]],34],[[4,[[0,[1,2,[44,[28]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],35],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[32]]]]]],35],[[4,[[0,[1,2,[44,[32]]]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],27],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,27],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[38]]]]]],27],[[4,[[0,[1,2,[44,[38]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[33]]]]]],31],[[4,[[0,[1,2,[44,[33]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[29]]]]]],37],[[4,[[0,[1,2,[44,[29]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[29]]]]]],37],[[4,[[0,[1,2,[44,[29]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],36],[[4,[[0,[1,2,[44,[30]]]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[44,[30]]]]]],36],[[4,[[0,[1,2,[44,[30]]]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[4,4],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],4]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[30]]],[[9,[39]]]],[[[4,[37]]],[[9,[39]]]],[[[4,[34]]],[[9,[39]]]],[[[4,[29]]],[[9,[39]]]],[[[4,[35]]],[[9,[39]]]],[[[4,[38]]],[[9,[39]]]],[[[4,[36]]],[[9,[39]]]],[[[4,[27]]],[[9,[39]]]],[[[4,[32]]],[[9,[39]]]],[[[4,[28]]],[[9,[39]]]],[[[4,[36]]],[[9,[31]]]],[[[4,[27]]],[[9,[31]]]],[[[4,[28]]],[[9,[31]]]],[[[4,[37]]],[[9,[31]]]],[[[4,[30]]],[[9,[31]]]],[[[4,[34]]],[[9,[31]]]],[[[4,[38]]],[[9,[31]]]],[[[4,[35]]],[[9,[31]]]],[[[4,[29]]],[[9,[31]]]],[[[4,[32]]],[[9,[31]]]],[[[4,[36]]],[[9,[37]]]],[[[4,[32]]],[[9,[37]]]],[[[4,[35]]],[[9,[37]]]],[[[4,[30]]],[[9,[37]]]],[[[4,[27]]],[[9,[37]]]],[[[4,[34]]],[[9,[37]]]],[[[4,[38]]],[[9,[37]]]],[[[4,[28]]],[[9,[37]]]],[[[4,[29]]],[[9,[37]]]],[[[4,[37]]],[[9,[37]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[[4,[29]]],[[9,[33]]]],[[[4,[32]]],[[9,[33]]]],[[[4,[27]]],[[9,[33]]]],[[[4,[35]]],[[9,[33]]]],[[[4,[34]]],[[9,[33]]]],[[[4,[38]]],[[9,[33]]]],[[[4,[30]]],[[9,[33]]]],[[[4,[28]]],[[9,[33]]]],[[[4,[37]]],[[9,[33]]]],[[[4,[36]]],[[9,[33]]]],[[[4,[34]]],[[9,[29]]]],[[[4,[35]]],[[9,[29]]]],[[[4,[29]]],[[9,[29]]]],[[[4,[37]]],[[9,[29]]]],[[[4,[36]]],[[9,[29]]]],[[[4,[38]]],[[9,[29]]]],[[[4,[28]]],[[9,[29]]]],[[[4,[30]]],[[9,[29]]]],[[[4,[27]]],[[9,[29]]]],[[[4,[32]]],[[9,[29]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],42],[[],42],[[],42],[[],42],[[],45],[[],45],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"bool"],[8,"LowerExp"],[3,"Formatter"],[6,"Result"],[8,"Binary"],[8,"Octal"],[8,"Display"],[8,"Debug"],[8,"LowerHex"],[8,"UpperExp"],[8,"UpperHex"],[15,"f32"],[15,"isize"],[15,"u8"],[15,"u64"],[15,"u32"],[15,"i128"],[15,"u16"],[15,"u128"],[15,"i8"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"usize"],[15,"f64"],[15,"str"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[2,2,2,2,2,2,2,2,2,2,2,13,2,2,2,4,2,16,2,13,2,2,8,8,8,8,2,8,8,2,3,2,2,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,0,2,2,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,2,0,0,2,0,0,2,11,11,11,11,11,11,2,8,8,8,10,10,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,11,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,11,10,10,11,10,10,10,10,10,10,10,11,10,10,10,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,8,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_rem_euclid","div_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,34,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,34,0,0,2,5,5,0,0,0,0,0,0,0,2,5,2,5,2,5,0,0,0,0,35,36,35,37,0,0,0,0,38,0,10,39,39,39,39,39,39,39,39,39,39,39,39,39,39,12,12,12,12,12,12,12,12,12,12,12,12,12,12,40,40,40,40,40,40,40,40,40,40,0,0,0,40,40,40,40,40,40,40,40,40,41,42,41,41,41,41,41,41,41,41,41,41,42,42,41,41,41,41,42,41,41,41,41,41,42,41,42,41,42,41,42,41,41,42,41,42,41,42,41,42,41,42,41,42,41,41,41,41,41,41,42,42,41,41,42,42,41,42,41,41,42,41,42,41,42,41,41,41,42,41,42,41,42,41,42,41,41,41,41,41,41,42,41,42,41,41,42,0,0,28,29,0,28,28,29,0,29,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,31,46,47,48,49,50,0,0,51,51,52,52,0,53,53,0,0,54,54,55,0,0,0,56,57,58,0,0,0,0,59,60,61,59,62,0,0,0,0,0,0,63,64,65,66,67,68,69,0,0,0,69,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,33,0,33,33,33,0,33],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],8],[[],8],[[],8],[[],8],[[],9],[[],9],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[10,[[11,[10]]]],[12,11],[13,11],[14,11],[15,11],[16,11],[17,11],[18,11],[19,11],[20,11],[21,11],[22,11],[7,11],[23,11],[24,11],[25,11],[[],[[11,[13]]]],[[],[[11,[14]]]],[[],[[11,[15]]]],[[],[[11,[16]]]],[[],[[11,[17]]]],[[],[[11,[18]]]],[[],[[11,[19]]]],[[],[[11,[20]]]],[[],[[11,[21]]]],[[],[[11,[22]]]],[[],[[11,[7]]]],[[],[[11,[23]]]],[[],[[11,[24]]]],[[],[[11,[25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],27],[[],27],[[],28],[[]],[[]],[[]],[[],29],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[7,11],[7,11],[[],11],0,0,[[],11],[[],11],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[30,28,31]],25],[[11,[[0,[30,28,31]]]]]],[[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,32]]]]]]]]]]]]]]]]]],25],[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,[32,[[0,[30,28,32]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[33,33],[[]],[[33,33],33],[[]],[[],27],[[],27],[33,33],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]},\
"paste":{"doc":"github crates-io docs-rs","t":[14],"n":["paste"],"q":["paste"],"d":[""],"i":[0],"f":[0],"p":[]},\
"simba":{"doc":"<strong>Simba</strong> is a crate defining a set of trait for writing code …","tn":["scalar","simd","ClosedAdd","ClosedDiv","ClosedMul","ClosedNeg","ClosedSub","ComplexField","Field","RealField","RealField","SubsetOf","SupersetOf","abs","acos","acosh","argument","asin","asinh","atan","atan2","atanh","cbrt","ceil","clamp","conjugate","copysign","cos","cosc","cosc","cosh","coshc","coshc","e","exp","exp2","exp_m1","floor","frac_1_pi","frac_2_pi","frac_2_sqrt_pi","frac_pi_2","frac_pi_3","frac_pi_4","frac_pi_6","frac_pi_8","fract","from_real","from_subset","from_superset","from_superset","from_superset_unchecked","hypot","imaginary","is_finite","is_in_subset","is_in_subset","is_sign_negative","is_sign_positive","ln","ln_10","ln_1p","ln_2","log","log10","log10_e","log2","log2_e","max","max_value","min","min_value","modulus","modulus_squared","mul_add","norm1","pi","powc","powf","powi","real","recip","round","scale","signum","signum","sin","sin_cos","sinc","sinc","sinh","sinh_cosh","sinh_cosh","sinhc","sinhc","sqrt","tan","tanh","to_exp","to_exp","to_polar","to_polar","to_subset","to_subset","to_subset_unchecked","to_superset","trunc","try_sqrt","two_pi","unscale","AutoBoolSimd","AutoBoolx1","AutoBoolx16","AutoBoolx2","AutoBoolx32","AutoBoolx4","AutoBoolx8","AutoF32x16","AutoF32x2","AutoF32x4","AutoF32x8","AutoF64x2","AutoF64x4","AutoF64x8","AutoI128x1","AutoI128x2","AutoI128x4","AutoI16x16","AutoI16x2","AutoI16x32","AutoI16x4","AutoI16x8","AutoI32x16","AutoI32x2","AutoI32x4","AutoI32x8","AutoI64x2","AutoI64x4","AutoI64x8","AutoI8x16","AutoI8x2","AutoI8x32","AutoI8x4","AutoI8x8","AutoIsizex2","AutoIsizex4","AutoIsizex8","AutoSimd","AutoU128x1","AutoU128x2","AutoU128x4","AutoU16x16","AutoU16x2","AutoU16x32","AutoU16x4","AutoU16x8","AutoU32x16","AutoU32x2","AutoU32x4","AutoU32x8","AutoU64x2","AutoU64x4","AutoU64x8","AutoU8x16","AutoU8x2","AutoU8x32","AutoU8x4","AutoU8x8","AutoUsizex2","AutoUsizex4","AutoUsizex8","Element","PrimitiveSimdValue","SimdBool","SimdBool","SimdComplexField","SimdOption","SimdPartialOrd","SimdRealField","SimdRealField","SimdSigned","SimdValue","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","all","all","all","all","all","all","all","and","and","and","and","and","and","and","any","any","any","any","any","any","any","bitand","bitand","bitand","bitand","bitand","bitand","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitmask","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","extract_unchecked","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i16","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_i8","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_isize","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_simd_real","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_superset_unchecked","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u16","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_u8","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","from_usize","if_else","if_else","if_else","if_else","if_else","if_else","if_else","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else2","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","if_else3","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_negative","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_simd_positive","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","is_zero","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","lanes","map_lanes","map_lanes","mask","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","neg","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","none","none","none","none","none","none","none","not","not","not","not","not","not","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","one","option","or","or","or","or","or","or","or","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","replace_unchecked","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","select","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_abs_sub","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acos","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_acosh","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_argument","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asin","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_asinh","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atan2","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_atanh","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_cbrt","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_ceil","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_clamp","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_conjugate","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_copysign","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cos","simd_cosc","simd_cosc","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_cosh","simd_coshc","simd_coshc","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_default_epsilon","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_e","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_eq","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp2","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_exp_m1","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_floor","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_1_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_2_sqrt_pi","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_2","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_3","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_4","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_6","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_frac_pi_8","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_fract","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_ge","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_gt","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_max","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_min","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_product","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_horizontal_sum","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_hypot","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_imaginary","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_le","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_10","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_1p","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_ln_2","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log10_e","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_log2_e","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_lt","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_max","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_min","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_modulus_squared","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_mul_add","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_ne","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_norm1","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_pi","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powc","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powf","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_powi","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_real","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_recip","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_round","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_scale","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_signum","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sin_cos","simd_sinc","simd_sinc","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh","simd_sinh_cosh","simd_sinh_cosh","simd_sinhc","simd_sinhc","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_sqrt","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tan","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_tanh","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_exp","simd_to_polar","simd_to_polar","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_trunc","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_two_pi","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unscale","simd_unwrap","simd_unwrap_or","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","splat","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","to_superset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","xor","xor","xor","xor","xor","xor","xor","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zero","zip_map_lanes","zip_map_lanes"],"q":["simba","","simba::scalar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","simba::simdd":["Traits implemented by scalar, non-SIMD, types.","Traits implemented by SIMD types and non-SIMD types.","Trait <strong>alias</strong> for <code>Add</code> and <code>AddAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Div</code> and <code>DivAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Mul</code> and <code>MulAssign</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Neg</code> with result of type <code>Self</code>.","Trait <strong>alias</strong> for <code>Sub</code> and <code>SubAssign</code> with result of type <code>Self</code>.","Trait shared by all complex fields and its subfields (like …","Trait implemented by fields, i.e., complex numbers and …","Trait shared by all reals.","","Nested sets and conversions between them (using an …","Nested sets and conversions between them. Useful to work …","The absolute value of this complex number: …","","","The argument of this complex number.","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","Builds a pure-real complex number from the given value.","The inclusion map: converts <code>self</code> to the equivalent element …","The inverse inclusion map: attempts to construct <code>self</code> from …","The inverse inclusion map: attempts to construct <code>self</code> from …","Use with care! Same as <code>self.to_superset</code> but without any …","Computes (self.conjugate() * self + other.conjugate() * …","The imaginary part of this complex number.","","Checks if <code>element</code> is actually part of the subset <code>Self</code> (and …","Checks if <code>self</code> is actually part of its subset <code>T</code> (and can …","Is the sign of this real number negative?","Is the sign of this real number positive?","","","","","","","","","","","The largest finite positive value representable using this …","","The smallest finite positive value representable using …","The modulus of this complex number.","The squared modulus of this complex number.","","The sum of the absolute value of this complex number’s …","","","","","The real part of this complex number.","","","Multiplies this complex number by <code>factor</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","Cardinal sine","Cardinal sine","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","The inverse inclusion map: attempts to construct <code>self</code> from …","The inverse inclusion map: attempts to construct <code>self</code> from …","Use with care! Same as <code>self.to_subset</code> but without any …","The inclusion map: converts <code>self</code> to the equivalent element …","","","","Divides this complex number by <code>factor</code>.","A SIMD boolean structure that implements all the relevant …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A SIMD structure that implements all the relevant traits …","","","","","","","","","","","","","","","","","","","","","","","","The type of the elements of each lane of this SIMD value.","Marker trait implemented by SIMD and non-SIMD primitive …","Lane-wise generalization of <code>bool</code> for SIMD booleans.","Type of the result of comparing two SIMD values like <code>self</code>.","Lane-wise generalisation of <code>ComplexField</code> for SIMD complex …","Generalization of Option for SIMD computation.","Lane-wise generalization of the standard <code>PartialOrd</code> for …","Lanewise generalization of <code>RealField</code> for SIMD reals.","Type of the coefficients of a complex number.","A lane-wise generalization of <code>num::Signed</code> for SIMD values.","Base trait for every SIMD types.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes true?","","","","","","","Lane-wise bitwise and of the vector elements.","","","","","","","Is any vector lane true?","","","","","","","","","","","","","A bit mask representing the boolean state of each lanes of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the i-th lane of <code>self</code> without bound-checking.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchangeduilds a pure-real complex number from the given valueerges the value of <code>if_value()</code> and <code>else_value()</code> depending …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","Merges the value of <code>if_value()</code> and <code>else_if.1()</code> and …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Tests which lane is negative.","","","","","","","","Tests which lane is positive.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of lanes of this SIMD value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code>.","Applies a function to each lane of <code>self</code>.","Return the underlying SIMD boolean mask.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new SIMD option by combining a value and a mask …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Are all vector lanes false?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts this SIMD option to a strandard Option.","Lane-wise bitwise or of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Replaces the i-th lane of <code>self</code> by <code>val</code> without …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Merges <code>self</code> and <code>other</code> depending on the lanes of <code>cond</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The absolute value of this complex number: …","The absolute value of each lane of <code>self</code>.","","","","","","","","","","","","","","","The absolute difference of each lane of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","The argument of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Clamps each lane of <code>self</code> between the corresponding lane of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Copies the sign of <code>sign</code> to <code>self</code>.","","","","","","","","","","","","","","","","Cardinal cos","Cardinal cos","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>equal</em> <code>==</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater or equal</em> <code>&gt;=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>greater than</em> <code>&gt;</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The max value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The min value among all lanes of <code>self</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes the product of all the lanes of <code>self</code>.","","","","","","","","Computes the sum of all the lanes of <code>self</code>.","","","","","","","","Computes (self.conjugate() * self + other.conjugate() * …","","","","","","","","The imaginary part of this complex number.","","","","","","","","Lanewise <em>less or equal</em> <code>&lt;=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise <em>less than</em> <code>&lt;</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise max value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lanewise min value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The modulus of this complex number.","","","","","","","","The squared modulus of this complex number.","","","","","","","","","","","","","","","","Lanewise <em>not equal</em> <code>!=</code> comparison.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The sum of the absolute value of this complex number’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The real part of this complex number.","","","","","","","","","","","","","","","","","","","","","","","","Multiplies this complex number by <code>factor</code>.","","","","","","","","The signum of each lane of <code>Self</code>.","The exponential part of this complex number: …","The exponential part of this complex number: …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cardinal sine","Cardinal sine","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The exponential form of this complex number: (modulus, …","The exponential form of this complex number: (modulus, …","","","","","","","","The polar form of this complex number: (modulus, arg)","The polar form of this complex number: (modulus, arg)","","","","","","","","","","","","","","","","","Divides this complex number by <code>factor</code>.","","","","","","","","Retrieve the underlying value if all the bits of <code>self.mask</code> …","Merges the value of <code>self</code> with the value of <code>other</code>.","Initializes an SIMD value with each lanes set to <code>val</codeeturn the underlying unfiltered value.","Lane-wise bitwise xor of the vector elements.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies a function to each lane of <code>self</code> paired with the …","Applies a function to each lane of <code>self</code> paired with the …"],"i":[0,0,0,0,0,0,0,0,0,0,31,0,0,31,31,31,31,31,31,31,32,31,31,31,32,31,32,31,31,31,31,31,31,32,31,31,31,31,32,32,32,32,32,32,32,32,31,31,33,34,34,34,31,31,31,34,33,32,32,31,32,31,32,31,31,32,31,32,32,32,32,32,31,31,31,31,32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,33,33,33,34,31,31,32,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,25,0,0,0,0,35,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,36,4,4,4,4,4,4,36,4,4,4,4,4,4,36,4,4,4,4,4,4,4,4,4,4,4,4,36,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,27,4,7,27,4,7,4,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,27,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,36,4,4,4,4,4,4,36,4,4,4,4,4,4,36,4,4,4,4,4,4,27,4,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,37,4,4,4,4,4,4,4,37,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,25,27,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,27,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,36,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,27,36,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,37,4,4,4,4,4,4,4,4,4,4,4,4,4,4,37,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,35,35,4,4,4,4,4,4,4,35,35,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,39,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,37,35,35,4,4,4,4,4,4,4,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,35,35,4,4,4,4,4,4,4,35,35,35,35,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,35,35,4,4,4,4,4,4,4,35,35,35,4,4,4,4,4,4,4,38,4,4,4,4,4,4,4,35,4,4,4,4,4,4,4,27,27,25,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,27,4,7,27,4,7,27,4,7,27,36,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,25,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[]],[[],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],[[]],[[]],[[]],[[],1],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[],5],[4,5],[4,5],[4,5],[4,5],[4,5],[4,5],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[6]]],[[4,[6]]]],[[[7,[6]]],[[7,[6]]]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[[4,[8]],4],2],[[[7,[8]],7],2],[9],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[9],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[[4,[12]],10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[4,10],11],[[[7,[12]],10],11],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[13,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[14,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[15,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[3,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[16,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[17,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[18,[[1,[4]]]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[[19,20],[[21,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,[[1,[4]]]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[22,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[20,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[5,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[23,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[9,[[1,[4]]]],[[24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[4,24,24],25],[[]],[[]],[[]],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[4],[4],[4],[4],[4],[4],[4],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[26],[26],[[[27,[25]]]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[25,[[27,[25]]]],[[9,9,9,9,9,9,9,9],4],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],4],[[18,18,18,18],4],[[18,18,18,18,18,18,18,18],4],[[2,2,2,2],4],[[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],4],[[17,17,17,17,17,17,17,17],4],[[2,2],4],[[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],4],[2,4],[28,4],[[15,15,15,15,15,15,15,15],4],[[16,16,16,16,16,16,16,16],4],[[9,9,9,9],4],[[9,9],4],[[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13],4],[[28,28],4],[[22,22,22,22,22,22,22,22],4],[[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23],4],[[17,17],4],[[2,2,2,2,2,2,2,2],4],[[16,16],4],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],4],[[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],4],[[23,23,23,23,23,23,23,23],4],[[28,28,28,28],4],[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],4],[[3,3,3,3,3,3,3,3],4],[[22,22],4],[[23,23,23,23],4],[[22,22,22,22],4],[[23,23],4],[[5,5,5,5,5,5,5,5],4],[[3,3,3,3],4],[[17,17,17,17],4],[[3,3],4],[[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],4],[[13,13],4],[[13,13,13,13],4],[[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15],4],[[13,13,13,13,13,13,13,13],4],[[16,16,16,16],4],[[14,14],4],[[14,14,14,14],4],[[14,14,14,14,14,14,14,14],4],[29,4],[[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],4],[[5,5,5,5],4],[[5,5],4],[[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20],4],[[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22],4],[[20,20,20,20,20,20,20,20],4],[[20,20,20,20],4],[[20,20],4],[[29,29],4],[[29,29,29,29],4],[[18,18],4],[[15,15],4],[[15,15,15,15],4],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[27,[25]]],[[1,[25]]]],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[9],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[9],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[4,9]],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[4,4,4],4],[[]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[3],[[4,3],4],[[4,3],4],[[4,3],4],[[4,3],4],[[4,3],4],[[4,3],4],[[4,3],4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[[]],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[[]],[[]],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[[27,[25]]],25],[[[27,[25]],24],25],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[[4,4]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],30],[[],30],[[],30],[[[27,[25]]]],[[],2],[4,2],[4,2],[4,2],[4,2],[4,2],[4,2],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[26],[26]],"p":[[4,"Option"],[15,"bool"],[15,"i32"],[3,"AutoSimd"],[15,"u64"],[8,"Clone"],[3,"AutoBoolSimd"],[8,"PartialEq"],[15,"usize"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"str"],[15,"u32"],[4,"Result"],[15,"u16"],[15,"u8"],[8,"FnOnce"],[8,"SimdValue"],[8,"Fn"],[3,"SimdOption"],[15,"u128"],[15,"i128"],[3,"TypeId"],[8,"ComplexField"],[8,"RealField"],[8,"SupersetOf"],[8,"SubsetOf"],[8,"SimdComplexField"],[8,"SimdBool"],[8,"SimdSigned"],[8,"SimdRealField"],[8,"SimdPartialOrd"]]},\
"typenum":{"doc":"This crate provides type-level numbers evaluated at …","t":[2,2,2,3,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,14,14,0,11,11,11,11,11,11,11,11,11,11,11,11,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,0,14,0,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,0,0,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,2,11,11,11,2,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,8,18,18,18,18,18,18,18,18,18,18,8,8,8,8,8,18,18,18,18,18,18,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,18,8,8,8,8,8,8,8,8,8,8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,8,8,8,10,10,10,10,10,10,10,10,10,10,10,10,8,6,16,16,2,8,6,3,3,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ATerm","B0","B1","Equal","False","Greater","Less","N1","N2","NInt","P1","P2","PInt","TArr","True","U0","U1","U2","UInt","UTerm","Z0","array","assert_type","assert_type_eq","bit","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","cmp","consts","default","default","default","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","int","into","into","into","marker_traits","op","operator_aliases","partial_cmp","partial_cmp","partial_cmp","tarr","to_ordering","to_ordering","to_ordering","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","type_operators","uint","ATerm","TArr","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","mul","mul","neg","neg","partial_cmp","partial_cmp","partial_div","partial_div","rem","rem","sub","sub","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","Bit","bitand","bitand","bitand","bitor","bitor","bitor","bitxor","bitxor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","eq","eq","fmt","fmt","from","from","hash","hash","into","into","max","max","max","max","min","min","min","min","new","new","new","new","not","not","partial_cmp","partial_cmp","to_bool","to_bool","to_u8","to_u8","try_from","try_from","try_into","try_into","type_id","type_id","B0","B1","False","N1","N10","N100","N1000","N10000","N100000","N1000000","N10000000","N100000000","N1000000000","N10000000000","N100000000000","N1000000000000","N10000000000000","N100000000000000","N1000000000000000","N10000000000000000","N100000000000000000","N1000000000000000000","N1001","N1002","N1003","N1004","N1005","N1006","N1007","N1008","N1009","N101","N1010","N1011","N1012","N1013","N1014","N1015","N1016","N1017","N1018","N1019","N102","N1020","N1021","N1022","N1023","N1024","N103","N104","N1048576","N105","N106","N107","N1073741824","N108","N109","N1099511627776","N11","N110","N111","N112","N1125899906842624","N113","N114","N115","N1152921504606846976","N116","N117","N118","N119","N12","N120","N121","N122","N123","N124","N125","N126","N127","N128","N129","N13","N130","N131","N131072","N132","N133","N134","N134217728","N135","N136","N137","N137438953472","N138","N139","N14","N140","N140737488355328","N141","N142","N143","N144","N144115188075855872","N145","N146","N147","N148","N149","N15","N150","N151","N152","N153","N154","N155","N156","N157","N158","N159","N16","N160","N161","N162","N163","N16384","N164","N165","N166","N167","N16777216","N168","N169","N17","N170","N171","N17179869184","N172","N173","N174","N175","N17592186044416","N176","N177","N178","N179","N18","N180","N18014398509481984","N181","N182","N183","N184","N185","N186","N187","N188","N189","N19","N190","N191","N192","N193","N194","N195","N196","N197","N198","N199","N2","N20","N200","N201","N202","N203","N204","N2048","N205","N206","N207","N208","N209","N2097152","N21","N210","N211","N212","N213","N214","N2147483648","N215","N216","N217","N218","N219","N2199023255552","N22","N220","N221","N222","N223","N224","N225","N2251799813685248","N226","N227","N228","N229","N23","N230","N2305843009213693952","N231","N232","N233","N234","N235","N236","N237","N238","N239","N24","N240","N241","N242","N243","N244","N245","N246","N247","N248","N249","N25","N250","N251","N252","N253","N254","N255","N256","N257","N258","N259","N26","N260","N261","N262","N262144","N263","N264","N265","N266","N267","N268","N268435456","N269","N27","N270","N271","N272","N273","N274","N274877906944","N275","N276","N277","N278","N279","N28","N280","N281","N281474976710656","N282","N283","N284","N285","N286","N287","N288","N288230376151711744","N289","N29","N290","N291","N292","N293","N294","N295","N296","N297","N298","N299","N3","N30","N300","N301","N302","N303","N304","N305","N306","N307","N308","N309","N31","N310","N311","N312","N313","N314","N315","N316","N317","N318","N319","N32","N320","N321","N322","N323","N324","N325","N326","N327","N32768","N328","N329","N33","N330","N331","N332","N333","N334","N335","N33554432","N336","N337","N338","N339","N34","N340","N341","N342","N343","N34359738368","N344","N345","N346","N347","N348","N349","N35","N350","N351","N35184372088832","N352","N353","N354","N355","N356","N357","N358","N359","N36","N360","N36028797018963968","N361","N362","N363","N364","N365","N366","N367","N368","N369","N37","N370","N371","N372","N373","N374","N375","N376","N377","N378","N379","N38","N380","N381","N382","N383","N384","N385","N386","N387","N388","N389","N39","N390","N391","N392","N393","N394","N395","N396","N397","N398","N399","N4","N40","N400","N401","N402","N403","N404","N405","N406","N407","N408","N409","N4096","N41","N410","N411","N412","N413","N414","N415","N416","N417","N418","N419","N4194304","N42","N420","N421","N422","N423","N424","N425","N426","N427","N428","N429","N4294967296","N43","N430","N431","N432","N433","N434","N435","N436","N437","N438","N439","N4398046511104","N44","N440","N441","N442","N443","N444","N445","N446","N447","N448","N449","N45","N450","N4503599627370496","N451","N452","N453","N454","N455","N456","N457","N458","N459","N46","N460","N461","N4611686018427387904","N462","N463","N464","N465","N466","N467","N468","N469","N47","N470","N471","N472","N473","N474","N475","N476","N477","N478","N479","N48","N480","N481","N482","N483","N484","N485","N486","N487","N488","N489","N49","N490","N491","N492","N493","N494","N495","N496","N497","N498","N499","N5","N50","N500","N501","N502","N503","N504","N505","N506","N507","N508","N509","N51","N510","N511","N512","N513","N514","N515","N516","N517","N518","N519","N52","N520","N521","N522","N523","N524","N524288","N525","N526","N527","N528","N529","N53","N530","N531","N532","N533","N534","N535","N536","N536870912","N537","N538","N539","N54","N540","N541","N542","N543","N544","N545","N546","N547","N548","N549","N549755813888","N55","N550","N551","N552","N553","N554","N555","N556","N557","N558","N559","N56","N560","N561","N562","N562949953421312","N563","N564","N565","N566","N567","N568","N569","N57","N570","N571","N572","N573","N574","N575","N576","N576460752303423488","N577","N578","N579","N58","N580","N581","N582","N583","N584","N585","N586","N587","N588","N589","N59","N590","N591","N592","N593","N594","N595","N596","N597","N598","N599","N6","N60","N600","N601","N602","N603","N604","N605","N606","N607","N608","N609","N61","N610","N611","N612","N613","N614","N615","N616","N617","N618","N619","N62","N620","N621","N622","N623","N624","N625","N626","N627","N628","N629","N63","N630","N631","N632","N633","N634","N635","N636","N637","N638","N639","N64","N640","N641","N642","N643","N644","N645","N646","N647","N648","N649","N65","N650","N651","N652","N653","N654","N655","N65536","N656","N657","N658","N659","N66","N660","N661","N662","N663","N664","N665","N666","N667","N668","N669","N67","N670","N671","N67108864","N672","N673","N674","N675","N676","N677","N678","N679","N68","N680","N681","N682","N683","N684","N685","N686","N687","N68719476736","N688","N689","N69","N690","N691","N692","N693","N694","N695","N696","N697","N698","N699","N7","N70","N700","N701","N702","N703","N70368744177664","N704","N705","N706","N707","N708","N709","N71","N710","N711","N712","N713","N714","N715","N716","N717","N718","N719","N72","N720","N72057594037927936","N721","N722","N723","N724","N725","N726","N727","N728","N729","N73","N730","N731","N732","N733","N734","N735","N736","N737","N738","N739","N74","N740","N741","N742","N743","N744","N745","N746","N747","N748","N749","N75","N750","N751","N752","N753","N754","N755","N756","N757","N758","N759","N76","N760","N761","N762","N763","N764","N765","N766","N767","N768","N769","N77","N770","N771","N772","N773","N774","N775","N776","N777","N778","N779","N78","N780","N781","N782","N783","N784","N785","N786","N787","N788","N789","N79","N790","N791","N792","N793","N794","N795","N796","N797","N798","N799","N8","N80","N800","N801","N802","N803","N804","N805","N806","N807","N808","N809","N81","N810","N811","N812","N813","N814","N815","N816","N817","N818","N819","N8192","N82","N820","N821","N822","N823","N824","N825","N826","N827","N828","N829","N83","N830","N831","N832","N833","N834","N835","N836","N837","N838","N8388608","N839","N84","N840","N841","N842","N843","N844","N845","N846","N847","N848","N849","N85","N850","N851","N852","N853","N854","N855","N856","N857","N858","N8589934592","N859","N86","N860","N861","N862","N863","N864","N865","N866","N867","N868","N869","N87","N870","N871","N872","N873","N874","N875","N876","N877","N878","N879","N8796093022208","N88","N880","N881","N882","N883","N884","N885","N886","N887","N888","N889","N89","N890","N891","N892","N893","N894","N895","N896","N897","N898","N899","N9","N90","N900","N9007199254740992","N901","N902","N903","N904","N905","N906","N907","N908","N909","N91","N910","N911","N912","N913","N914","N915","N916","N917","N918","N919","N92","N920","N921","N922","N923","N924","N925","N926","N927","N928","N929","N93","N930","N931","N932","N933","N934","N935","N936","N937","N938","N939","N94","N940","N941","N942","N943","N944","N945","N946","N947","N948","N949","N95","N950","N951","N952","N953","N954","N955","N956","N957","N958","N959","N96","N960","N961","N962","N963","N964","N965","N966","N967","N968","N969","N97","N970","N971","N972","N973","N974","N975","N976","N977","N978","N979","N98","N980","N981","N982","N983","N984","N985","N986","N987","N988","N989","N99","N990","N991","N992","N993","N994","N995","N996","N997","N998","N999","P1","P10","P100","P1000","P10000","P100000","P1000000","P10000000","P100000000","P1000000000","P10000000000","P100000000000","P1000000000000","P10000000000000","P100000000000000","P1000000000000000","P10000000000000000","P100000000000000000","P1000000000000000000","P1001","P1002","P1003","P1004","P1005","P1006","P1007","P1008","P1009","P101","P1010","P1011","P1012","P1013","P1014","P1015","P1016","P1017","P1018","P1019","P102","P1020","P1021","P1022","P1023","P1024","P103","P104","P1048576","P105","P106","P107","P1073741824","P108","P109","P1099511627776","P11","P110","P111","P112","P1125899906842624","P113","P114","P115","P1152921504606846976","P116","P117","P118","P119","P12","P120","P121","P122","P123","P124","P125","P126","P127","P128","P129","P13","P130","P131","P131072","P132","P133","P134","P134217728","P135","P136","P137","P137438953472","P138","P139","P14","P140","P140737488355328","P141","P142","P143","P144","P144115188075855872","P145","P146","P147","P148","P149","P15","P150","P151","P152","P153","P154","P155","P156","P157","P158","P159","P16","P160","P161","P162","P163","P16384","P164","P165","P166","P167","P16777216","P168","P169","P17","P170","P171","P17179869184","P172","P173","P174","P175","P17592186044416","P176","P177","P178","P179","P18","P180","P18014398509481984","P181","P182","P183","P184","P185","P186","P187","P188","P189","P19","P190","P191","P192","P193","P194","P195","P196","P197","P198","P199","P2","P20","P200","P201","P202","P203","P204","P2048","P205","P206","P207","P208","P209","P2097152","P21","P210","P211","P212","P213","P214","P2147483648","P215","P216","P217","P218","P219","P2199023255552","P22","P220","P221","P222","P223","P224","P225","P2251799813685248","P226","P227","P228","P229","P23","P230","P2305843009213693952","P231","P232","P233","P234","P235","P236","P237","P238","P239","P24","P240","P241","P242","P243","P244","P245","P246","P247","P248","P249","P25","P250","P251","P252","P253","P254","P255","P256","P257","P258","P259","P26","P260","P261","P262","P262144","P263","P264","P265","P266","P267","P268","P268435456","P269","P27","P270","P271","P272","P273","P274","P274877906944","P275","P276","P277","P278","P279","P28","P280","P281","P281474976710656","P282","P283","P284","P285","P286","P287","P288","P288230376151711744","P289","P29","P290","P291","P292","P293","P294","P295","P296","P297","P298","P299","P3","P30","P300","P301","P302","P303","P304","P305","P306","P307","P308","P309","P31","P310","P311","P312","P313","P314","P315","P316","P317","P318","P319","P32","P320","P321","P322","P323","P324","P325","P326","P327","P32768","P328","P329","P33","P330","P331","P332","P333","P334","P335","P33554432","P336","P337","P338","P339","P34","P340","P341","P342","P343","P34359738368","P344","P345","P346","P347","P348","P349","P35","P350","P351","P35184372088832","P352","P353","P354","P355","P356","P357","P358","P359","P36","P360","P36028797018963968","P361","P362","P363","P364","P365","P366","P367","P368","P369","P37","P370","P371","P372","P373","P374","P375","P376","P377","P378","P379","P38","P380","P381","P382","P383","P384","P385","P386","P387","P388","P389","P39","P390","P391","P392","P393","P394","P395","P396","P397","P398","P399","P4","P40","P400","P401","P402","P403","P404","P405","P406","P407","P408","P409","P4096","P41","P410","P411","P412","P413","P414","P415","P416","P417","P418","P419","P4194304","P42","P420","P421","P422","P423","P424","P425","P426","P427","P428","P429","P4294967296","P43","P430","P431","P432","P433","P434","P435","P436","P437","P438","P439","P4398046511104","P44","P440","P441","P442","P443","P444","P445","P446","P447","P448","P449","P45","P450","P4503599627370496","P451","P452","P453","P454","P455","P456","P457","P458","P459","P46","P460","P461","P4611686018427387904","P462","P463","P464","P465","P466","P467","P468","P469","P47","P470","P471","P472","P473","P474","P475","P476","P477","P478","P479","P48","P480","P481","P482","P483","P484","P485","P486","P487","P488","P489","P49","P490","P491","P492","P493","P494","P495","P496","P497","P498","P499","P5","P50","P500","P501","P502","P503","P504","P505","P506","P507","P508","P509","P51","P510","P511","P512","P513","P514","P515","P516","P517","P518","P519","P52","P520","P521","P522","P523","P524","P524288","P525","P526","P527","P528","P529","P53","P530","P531","P532","P533","P534","P535","P536","P536870912","P537","P538","P539","P54","P540","P541","P542","P543","P544","P545","P546","P547","P548","P549","P549755813888","P55","P550","P551","P552","P553","P554","P555","P556","P557","P558","P559","P56","P560","P561","P562","P562949953421312","P563","P564","P565","P566","P567","P568","P569","P57","P570","P571","P572","P573","P574","P575","P576","P576460752303423488","P577","P578","P579","P58","P580","P581","P582","P583","P584","P585","P586","P587","P588","P589","P59","P590","P591","P592","P593","P594","P595","P596","P597","P598","P599","P6","P60","P600","P601","P602","P603","P604","P605","P606","P607","P608","P609","P61","P610","P611","P612","P613","P614","P615","P616","P617","P618","P619","P62","P620","P621","P622","P623","P624","P625","P626","P627","P628","P629","P63","P630","P631","P632","P633","P634","P635","P636","P637","P638","P639","P64","P640","P641","P642","P643","P644","P645","P646","P647","P648","P649","P65","P650","P651","P652","P653","P654","P655","P65536","P656","P657","P658","P659","P66","P660","P661","P662","P663","P664","P665","P666","P667","P668","P669","P67","P670","P671","P67108864","P672","P673","P674","P675","P676","P677","P678","P679","P68","P680","P681","P682","P683","P684","P685","P686","P687","P68719476736","P688","P689","P69","P690","P691","P692","P693","P694","P695","P696","P697","P698","P699","P7","P70","P700","P701","P702","P703","P70368744177664","P704","P705","P706","P707","P708","P709","P71","P710","P711","P712","P713","P714","P715","P716","P717","P718","P719","P72","P720","P72057594037927936","P721","P722","P723","P724","P725","P726","P727","P728","P729","P73","P730","P731","P732","P733","P734","P735","P736","P737","P738","P739","P74","P740","P741","P742","P743","P744","P745","P746","P747","P748","P749","P75","P750","P751","P752","P753","P754","P755","P756","P757","P758","P759","P76","P760","P761","P762","P763","P764","P765","P766","P767","P768","P769","P77","P770","P771","P772","P773","P774","P775","P776","P777","P778","P779","P78","P780","P781","P782","P783","P784","P785","P786","P787","P788","P789","P79","P790","P791","P792","P793","P794","P795","P796","P797","P798","P799","P8","P80","P800","P801","P802","P803","P804","P805","P806","P807","P808","P809","P81","P810","P811","P812","P813","P814","P815","P816","P817","P818","P819","P8192","P82","P820","P821","P822","P823","P824","P825","P826","P827","P828","P829","P83","P830","P831","P832","P833","P834","P835","P836","P837","P838","P8388608","P839","P84","P840","P841","P842","P843","P844","P845","P846","P847","P848","P849","P85","P850","P851","P852","P853","P854","P855","P856","P857","P858","P8589934592","P859","P86","P860","P861","P862","P863","P864","P865","P866","P867","P868","P869","P87","P870","P871","P872","P873","P874","P875","P876","P877","P878","P879","P8796093022208","P88","P880","P881","P882","P883","P884","P885","P886","P887","P888","P889","P89","P890","P891","P892","P893","P894","P895","P896","P897","P898","P899","P9","P90","P900","P9007199254740992","P901","P902","P903","P904","P905","P906","P907","P908","P909","P91","P910","P911","P912","P913","P914","P915","P916","P917","P918","P919","P92","P920","P921","P922","P923","P924","P925","P926","P927","P928","P929","P93","P930","P931","P932","P933","P934","P935","P936","P937","P938","P939","P94","P940","P941","P942","P943","P944","P945","P946","P947","P948","P949","P95","P950","P951","P952","P953","P954","P955","P956","P957","P958","P959","P96","P960","P961","P962","P963","P964","P965","P966","P967","P968","P969","P97","P970","P971","P972","P973","P974","P975","P976","P977","P978","P979","P98","P980","P981","P982","P983","P984","P985","P986","P987","P988","P989","P99","P990","P991","P992","P993","P994","P995","P996","P997","P998","P999","True","U0","U1","U10","U100","U1000","U10000","U100000","U1000000","U10000000","U100000000","U1000000000","U10000000000","U100000000000","U1000000000000","U10000000000000","U100000000000000","U1000000000000000","U10000000000000000","U100000000000000000","U1000000000000000000","U10000000000000000000","U1001","U1002","U1003","U1004","U1005","U1006","U1007","U1008","U1009","U101","U1010","U1011","U1012","U1013","U1014","U1015","U1016","U1017","U1018","U1019","U102","U1020","U1021","U1022","U1023","U1024","U103","U104","U1048576","U105","U106","U107","U1073741824","U108","U109","U1099511627776","U11","U110","U111","U112","U1125899906842624","U113","U114","U115","U1152921504606846976","U116","U117","U118","U119","U12","U120","U121","U122","U123","U124","U125","U126","U127","U128","U129","U13","U130","U131","U131072","U132","U133","U134","U134217728","U135","U136","U137","U137438953472","U138","U139","U14","U140","U140737488355328","U141","U142","U143","U144","U144115188075855872","U145","U146","U147","U148","U149","U15","U150","U151","U152","U153","U154","U155","U156","U157","U158","U159","U16","U160","U161","U162","U163","U16384","U164","U165","U166","U167","U16777216","U168","U169","U17","U170","U171","U17179869184","U172","U173","U174","U175","U17592186044416","U176","U177","U178","U179","U18","U180","U18014398509481984","U181","U182","U183","U184","U185","U186","U187","U188","U189","U19","U190","U191","U192","U193","U194","U195","U196","U197","U198","U199","U2","U20","U200","U201","U202","U203","U204","U2048","U205","U206","U207","U208","U209","U2097152","U21","U210","U211","U212","U213","U214","U2147483648","U215","U216","U217","U218","U219","U2199023255552","U22","U220","U221","U222","U223","U224","U225","U2251799813685248","U226","U227","U228","U229","U23","U230","U2305843009213693952","U231","U232","U233","U234","U235","U236","U237","U238","U239","U24","U240","U241","U242","U243","U244","U245","U246","U247","U248","U249","U25","U250","U251","U252","U253","U254","U255","U256","U257","U258","U259","U26","U260","U261","U262","U262144","U263","U264","U265","U266","U267","U268","U268435456","U269","U27","U270","U271","U272","U273","U274","U274877906944","U275","U276","U277","U278","U279","U28","U280","U281","U281474976710656","U282","U283","U284","U285","U286","U287","U288","U288230376151711744","U289","U29","U290","U291","U292","U293","U294","U295","U296","U297","U298","U299","U3","U30","U300","U301","U302","U303","U304","U305","U306","U307","U308","U309","U31","U310","U311","U312","U313","U314","U315","U316","U317","U318","U319","U32","U320","U321","U322","U323","U324","U325","U326","U327","U32768","U328","U329","U33","U330","U331","U332","U333","U334","U335","U33554432","U336","U337","U338","U339","U34","U340","U341","U342","U343","U34359738368","U344","U345","U346","U347","U348","U349","U35","U350","U351","U35184372088832","U352","U353","U354","U355","U356","U357","U358","U359","U36","U360","U36028797018963968","U361","U362","U363","U364","U365","U366","U367","U368","U369","U37","U370","U371","U372","U373","U374","U375","U376","U377","U378","U379","U38","U380","U381","U382","U383","U384","U385","U386","U387","U388","U389","U39","U390","U391","U392","U393","U394","U395","U396","U397","U398","U399","U4","U40","U400","U401","U402","U403","U404","U405","U406","U407","U408","U409","U4096","U41","U410","U411","U412","U413","U414","U415","U416","U417","U418","U419","U4194304","U42","U420","U421","U422","U423","U424","U425","U426","U427","U428","U429","U4294967296","U43","U430","U431","U432","U433","U434","U435","U436","U437","U438","U439","U4398046511104","U44","U440","U441","U442","U443","U444","U445","U446","U447","U448","U449","U45","U450","U4503599627370496","U451","U452","U453","U454","U455","U456","U457","U458","U459","U46","U460","U461","U4611686018427387904","U462","U463","U464","U465","U466","U467","U468","U469","U47","U470","U471","U472","U473","U474","U475","U476","U477","U478","U479","U48","U480","U481","U482","U483","U484","U485","U486","U487","U488","U489","U49","U490","U491","U492","U493","U494","U495","U496","U497","U498","U499","U5","U50","U500","U501","U502","U503","U504","U505","U506","U507","U508","U509","U51","U510","U511","U512","U513","U514","U515","U516","U517","U518","U519","U52","U520","U521","U522","U523","U524","U524288","U525","U526","U527","U528","U529","U53","U530","U531","U532","U533","U534","U535","U536","U536870912","U537","U538","U539","U54","U540","U541","U542","U543","U544","U545","U546","U547","U548","U549","U549755813888","U55","U550","U551","U552","U553","U554","U555","U556","U557","U558","U559","U56","U560","U561","U562","U562949953421312","U563","U564","U565","U566","U567","U568","U569","U57","U570","U571","U572","U573","U574","U575","U576","U576460752303423488","U577","U578","U579","U58","U580","U581","U582","U583","U584","U585","U586","U587","U588","U589","U59","U590","U591","U592","U593","U594","U595","U596","U597","U598","U599","U6","U60","U600","U601","U602","U603","U604","U605","U606","U607","U608","U609","U61","U610","U611","U612","U613","U614","U615","U616","U617","U618","U619","U62","U620","U621","U622","U623","U624","U625","U626","U627","U628","U629","U63","U630","U631","U632","U633","U634","U635","U636","U637","U638","U639","U64","U640","U641","U642","U643","U644","U645","U646","U647","U648","U649","U65","U650","U651","U652","U653","U654","U655","U65536","U656","U657","U658","U659","U66","U660","U661","U662","U663","U664","U665","U666","U667","U668","U669","U67","U670","U671","U67108864","U672","U673","U674","U675","U676","U677","U678","U679","U68","U680","U681","U682","U683","U684","U685","U686","U687","U68719476736","U688","U689","U69","U690","U691","U692","U693","U694","U695","U696","U697","U698","U699","U7","U70","U700","U701","U702","U703","U70368744177664","U704","U705","U706","U707","U708","U709","U71","U710","U711","U712","U713","U714","U715","U716","U717","U718","U719","U72","U720","U72057594037927936","U721","U722","U723","U724","U725","U726","U727","U728","U729","U73","U730","U731","U732","U733","U734","U735","U736","U737","U738","U739","U74","U740","U741","U742","U743","U744","U745","U746","U747","U748","U749","U75","U750","U751","U752","U753","U754","U755","U756","U757","U758","U759","U76","U760","U761","U762","U763","U764","U765","U766","U767","U768","U769","U77","U770","U771","U772","U773","U774","U775","U776","U777","U778","U779","U78","U780","U781","U782","U783","U784","U785","U786","U787","U788","U789","U79","U790","U791","U792","U793","U794","U795","U796","U797","U798","U799","U8","U80","U800","U801","U802","U803","U804","U805","U806","U807","U808","U809","U81","U810","U811","U812","U813","U814","U815","U816","U817","U818","U819","U8192","U82","U820","U821","U822","U823","U824","U825","U826","U827","U828","U829","U83","U830","U831","U832","U833","U834","U835","U836","U837","U838","U8388608","U839","U84","U840","U841","U842","U843","U844","U845","U846","U847","U848","U849","U85","U850","U851","U852","U853","U854","U855","U856","U857","U858","U8589934592","U859","U86","U860","U861","U862","U863","U864","U865","U866","U867","U868","U869","U87","U870","U871","U872","U873","U874","U875","U876","U877","U878","U879","U8796093022208","U88","U880","U881","U882","U883","U884","U885","U886","U887","U888","U889","U89","U890","U891","U892","U893","U894","U895","U896","U897","U898","U899","U9","U90","U900","U9007199254740992","U901","U902","U903","U904","U905","U906","U907","U908","U909","U91","U910","U911","U912","U913","U914","U915","U916","U917","U918","U919","U92","U920","U921","U922","U9223372036854775808","U923","U924","U925","U926","U927","U928","U929","U93","U930","U931","U932","U933","U934","U935","U936","U937","U938","U939","U94","U940","U941","U942","U943","U944","U945","U946","U947","U948","U949","U95","U950","U951","U952","U953","U954","U955","U956","U957","U958","U959","U96","U960","U961","U962","U963","U964","U965","U966","U967","U968","U969","U97","U970","U971","U972","U973","U974","U975","U976","U977","U978","U979","U98","U980","U981","U982","U983","U984","U985","U986","U987","U988","U989","U99","U990","U991","U992","U993","U994","U995","U996","U997","U998","U999","Z0","powi","powi","powi","Integer","NInt","PInt","Z0","add","add","add","add","add","add","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","cmp","cmp","cmp","default","default","default","div","div","div","div","div","eq","eq","eq","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","max","max","max","max","max","max","max","max","max","min","min","min","min","min","min","min","min","min","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","neg","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_div","partial_div","partial_div","powi","powi","powi","powi","powi","powi","powi","powi","rem","rem","rem","rem","rem","sub","sub","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i16","to_i32","to_i32","to_i32","to_i64","to_i64","to_i64","to_i8","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_isize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BOOL","Bit","I16","I16","I32","I32","I64","I64","I8","I8","ISIZE","ISIZE","Integer","NonZero","Ord","PowerOfTwo","TypeArray","U16","U32","U64","U8","U8","USIZE","Unsigned","Zero","new","to_bool","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_ordering","to_u16","to_u32","to_u64","to_u8","to_u8","to_usize","AbsVal","Add1","And","Compare","Cube","Diff","Double","Eq","Exp","Gcf","Gr","GrEq","Le","LeEq","Length","Log2","Maximum","Minimum","Mod","Negate","NotEq","Or","PartialQuot","Prod","Quot","Shleft","Shright","Sqrt","Square","Sub1","Sum","Xor","Abs","Cmp","Gcd","INT","IsEqual","IsGreater","IsGreaterOrEqual","IsLess","IsLessOrEqual","IsNotEqual","Len","Logarithm2","Max","Min","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","Output","PartialDiv","Pow","Same","SquareRoot","ToInt","is_equal","is_greater","is_greater_or_equal","is_less","is_less_or_equal","is_not_equal","len","max","min","partial_div","powi","to_int","GetBit","GetBitOut","Output","Output","PowerOfTwo","SetBit","SetBitOut","UInt","UTerm","Unsigned","add","add","add","add","add","add","add","add","add","add","add","bitand","bitand","bitor","bitor","bitor","bitor","bitor","bitor","bitxor","bitxor","borrow","borrow","borrow_mut","borrow_mut","clone","clone","cmp","cmp","default","default","div","div","eq","eq","fmt","fmt","from","from","hash","hash","into","into","len","len","max","max","min","min","mul","mul","mul","mul","mul","mul","mul","mul","new","new","partial_cmp","partial_cmp","partial_div","partial_div","powi","powi","rem","rem","set_bit","set_bit","shl","shl","shl","shl","shl","shl","shl","shr","shr","shr","shr","shr","shr","shr","sub","sub","sub","sub","sub","sub","sub","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i8","to_i8","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_int","to_isize","to_isize","to_u16","to_u16","to_u32","to_u32","to_u64","to_u64","to_u8","to_u8","to_usize","to_usize","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["typenum","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::bit","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::conststypenum::int","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::marker_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::operator_aliases","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::type_operators","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","typenum::uint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","A potential output from <code>Cmp</code>, this is the type equivalent …","","A potential output from <code>Cmp</code>, this is the type equivalent …","A potential output from <code>Cmp</code>, this is the type equivalent …","","","","","","","","","","","","","","","A type-level array of type-level numbers.","Asserts that a type is <code>True</code>, aka <code>B1</code>.","Asserts that two types are the same.","Type-level bits.","","","","","","","","","","","","","A convenience macro for comparing type numbers. Use <code>op!</code> …","Type aliases for many constants.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Type-level signed integers.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","All of the <strong>marker traits</strong> used in typenum.","Convenient type operations.","Aliases for the type operators used in this crate. Their …","","","","Create a new type-level arrray. Only usable on Rust 1.13.0 …","","","","","","","","","","","","","Useful <strong>type operators</strong> that are not defined in <code>core::ops</code>.","Type-level unsigned integers.","The terminating type for type arrays.","<code>TArr</code> is a type that acts as an array of types. It is …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The type-level bit 0.","The type-level bit 1.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Instantiates a singleton representing this bit.","","","Instantiates a singleton representing this bitype-level signed integers with negative sign.","Type-level signed integers with positive sign.","The type-level signed integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instantiates a singleton representing this strictly …","Instantiates a singleton representing this strictly …","Instantiates a singleton representing the integer 0.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <strong>marker trait</strong> for compile time bits.","","","","","","","","","","","The <strong>marker trait</strong> for compile time signed integers.","A <strong>marker trait</strong> to designate that a type is not zero. All …","A <strong>Marker trait</strong> for the types <code>Greater</code>, <code>Equal</code>, and <code>Less</code>.","The <strong>marker trait</strong> for type-level numbers which are a power …","The <strong>marker trait</strong> for type-level arrays of type-level …","","","","","","","The <strong>marker trait</strong> for compile time unsigned integers.","A <strong>marker trait</strong> to designate that a type is zero. Only <code>B0</code>, …","Instantiates a singleton representing this bit.","","","","","","","","","","","","","","","","","","","Alias for the associated type of <code>Abs</code>: …","Alias to make it easy to add 1: …","Alias for the associated type of <code>BitAnd</code>: …","Alias for the associated type of <code>Cmp</code>: …","Alias to make it easy to cube. …","Alias for the associated type of <code>Sub</code>: …","Alias to make it easy to multiply by 2. …","Alias for the associated type of <code>IsEqual</code>: …","Alias for the associated type of <code>Pow</code>: …","Alias for the associated type of <code>Gcd</code>: …","Alias for the associated type of <code>IsGreater</code>: …","Alias for the associated type of <code>IsGreaterOrEqual</code>: …","Alias for the associated type of <code>IsLess</code>: …","Alias for the associated type of <code>IsLessOrEqual</code>: …","Alias for the associated type of <code>Len</code>: …","Alias for the associated type of <code>Logarithm2</code>: …","Alias for the associated type of <code>Max</code>: …","Alias for the associated type of <code>Min</code>: …","Alias for the associated type of <code>Rem</code>: …","Alias for the associated type of <code>Neg</code>: …","Alias for the associated type of <code>IsNotEqual</code>: …","Alias for the associated type of <code>BitOr</code>: …","Alias for the associated type of <code>PartialDiv</code>: …","Alias for the associated type of <code>Mul</code>: …","Alias for the associated type of <code>Div</code>: …","Alias for the associated type of <code>Shl</code>: …","Alias for the associated type of <code>Shr</code>: …","Alias for the associated type of <code>SquareRoot</code>: …","Alias to make it easy to square. …","Alias to make it easy to subtract 1: …","Alias for the associated type of <code>Add</code>: …","Alias for the associated type of <code>BitXor</code>: …","A <strong>type operator</strong> that returns the absolute value.","A <strong>type operator</strong> for comparing <code>Self</code> and <code>Rhs</code>. It provides a …","A <strong>type operator</strong> that computes the greatest common divisor …","The concrete value for the type. Can be used in <code>const</code> …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self == Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &gt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt; Rhs</code>, otherwise …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self &lt;= Rhs</code>, …","A <strong>type operator</strong> that returns <code>True</code> if <code>Self != Rhs</code>, …","A <strong>type operator</strong> that gives the length of an <code>Array</code> or the …","A <strong>type operator</strong> for taking the integer binary logarithm of …","A <strong>type operator</strong> that returns the maximum of <code>Self</code> and <code>Rhs</code>.","A <strong>type operator</strong> that returns the minimum of <code>Self</code> and <code>Rhs</code>.","Should always be <code>Self</code>","The absolute value.","The result of the exponentiation.","The result of the comparison. It should only ever be one …","The length as a type-level unsigned integer.","The type of the result of the division","The type of the minimum of <code>Self</code> and <code>Rhs</code>","The type of the maximum of <code>Self</code> and <code>Rhs</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The type representing either <code>True</code> or <code>False</code>","The result of the integer square root.","The result of the integer binary logarithm.","The greatest common divisor.","Division as a partial function. This <strong>type operator</strong> …","A <strong>type operator</strong> that provides exponentiation by repeated …","A <strong>type operator</strong> that ensures that <code>Rhs</code> is the same as <code>Self</code>, …","A <strong>type operator</strong> for taking the integer square root of <code>Self</code>.","A <strong>type operator</strong> for taking a concrete integer value from a …","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","Method returning <code>True</code> or <code>False</code>.","This function isn’t used in this crate, but may be …","Method returning the maximum","Method returning the minimum","Method for performing the division","This function isn’t used in this crate, but may be …","Method returning the concrete value for the type.","","","","","","A <strong>type operator</strong> that, when implemented for unsigned …","Alias for the result of calling <code>SetBit</code>: …","<code>UInt</code> is defined recursively, where <code>B</code> is the least …","The terminating type for <code>UInt</code>; it always comes after the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Instantiates a singleton representing this unsigned …","Instantiates a singleton representing this unsigned …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,1,2,3,0,0,0,1,2,3,0,1,2,3,1,2,3,1,2,3,1,2,3,0,0,0,0,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,11,12,0,0,0,19,21,21,19,19,21,19,19,21,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,19,19,21,21,19,19,21,21,19,19,21,21,19,21,19,21,19,21,19,21,19,21,19,21,19,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,27,27,0,0,0,0,29,29,29,26,26,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,26,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,29,26,26,26,30,30,30,29,29,29,26,26,26,30,30,30,29,29,29,29,29,26,26,26,26,26,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,26,26,26,30,30,30,29,29,26,26,30,29,29,29,26,26,26,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,29,29,29,29,26,26,26,26,30,30,30,30,29,26,30,29,26,30,29,26,30,29,26,30,20,0,24,31,24,31,24,31,24,31,24,31,0,0,0,0,0,24,24,24,20,24,24,0,0,20,20,24,31,24,31,24,31,24,31,24,31,43,24,24,24,20,24,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,0,0,0,0,0,54,55,58,53,56,57,49,52,51,50,47,44,0,0,62,63,0,0,0,0,0,0,28,28,28,28,28,28,28,28,42,42,42,28,42,28,28,28,28,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,28,28,28,28,42,42,42,28,42,28,42,28,42,28,42,28,42,28,42,28,28,28,28,42,42,42,28,28,28,28,42,42,42,28,28,28,28,28,42,42,28,42,28,42,28,42,28,42,28,28,28,28,28,28,28,28,28,42,42,42,42,42,42,42,42,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42,28,42],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[[1,1],4],[[2,2],4],[[3,3],4],0,0,[[],1],[[],2],[[],3],[[1,1],5],[[2,2],5],[[3,3],5],[[1,6],7],[[2,6],7],[[3,6],7],[[]],[[]],[[]],[1],[2],[3],0,[[]],[[]],[[]],0,0,0,[[1,1],[[8,[4]]]],[[2,2],[[8,[4]]]],[[3,3],[[8,[4]]]],0,[[],4],[[],4],[[],4],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,0,[[11,11]],[[12,12]],[[]],[[]],[[]],[[]],[11,11],[[[12,[13,13]]],[[12,[13,13]]]],[[11,11],4],[[[12,[14,14]],12],4],[11],[12],[[11,11],5],[[[12,[15,15]],12],5],[[11,6],7],[[[12,[16,16]],6],7],[[]],[[]],[11],[[[12,[17,17]]]],[[]],[[]],[11],[12],[11],[12],[11],[12],[[11,11],[[8,[4]]]],[[[12,[18,18]],12],[[8,[4]]]],[11],[12],[11],[12],[[11,11]],[[12,12]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,[[19,20]],[[21,21]],[[21,19]],[[19,19]],[[19,21]],[[21,20]],[[19,21]],[[19,19]],[[21,19]],[[21,21]],[[]],[[]],[[]],[[]],[19,19],[21,21],[[19,19],4],[[21,21],4],[[],19],[[],21],[[19,19],5],[[21,21],5],[[19,6],7],[[21,6],7],[[]],[[]],[19],[21],[[]],[[]],[[19,19],19],[[19,21],21],[[21,21],21],[[21,19],21],[[19,19],19],[[19,21],19],[[21,19],19],[[21,21],21],[[],19],[[],19],[[],21],[[],21],[19],[21],[[19,19],[[8,[4]]]],[[21,21],[[8,[4]]]],[[],5],[[],5],[[],22],[[],22],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[23,[26,[[0,[24,25]]]]]],[[27,[26,[[28,[24,19]]]]]],[[27,[26,[[28,[24,21]]]]]],0,0,0,0,[[29,[29,[[0,[24,25]]]]]],[[[29,[[0,[24,25]]]],30]],[[29,[26,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]],30]],[[[26,[[0,[24,25]]]],29]],[[26,[26,[[0,[24,25]]]]]],[[30,31]],[[]],[[]],[[]],[[]],[[]],[[]],[[[29,[[0,[13,24,25]]]]],[[29,[[0,[13,24,25]]]]]],[[[26,[[0,[13,24,25]]]]],[[26,[[0,[13,24,25]]]]]],[30,30],[[[29,[[0,[14,24,25]]]],29],4],[[[26,[[0,[14,24,25]]]],26],4],[[30,30],4],[[],[[29,[[0,[32,24,25]]]]]],[[],[[26,[[0,[32,24,25]]]]]],[[],30],[[29,[29,[[0,[24,25]]]]]],[[29,[26,[[0,[24,25]]]]]],[[26,[26,[[0,[24,25]]]]]],[[26,[29,[[0,[24,25]]]]]],[[30,[0,[31,25]]]],[[[29,[[0,[15,24,25]]]],29],5],[[[26,[[0,[15,24,25]]]],26],5],[[30,30],5],[[[29,[[0,[16,24,25]]]],6],7],[[[26,[[0,[16,24,25]]]],6],7],[[30,6],7],[[]],[[]],[[]],[[[29,[[0,[17,24,25]]]]]],[[[26,[[0,[17,24,25]]]]]],[30],[[]],[[]],[[]],[[29,30]],[[29,26]],[[29,29]],[[26,26]],[[26,30]],[[26,29]],[[30,30]],[[30,29]],[[30,26]],[[29,30]],[[29,29]],[[29,26]],[[26,26]],[[26,29]],[[26,30]],[[30,30]],[[30,29]],[[30,26]],[[29,[26,[[0,[24,25]]]]]],[[29,11]],[[29,[29,[[0,[24,25]]]]]],[[[29,[[0,[24,25]]]],30]],[[29,12]],[[26,12]],[[26,11]],[[26,[29,[[0,[24,25]]]]]],[[26,[26,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]],30]],[[30,11]],[[30,31]],[[30,12]],[[[29,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]]]],[30],[[],[[29,[[0,[24,25]]]]]],[[],[[26,[[0,[24,25]]]]]],[[],30],[[[29,[[0,[18,24,25]]]],29],[[8,[4]]]],[[[26,[[0,[18,24,25]]]],26],[[8,[4]]]],[[30,30],[[8,[4]]]],[[]],[[]],[[]],[[[29,[[0,[24,25]]]],30]],[[29,[29,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]],30]],[[26,[29,[[28,[24,19]]]]]],[[26,[29,[[28,[24,21]]]]]],[[30,[26,[[0,[24,25]]]]]],[[30,[29,[[0,[24,25]]]]]],[[30,30]],[[29,[29,[[0,[24,25]]]]]],[[29,[26,[[0,[24,25]]]]]],[[26,[26,[[0,[24,25]]]]]],[[26,[29,[[0,[24,25]]]]]],[[30,[0,[31,25]]]],[[[29,[[0,[24,25]]]],30]],[[29,[26,[[0,[24,25]]]]]],[[29,[29,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]],26]],[[26,[29,[[0,[24,25]]]]]],[[[26,[[0,[24,25]]]],30]],[[30,[26,[[0,[24,25]]]]]],[[30,[29,[[0,[24,25]]]]]],[[30,30]],[[],33],[[],33],[[],33],[[],34],[[],34],[[],34],[[],35],[[],35],[[],35],[[],36],[[],36],[[],36],[[],35],[[],34],[[],33],[[],36],[[],36],[[],34],[[],33],[[],35],[[],33],[[],36],[[],34],[[],35],[[],37],[[],37],[[],37],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],5],[[],33],[[],33],[[],34],[[],34],[[],35],[[],35],[[],36],[[],36],[[],37],[[],37],[[],4],[[],38],[[],39],[[],40],[[],22],[[],22],[[],41],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[[28,[24,20]],19]],[[[28,[24,19]],21]],[[[28,[21]],21]],[[[28,[24,20]],42]],[[[28,[19]],[28,[24,19]]]],[[[28,[19]],[28,[24,21]]]],[[[28,[21]],[28,[24,19]]]],[[[28,[21]],[28,[24,21]]]],[[42,21]],[[42,24]],[[42,19]],[[[28,[24,20]],24]],[[42,24]],[[[28,[24,20]],42]],[[[28,[19]],[28,[24,19]]]],[[[28,[19]],[28,[24,21]]]],[[[28,[21]],[28,[24,19]]]],[[[28,[21]],[28,[24,21]]]],[[42,24]],[[[28,[24,20]],24]],[[42,24]],[[]],[[]],[[]],[[]],[[[28,[13,13]]],[[28,[13,13]]]],[42,42],[[[28,[14,14]],28],4],[[42,42],4],[[],[[28,[32,32]]]],[[],42],[[[28,[24,20]],[28,[24,20]]]],[[42,[28,[24,20]]]],[[[28,[15,15]],28],5],[[42,42],5],[[[28,[16,16]],6],7],[[42,6],7],[[]],[[]],[[[28,[17,17]]]],[42],[[]],[[]],[[[28,[20]]]],[42],[28],[42],[28],[42],[[[28,[24,20]],19]],[[[28,[24,20]],21]],[[[28,[21]],[28,[24,20]]]],[[[28,[19]],[28,[24,20]]]],[[[28,[24,20]],42]],[[42,21]],[[42,19]],[[42,24]],[[],[[28,[24,20]]]],[[],42],[[[28,[18,18]],28],[[8,[4]]]],[[42,42],[[8,[4]]]],[[[28,[24,20]],[28,[24,20]]]],[[42,[28,[24,20]]]],[[]],[[]],[[[28,[24,20]],[28,[24,20]]]],[[42,[28,[24,20]]]],[[]],[[]],[[[28,[24,20]],21]],[[[28,[24,20]],19]],[[[28,[24,20]],[28,[24,20]]]],[[[28,[24,20]],42]],[[42,21]],[[42,24]],[[42,19]],[[[28,[24,20]],19]],[[[28,[24,20]],21]],[[[28,[20]],[28,[24,20]]]],[[[28,[24,20]],42]],[[42,24]],[[42,19]],[[42,21]],[[[28,[19]],21]],[[[28,[42,21]],21]],[[[28,[[28,[24,20]],21]],21]],[[[28,[24,20]],19]],[[[28,[24,20]],24]],[[42,42]],[[42,19]],[[],33],[[],33],[[],34],[[],34],[[],35],[[],35],[[],36],[[],36],[[],41],[[],36],[[],33],[[],34],[[],35],[[],22],[[],38],[[],39],[[],40],[[],38],[[],39],[[],40],[[],36],[[],33],[[],41],[[],35],[[],34],[[],22],[[],37],[[],37],[[],38],[[],38],[[],39],[[],39],[[],40],[[],40],[[],22],[[],22],[[],41],[[],41],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10]],"p":[[3,"Greater"],[3,"Less"],[3,"Equal"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"ATerm"],[3,"TArr"],[8,"Clone"],[8,"Ord"],[8,"PartialEq"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[3,"B0"],[8,"Bit"],[3,"B1"],[15,"u8"],[6,"P1"],[8,"Unsigned"],[8,"NonZero"],[3,"NInt"],[6,"N1"],[3,"UInt"],[3,"PInt"],[3,"Z0"],[8,"Integer"],[8,"Default"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u16"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"UTerm"],[8,"Ord"],[8,"ToInt"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[8,"SquareRoot"],[8,"Logarithm2"],[8,"Gcd"],[8,"GetBit"],[8,"SetBit"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
